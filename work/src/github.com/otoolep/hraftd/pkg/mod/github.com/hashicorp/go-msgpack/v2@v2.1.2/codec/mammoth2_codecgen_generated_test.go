// Code generated by codecgen - DO NOT EDIT.

package codec

import (
	"errors"
	"runtime"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF819781 = 1
	codecSelferCcRAW19781  = 255
	// ----- value types used ----
	codecSelferValueTypeArray19781  = 10
	codecSelferValueTypeMap19781    = 9
	codecSelferValueTypeString19781 = 6
	codecSelferValueTypeInt19781    = 2
	codecSelferValueTypeUint19781   = 3
	codecSelferValueTypeFloat19781  = 4
	codecSelferBitsize19781         = uint8(32 << (^uint(0) >> 63))
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct19781 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer19781 struct{}

func init() {
	if GenVersion != 10 {
		_, file, _, _ := runtime.Caller(0)
		panic("codecgen version mismatch: current: 10, need " + strconv.FormatInt(int64(GenVersion), 10) + ". Re-generate file: " + file)
	}
	if false {
		var _ byte = 0 // reference the types, but skip this branch at build/run time
	}
}

func (x *TestMammoth2) CodecEncodeSelf(e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(576)
			} else {
				r.WriteMapStart(576)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FIntf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						z.EncFallback(x.FIntf)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FIntf`)
				}
				r.WriteMapElemValue()
				if x.FIntf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						z.EncFallback(x.FIntf)
					}
				}
			}
			var yyn6 bool
			if x.FptrIntf == nil {
				yyn6 = true
				goto LABEL6
			}
		LABEL6:
			if yyr2 || yy2arr2 {
				if yyn6 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrIntf == nil {
						r.EncodeNil()
					} else {
						yy7 := *x.FptrIntf
						if false {
						} else {
							z.EncFallback(yy7)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrIntf`)
				}
				r.WriteMapElemValue()
				if yyn6 {
					r.EncodeNil()
				} else {
					if x.FptrIntf == nil {
						r.EncodeNil()
					} else {
						yy9 := *x.FptrIntf
						if false {
						} else {
							z.EncFallback(yy9)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw(z.BytesView(string(x.FString)))
					} else {
						r.EncodeStringEnc(codecSelferCcUTF819781, string(x.FString))
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FString`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					if z.EncBasicHandle().StringToRaw {
						r.EncodeStringBytesRaw(z.BytesView(string(x.FString)))
					} else {
						r.EncodeStringEnc(codecSelferCcUTF819781, string(x.FString))
					}
				}
			}
			var yyn14 bool
			if x.FptrString == nil {
				yyn14 = true
				goto LABEL14
			}
		LABEL14:
			if yyr2 || yy2arr2 {
				if yyn14 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrString == nil {
						r.EncodeNil()
					} else {
						yy15 := *x.FptrString
						if false {
						} else {
							if z.EncBasicHandle().StringToRaw {
								r.EncodeStringBytesRaw(z.BytesView(string(yy15)))
							} else {
								r.EncodeStringEnc(codecSelferCcUTF819781, string(yy15))
							}
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrString`)
				}
				r.WriteMapElemValue()
				if yyn14 {
					r.EncodeNil()
				} else {
					if x.FptrString == nil {
						r.EncodeNil()
					} else {
						yy17 := *x.FptrString
						if false {
						} else {
							if z.EncBasicHandle().StringToRaw {
								r.EncodeStringBytesRaw(z.BytesView(string(yy17)))
							} else {
								r.EncodeStringEnc(codecSelferCcUTF819781, string(yy17))
							}
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeFloat32(float32(x.FFloat32))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FFloat32`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeFloat32(float32(x.FFloat32))
				}
			}
			var yyn22 bool
			if x.FptrFloat32 == nil {
				yyn22 = true
				goto LABEL22
			}
		LABEL22:
			if yyr2 || yy2arr2 {
				if yyn22 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrFloat32 == nil {
						r.EncodeNil()
					} else {
						yy23 := *x.FptrFloat32
						if false {
						} else {
							r.EncodeFloat32(float32(yy23))
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrFloat32`)
				}
				r.WriteMapElemValue()
				if yyn22 {
					r.EncodeNil()
				} else {
					if x.FptrFloat32 == nil {
						r.EncodeNil()
					} else {
						yy25 := *x.FptrFloat32
						if false {
						} else {
							r.EncodeFloat32(float32(yy25))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeFloat64(float64(x.FFloat64))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FFloat64`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeFloat64(float64(x.FFloat64))
				}
			}
			var yyn30 bool
			if x.FptrFloat64 == nil {
				yyn30 = true
				goto LABEL30
			}
		LABEL30:
			if yyr2 || yy2arr2 {
				if yyn30 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrFloat64 == nil {
						r.EncodeNil()
					} else {
						yy31 := *x.FptrFloat64
						if false {
						} else {
							r.EncodeFloat64(float64(yy31))
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrFloat64`)
				}
				r.WriteMapElemValue()
				if yyn30 {
					r.EncodeNil()
				} else {
					if x.FptrFloat64 == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.FptrFloat64
						if false {
						} else {
							r.EncodeFloat64(float64(yy33))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.FUint))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FUint`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.FUint))
				}
			}
			var yyn38 bool
			if x.FptrUint == nil {
				yyn38 = true
				goto LABEL38
			}
		LABEL38:
			if yyr2 || yy2arr2 {
				if yyn38 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrUint == nil {
						r.EncodeNil()
					} else {
						yy39 := *x.FptrUint
						if false {
						} else {
							r.EncodeUint(uint64(yy39))
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrUint`)
				}
				r.WriteMapElemValue()
				if yyn38 {
					r.EncodeNil()
				} else {
					if x.FptrUint == nil {
						r.EncodeNil()
					} else {
						yy41 := *x.FptrUint
						if false {
						} else {
							r.EncodeUint(uint64(yy41))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.FUint8))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FUint8`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.FUint8))
				}
			}
			var yyn46 bool
			if x.FptrUint8 == nil {
				yyn46 = true
				goto LABEL46
			}
		LABEL46:
			if yyr2 || yy2arr2 {
				if yyn46 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrUint8 == nil {
						r.EncodeNil()
					} else {
						yy47 := *x.FptrUint8
						if false {
						} else {
							r.EncodeUint(uint64(yy47))
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrUint8`)
				}
				r.WriteMapElemValue()
				if yyn46 {
					r.EncodeNil()
				} else {
					if x.FptrUint8 == nil {
						r.EncodeNil()
					} else {
						yy49 := *x.FptrUint8
						if false {
						} else {
							r.EncodeUint(uint64(yy49))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.FUint16))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FUint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FUint16`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.FUint16))
				}
			}
			var yyn54 bool
			if x.FptrUint16 == nil {
				yyn54 = true
				goto LABEL54
			}
		LABEL54:
			if yyr2 || yy2arr2 {
				if yyn54 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrUint16 == nil {
						r.EncodeNil()
					} else {
						yy55 := *x.FptrUint16
						if false {
						} else {
							r.EncodeUint(uint64(yy55))
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrUint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrUint16`)
				}
				r.WriteMapElemValue()
				if yyn54 {
					r.EncodeNil()
				} else {
					if x.FptrUint16 == nil {
						r.EncodeNil()
					} else {
						yy57 := *x.FptrUint16
						if false {
						} else {
							r.EncodeUint(uint64(yy57))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.FUint32))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FUint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FUint32`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.FUint32))
				}
			}
			var yyn62 bool
			if x.FptrUint32 == nil {
				yyn62 = true
				goto LABEL62
			}
		LABEL62:
			if yyr2 || yy2arr2 {
				if yyn62 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrUint32 == nil {
						r.EncodeNil()
					} else {
						yy63 := *x.FptrUint32
						if false {
						} else {
							r.EncodeUint(uint64(yy63))
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrUint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrUint32`)
				}
				r.WriteMapElemValue()
				if yyn62 {
					r.EncodeNil()
				} else {
					if x.FptrUint32 == nil {
						r.EncodeNil()
					} else {
						yy65 := *x.FptrUint32
						if false {
						} else {
							r.EncodeUint(uint64(yy65))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.FUint64))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FUint64`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.FUint64))
				}
			}
			var yyn70 bool
			if x.FptrUint64 == nil {
				yyn70 = true
				goto LABEL70
			}
		LABEL70:
			if yyr2 || yy2arr2 {
				if yyn70 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrUint64 == nil {
						r.EncodeNil()
					} else {
						yy71 := *x.FptrUint64
						if false {
						} else {
							r.EncodeUint(uint64(yy71))
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrUint64`)
				}
				r.WriteMapElemValue()
				if yyn70 {
					r.EncodeNil()
				} else {
					if x.FptrUint64 == nil {
						r.EncodeNil()
					} else {
						yy73 := *x.FptrUint64
						if false {
						} else {
							r.EncodeUint(uint64(yy73))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.FUintptr))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FUintptr`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.FUintptr))
				}
			}
			var yyn78 bool
			if x.FptrUintptr == nil {
				yyn78 = true
				goto LABEL78
			}
		LABEL78:
			if yyr2 || yy2arr2 {
				if yyn78 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrUintptr == nil {
						r.EncodeNil()
					} else {
						yy79 := *x.FptrUintptr
						if false {
						} else {
							r.EncodeUint(uint64(yy79))
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrUintptr`)
				}
				r.WriteMapElemValue()
				if yyn78 {
					r.EncodeNil()
				} else {
					if x.FptrUintptr == nil {
						r.EncodeNil()
					} else {
						yy81 := *x.FptrUintptr
						if false {
						} else {
							r.EncodeUint(uint64(yy81))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.FInt))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FInt`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.FInt))
				}
			}
			var yyn86 bool
			if x.FptrInt == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr2 || yy2arr2 {
				if yyn86 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrInt == nil {
						r.EncodeNil()
					} else {
						yy87 := *x.FptrInt
						if false {
						} else {
							r.EncodeInt(int64(yy87))
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrInt`)
				}
				r.WriteMapElemValue()
				if yyn86 {
					r.EncodeNil()
				} else {
					if x.FptrInt == nil {
						r.EncodeNil()
					} else {
						yy89 := *x.FptrInt
						if false {
						} else {
							r.EncodeInt(int64(yy89))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.FInt8))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FInt8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FInt8`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.FInt8))
				}
			}
			var yyn94 bool
			if x.FptrInt8 == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr2 || yy2arr2 {
				if yyn94 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrInt8 == nil {
						r.EncodeNil()
					} else {
						yy95 := *x.FptrInt8
						if false {
						} else {
							r.EncodeInt(int64(yy95))
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrInt8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrInt8`)
				}
				r.WriteMapElemValue()
				if yyn94 {
					r.EncodeNil()
				} else {
					if x.FptrInt8 == nil {
						r.EncodeNil()
					} else {
						yy97 := *x.FptrInt8
						if false {
						} else {
							r.EncodeInt(int64(yy97))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.FInt16))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FInt16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FInt16`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.FInt16))
				}
			}
			var yyn102 bool
			if x.FptrInt16 == nil {
				yyn102 = true
				goto LABEL102
			}
		LABEL102:
			if yyr2 || yy2arr2 {
				if yyn102 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrInt16 == nil {
						r.EncodeNil()
					} else {
						yy103 := *x.FptrInt16
						if false {
						} else {
							r.EncodeInt(int64(yy103))
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrInt16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrInt16`)
				}
				r.WriteMapElemValue()
				if yyn102 {
					r.EncodeNil()
				} else {
					if x.FptrInt16 == nil {
						r.EncodeNil()
					} else {
						yy105 := *x.FptrInt16
						if false {
						} else {
							r.EncodeInt(int64(yy105))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.FInt32))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FInt32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FInt32`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.FInt32))
				}
			}
			var yyn110 bool
			if x.FptrInt32 == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr2 || yy2arr2 {
				if yyn110 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrInt32 == nil {
						r.EncodeNil()
					} else {
						yy111 := *x.FptrInt32
						if false {
						} else {
							r.EncodeInt(int64(yy111))
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrInt32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrInt32`)
				}
				r.WriteMapElemValue()
				if yyn110 {
					r.EncodeNil()
				} else {
					if x.FptrInt32 == nil {
						r.EncodeNil()
					} else {
						yy113 := *x.FptrInt32
						if false {
						} else {
							r.EncodeInt(int64(yy113))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.FInt64))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FInt64`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.FInt64))
				}
			}
			var yyn118 bool
			if x.FptrInt64 == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr2 || yy2arr2 {
				if yyn118 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrInt64 == nil {
						r.EncodeNil()
					} else {
						yy119 := *x.FptrInt64
						if false {
						} else {
							r.EncodeInt(int64(yy119))
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrInt64`)
				}
				r.WriteMapElemValue()
				if yyn118 {
					r.EncodeNil()
				} else {
					if x.FptrInt64 == nil {
						r.EncodeNil()
					} else {
						yy121 := *x.FptrInt64
						if false {
						} else {
							r.EncodeInt(int64(yy121))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.FBool))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FBool`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.FBool))
				}
			}
			var yyn126 bool
			if x.FptrBool == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr2 || yy2arr2 {
				if yyn126 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrBool == nil {
						r.EncodeNil()
					} else {
						yy127 := *x.FptrBool
						if false {
						} else {
							r.EncodeBool(bool(yy127))
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrBool`)
				}
				r.WriteMapElemValue()
				if yyn126 {
					r.EncodeNil()
				} else {
					if x.FptrBool == nil {
						r.EncodeNil()
					} else {
						yy129 := *x.FptrBool
						if false {
						} else {
							r.EncodeBool(bool(yy129))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FSliceIntf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceInterface(([]interface{})(x.FSliceIntf), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceIntf`)
				}
				r.WriteMapElemValue()
				if x.FSliceIntf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceInterface(([]interface{})(x.FSliceIntf), e)
					}
				}
			}
			var yyn134 bool
			if x.FptrSliceIntf == nil {
				yyn134 = true
				goto LABEL134
			}
		LABEL134:
			if yyr2 || yy2arr2 {
				if yyn134 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrSliceIntf == nil {
						r.EncodeNil()
					} else {
						yy135 := *x.FptrSliceIntf
						if false {
						} else {
							h.encSliceInterface(([]interface{})(yy135), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceIntf`)
				}
				r.WriteMapElemValue()
				if yyn134 {
					r.EncodeNil()
				} else {
					if x.FptrSliceIntf == nil {
						r.EncodeNil()
					} else {
						yy137 := *x.FptrSliceIntf
						if false {
						} else {
							h.encSliceInterface(([]interface{})(yy137), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FSliceString == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicestring(([]string)(x.FSliceString), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceString`)
				}
				r.WriteMapElemValue()
				if x.FSliceString == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicestring(([]string)(x.FSliceString), e)
					}
				}
			}
			var yyn142 bool
			if x.FptrSliceString == nil {
				yyn142 = true
				goto LABEL142
			}
		LABEL142:
			if yyr2 || yy2arr2 {
				if yyn142 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrSliceString == nil {
						r.EncodeNil()
					} else {
						yy143 := *x.FptrSliceString
						if false {
						} else {
							h.encSlicestring(([]string)(yy143), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceString`)
				}
				r.WriteMapElemValue()
				if yyn142 {
					r.EncodeNil()
				} else {
					if x.FptrSliceString == nil {
						r.EncodeNil()
					} else {
						yy145 := *x.FptrSliceString
						if false {
						} else {
							h.encSlicestring(([]string)(yy145), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FSliceFloat32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicefloat32(([]float32)(x.FSliceFloat32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceFloat32`)
				}
				r.WriteMapElemValue()
				if x.FSliceFloat32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicefloat32(([]float32)(x.FSliceFloat32), e)
					}
				}
			}
			var yyn150 bool
			if x.FptrSliceFloat32 == nil {
				yyn150 = true
				goto LABEL150
			}
		LABEL150:
			if yyr2 || yy2arr2 {
				if yyn150 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrSliceFloat32 == nil {
						r.EncodeNil()
					} else {
						yy151 := *x.FptrSliceFloat32
						if false {
						} else {
							h.encSlicefloat32(([]float32)(yy151), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceFloat32`)
				}
				r.WriteMapElemValue()
				if yyn150 {
					r.EncodeNil()
				} else {
					if x.FptrSliceFloat32 == nil {
						r.EncodeNil()
					} else {
						yy153 := *x.FptrSliceFloat32
						if false {
						} else {
							h.encSlicefloat32(([]float32)(yy153), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FSliceFloat64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicefloat64(([]float64)(x.FSliceFloat64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceFloat64`)
				}
				r.WriteMapElemValue()
				if x.FSliceFloat64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicefloat64(([]float64)(x.FSliceFloat64), e)
					}
				}
			}
			var yyn158 bool
			if x.FptrSliceFloat64 == nil {
				yyn158 = true
				goto LABEL158
			}
		LABEL158:
			if yyr2 || yy2arr2 {
				if yyn158 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrSliceFloat64 == nil {
						r.EncodeNil()
					} else {
						yy159 := *x.FptrSliceFloat64
						if false {
						} else {
							h.encSlicefloat64(([]float64)(yy159), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceFloat64`)
				}
				r.WriteMapElemValue()
				if yyn158 {
					r.EncodeNil()
				} else {
					if x.FptrSliceFloat64 == nil {
						r.EncodeNil()
					} else {
						yy161 := *x.FptrSliceFloat64
						if false {
						} else {
							h.encSlicefloat64(([]float64)(yy161), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FSliceUint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceuint(([]uint)(x.FSliceUint), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceUint`)
				}
				r.WriteMapElemValue()
				if x.FSliceUint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceuint(([]uint)(x.FSliceUint), e)
					}
				}
			}
			var yyn166 bool
			if x.FptrSliceUint == nil {
				yyn166 = true
				goto LABEL166
			}
		LABEL166:
			if yyr2 || yy2arr2 {
				if yyn166 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrSliceUint == nil {
						r.EncodeNil()
					} else {
						yy167 := *x.FptrSliceUint
						if false {
						} else {
							h.encSliceuint(([]uint)(yy167), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceUint`)
				}
				r.WriteMapElemValue()
				if yyn166 {
					r.EncodeNil()
				} else {
					if x.FptrSliceUint == nil {
						r.EncodeNil()
					} else {
						yy169 := *x.FptrSliceUint
						if false {
						} else {
							h.encSliceuint(([]uint)(yy169), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FSliceUint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						r.EncodeStringBytesRaw([]byte(x.FSliceUint8))
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceUint8`)
				}
				r.WriteMapElemValue()
				if x.FSliceUint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						r.EncodeStringBytesRaw([]byte(x.FSliceUint8))
					}
				}
			}
			var yyn174 bool
			if x.FptrSliceUint8 == nil {
				yyn174 = true
				goto LABEL174
			}
		LABEL174:
			if yyr2 || yy2arr2 {
				if yyn174 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrSliceUint8 == nil {
						r.EncodeNil()
					} else {
						yy175 := *x.FptrSliceUint8
						if false {
						} else {
							r.EncodeStringBytesRaw([]byte(yy175))
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceUint8`)
				}
				r.WriteMapElemValue()
				if yyn174 {
					r.EncodeNil()
				} else {
					if x.FptrSliceUint8 == nil {
						r.EncodeNil()
					} else {
						yy177 := *x.FptrSliceUint8
						if false {
						} else {
							r.EncodeStringBytesRaw([]byte(yy177))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FSliceUint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceuint16(([]uint16)(x.FSliceUint16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceUint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceUint16`)
				}
				r.WriteMapElemValue()
				if x.FSliceUint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceuint16(([]uint16)(x.FSliceUint16), e)
					}
				}
			}
			var yyn182 bool
			if x.FptrSliceUint16 == nil {
				yyn182 = true
				goto LABEL182
			}
		LABEL182:
			if yyr2 || yy2arr2 {
				if yyn182 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrSliceUint16 == nil {
						r.EncodeNil()
					} else {
						yy183 := *x.FptrSliceUint16
						if false {
						} else {
							h.encSliceuint16(([]uint16)(yy183), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceUint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceUint16`)
				}
				r.WriteMapElemValue()
				if yyn182 {
					r.EncodeNil()
				} else {
					if x.FptrSliceUint16 == nil {
						r.EncodeNil()
					} else {
						yy185 := *x.FptrSliceUint16
						if false {
						} else {
							h.encSliceuint16(([]uint16)(yy185), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FSliceUint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceuint32(([]uint32)(x.FSliceUint32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceUint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceUint32`)
				}
				r.WriteMapElemValue()
				if x.FSliceUint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceuint32(([]uint32)(x.FSliceUint32), e)
					}
				}
			}
			var yyn190 bool
			if x.FptrSliceUint32 == nil {
				yyn190 = true
				goto LABEL190
			}
		LABEL190:
			if yyr2 || yy2arr2 {
				if yyn190 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrSliceUint32 == nil {
						r.EncodeNil()
					} else {
						yy191 := *x.FptrSliceUint32
						if false {
						} else {
							h.encSliceuint32(([]uint32)(yy191), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceUint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceUint32`)
				}
				r.WriteMapElemValue()
				if yyn190 {
					r.EncodeNil()
				} else {
					if x.FptrSliceUint32 == nil {
						r.EncodeNil()
					} else {
						yy193 := *x.FptrSliceUint32
						if false {
						} else {
							h.encSliceuint32(([]uint32)(yy193), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FSliceUint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceuint64(([]uint64)(x.FSliceUint64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceUint64`)
				}
				r.WriteMapElemValue()
				if x.FSliceUint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceuint64(([]uint64)(x.FSliceUint64), e)
					}
				}
			}
			var yyn198 bool
			if x.FptrSliceUint64 == nil {
				yyn198 = true
				goto LABEL198
			}
		LABEL198:
			if yyr2 || yy2arr2 {
				if yyn198 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrSliceUint64 == nil {
						r.EncodeNil()
					} else {
						yy199 := *x.FptrSliceUint64
						if false {
						} else {
							h.encSliceuint64(([]uint64)(yy199), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceUint64`)
				}
				r.WriteMapElemValue()
				if yyn198 {
					r.EncodeNil()
				} else {
					if x.FptrSliceUint64 == nil {
						r.EncodeNil()
					} else {
						yy201 := *x.FptrSliceUint64
						if false {
						} else {
							h.encSliceuint64(([]uint64)(yy201), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FSliceUintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceuintptr(([]uintptr)(x.FSliceUintptr), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceUintptr`)
				}
				r.WriteMapElemValue()
				if x.FSliceUintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceuintptr(([]uintptr)(x.FSliceUintptr), e)
					}
				}
			}
			var yyn206 bool
			if x.FptrSliceUintptr == nil {
				yyn206 = true
				goto LABEL206
			}
		LABEL206:
			if yyr2 || yy2arr2 {
				if yyn206 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrSliceUintptr == nil {
						r.EncodeNil()
					} else {
						yy207 := *x.FptrSliceUintptr
						if false {
						} else {
							h.encSliceuintptr(([]uintptr)(yy207), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceUintptr`)
				}
				r.WriteMapElemValue()
				if yyn206 {
					r.EncodeNil()
				} else {
					if x.FptrSliceUintptr == nil {
						r.EncodeNil()
					} else {
						yy209 := *x.FptrSliceUintptr
						if false {
						} else {
							h.encSliceuintptr(([]uintptr)(yy209), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FSliceInt == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceint(([]int)(x.FSliceInt), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceInt`)
				}
				r.WriteMapElemValue()
				if x.FSliceInt == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceint(([]int)(x.FSliceInt), e)
					}
				}
			}
			var yyn214 bool
			if x.FptrSliceInt == nil {
				yyn214 = true
				goto LABEL214
			}
		LABEL214:
			if yyr2 || yy2arr2 {
				if yyn214 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrSliceInt == nil {
						r.EncodeNil()
					} else {
						yy215 := *x.FptrSliceInt
						if false {
						} else {
							h.encSliceint(([]int)(yy215), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceInt`)
				}
				r.WriteMapElemValue()
				if yyn214 {
					r.EncodeNil()
				} else {
					if x.FptrSliceInt == nil {
						r.EncodeNil()
					} else {
						yy217 := *x.FptrSliceInt
						if false {
						} else {
							h.encSliceint(([]int)(yy217), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FSliceInt8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceint8(([]int8)(x.FSliceInt8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceInt8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceInt8`)
				}
				r.WriteMapElemValue()
				if x.FSliceInt8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceint8(([]int8)(x.FSliceInt8), e)
					}
				}
			}
			var yyn222 bool
			if x.FptrSliceInt8 == nil {
				yyn222 = true
				goto LABEL222
			}
		LABEL222:
			if yyr2 || yy2arr2 {
				if yyn222 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrSliceInt8 == nil {
						r.EncodeNil()
					} else {
						yy223 := *x.FptrSliceInt8
						if false {
						} else {
							h.encSliceint8(([]int8)(yy223), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceInt8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceInt8`)
				}
				r.WriteMapElemValue()
				if yyn222 {
					r.EncodeNil()
				} else {
					if x.FptrSliceInt8 == nil {
						r.EncodeNil()
					} else {
						yy225 := *x.FptrSliceInt8
						if false {
						} else {
							h.encSliceint8(([]int8)(yy225), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FSliceInt16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceint16(([]int16)(x.FSliceInt16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceInt16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceInt16`)
				}
				r.WriteMapElemValue()
				if x.FSliceInt16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceint16(([]int16)(x.FSliceInt16), e)
					}
				}
			}
			var yyn230 bool
			if x.FptrSliceInt16 == nil {
				yyn230 = true
				goto LABEL230
			}
		LABEL230:
			if yyr2 || yy2arr2 {
				if yyn230 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrSliceInt16 == nil {
						r.EncodeNil()
					} else {
						yy231 := *x.FptrSliceInt16
						if false {
						} else {
							h.encSliceint16(([]int16)(yy231), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceInt16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceInt16`)
				}
				r.WriteMapElemValue()
				if yyn230 {
					r.EncodeNil()
				} else {
					if x.FptrSliceInt16 == nil {
						r.EncodeNil()
					} else {
						yy233 := *x.FptrSliceInt16
						if false {
						} else {
							h.encSliceint16(([]int16)(yy233), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FSliceInt32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceint32(([]int32)(x.FSliceInt32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceInt32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceInt32`)
				}
				r.WriteMapElemValue()
				if x.FSliceInt32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceint32(([]int32)(x.FSliceInt32), e)
					}
				}
			}
			var yyn238 bool
			if x.FptrSliceInt32 == nil {
				yyn238 = true
				goto LABEL238
			}
		LABEL238:
			if yyr2 || yy2arr2 {
				if yyn238 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrSliceInt32 == nil {
						r.EncodeNil()
					} else {
						yy239 := *x.FptrSliceInt32
						if false {
						} else {
							h.encSliceint32(([]int32)(yy239), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceInt32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceInt32`)
				}
				r.WriteMapElemValue()
				if yyn238 {
					r.EncodeNil()
				} else {
					if x.FptrSliceInt32 == nil {
						r.EncodeNil()
					} else {
						yy241 := *x.FptrSliceInt32
						if false {
						} else {
							h.encSliceint32(([]int32)(yy241), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FSliceInt64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceint64(([]int64)(x.FSliceInt64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceInt64`)
				}
				r.WriteMapElemValue()
				if x.FSliceInt64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceint64(([]int64)(x.FSliceInt64), e)
					}
				}
			}
			var yyn246 bool
			if x.FptrSliceInt64 == nil {
				yyn246 = true
				goto LABEL246
			}
		LABEL246:
			if yyr2 || yy2arr2 {
				if yyn246 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrSliceInt64 == nil {
						r.EncodeNil()
					} else {
						yy247 := *x.FptrSliceInt64
						if false {
						} else {
							h.encSliceint64(([]int64)(yy247), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceInt64`)
				}
				r.WriteMapElemValue()
				if yyn246 {
					r.EncodeNil()
				} else {
					if x.FptrSliceInt64 == nil {
						r.EncodeNil()
					} else {
						yy249 := *x.FptrSliceInt64
						if false {
						} else {
							h.encSliceint64(([]int64)(yy249), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FSliceBool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicebool(([]bool)(x.FSliceBool), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FSliceBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FSliceBool`)
				}
				r.WriteMapElemValue()
				if x.FSliceBool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicebool(([]bool)(x.FSliceBool), e)
					}
				}
			}
			var yyn254 bool
			if x.FptrSliceBool == nil {
				yyn254 = true
				goto LABEL254
			}
		LABEL254:
			if yyr2 || yy2arr2 {
				if yyn254 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrSliceBool == nil {
						r.EncodeNil()
					} else {
						yy255 := *x.FptrSliceBool
						if false {
						} else {
							h.encSlicebool(([]bool)(yy255), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrSliceBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrSliceBool`)
				}
				r.WriteMapElemValue()
				if yyn254 {
					r.EncodeNil()
				} else {
					if x.FptrSliceBool == nil {
						r.EncodeNil()
					} else {
						yy257 := *x.FptrSliceBool
						if false {
						} else {
							h.encSlicebool(([]bool)(yy257), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntfIntf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceInterface((map[interface{}]interface{})(x.FMapIntfIntf), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntfIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntfIntf`)
				}
				r.WriteMapElemValue()
				if x.FMapIntfIntf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceInterface((map[interface{}]interface{})(x.FMapIntfIntf), e)
					}
				}
			}
			var yyn262 bool
			if x.FptrMapIntfIntf == nil {
				yyn262 = true
				goto LABEL262
			}
		LABEL262:
			if yyr2 || yy2arr2 {
				if yyn262 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntfIntf == nil {
						r.EncodeNil()
					} else {
						yy263 := *x.FptrMapIntfIntf
						if false {
						} else {
							h.encMapInterfaceInterface((map[interface{}]interface{})(yy263), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntfIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntfIntf`)
				}
				r.WriteMapElemValue()
				if yyn262 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntfIntf == nil {
						r.EncodeNil()
					} else {
						yy265 := *x.FptrMapIntfIntf
						if false {
						} else {
							h.encMapInterfaceInterface((map[interface{}]interface{})(yy265), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntfString == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfacestring((map[interface{}]string)(x.FMapIntfString), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntfString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntfString`)
				}
				r.WriteMapElemValue()
				if x.FMapIntfString == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfacestring((map[interface{}]string)(x.FMapIntfString), e)
					}
				}
			}
			var yyn270 bool
			if x.FptrMapIntfString == nil {
				yyn270 = true
				goto LABEL270
			}
		LABEL270:
			if yyr2 || yy2arr2 {
				if yyn270 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntfString == nil {
						r.EncodeNil()
					} else {
						yy271 := *x.FptrMapIntfString
						if false {
						} else {
							h.encMapInterfacestring((map[interface{}]string)(yy271), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntfString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntfString`)
				}
				r.WriteMapElemValue()
				if yyn270 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntfString == nil {
						r.EncodeNil()
					} else {
						yy273 := *x.FptrMapIntfString
						if false {
						} else {
							h.encMapInterfacestring((map[interface{}]string)(yy273), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntfUint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceuint((map[interface{}]uint)(x.FMapIntfUint), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntfUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntfUint`)
				}
				r.WriteMapElemValue()
				if x.FMapIntfUint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceuint((map[interface{}]uint)(x.FMapIntfUint), e)
					}
				}
			}
			var yyn278 bool
			if x.FptrMapIntfUint == nil {
				yyn278 = true
				goto LABEL278
			}
		LABEL278:
			if yyr2 || yy2arr2 {
				if yyn278 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntfUint == nil {
						r.EncodeNil()
					} else {
						yy279 := *x.FptrMapIntfUint
						if false {
						} else {
							h.encMapInterfaceuint((map[interface{}]uint)(yy279), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntfUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntfUint`)
				}
				r.WriteMapElemValue()
				if yyn278 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntfUint == nil {
						r.EncodeNil()
					} else {
						yy281 := *x.FptrMapIntfUint
						if false {
						} else {
							h.encMapInterfaceuint((map[interface{}]uint)(yy281), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntfUint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceuint8((map[interface{}]uint8)(x.FMapIntfUint8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntfUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntfUint8`)
				}
				r.WriteMapElemValue()
				if x.FMapIntfUint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceuint8((map[interface{}]uint8)(x.FMapIntfUint8), e)
					}
				}
			}
			var yyn286 bool
			if x.FptrMapIntfUint8 == nil {
				yyn286 = true
				goto LABEL286
			}
		LABEL286:
			if yyr2 || yy2arr2 {
				if yyn286 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntfUint8 == nil {
						r.EncodeNil()
					} else {
						yy287 := *x.FptrMapIntfUint8
						if false {
						} else {
							h.encMapInterfaceuint8((map[interface{}]uint8)(yy287), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntfUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntfUint8`)
				}
				r.WriteMapElemValue()
				if yyn286 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntfUint8 == nil {
						r.EncodeNil()
					} else {
						yy289 := *x.FptrMapIntfUint8
						if false {
						} else {
							h.encMapInterfaceuint8((map[interface{}]uint8)(yy289), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntfUint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceuint16((map[interface{}]uint16)(x.FMapIntfUint16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntfUint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntfUint16`)
				}
				r.WriteMapElemValue()
				if x.FMapIntfUint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceuint16((map[interface{}]uint16)(x.FMapIntfUint16), e)
					}
				}
			}
			var yyn294 bool
			if x.FptrMapIntfUint16 == nil {
				yyn294 = true
				goto LABEL294
			}
		LABEL294:
			if yyr2 || yy2arr2 {
				if yyn294 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntfUint16 == nil {
						r.EncodeNil()
					} else {
						yy295 := *x.FptrMapIntfUint16
						if false {
						} else {
							h.encMapInterfaceuint16((map[interface{}]uint16)(yy295), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntfUint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntfUint16`)
				}
				r.WriteMapElemValue()
				if yyn294 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntfUint16 == nil {
						r.EncodeNil()
					} else {
						yy297 := *x.FptrMapIntfUint16
						if false {
						} else {
							h.encMapInterfaceuint16((map[interface{}]uint16)(yy297), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntfUint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceuint32((map[interface{}]uint32)(x.FMapIntfUint32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntfUint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntfUint32`)
				}
				r.WriteMapElemValue()
				if x.FMapIntfUint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceuint32((map[interface{}]uint32)(x.FMapIntfUint32), e)
					}
				}
			}
			var yyn302 bool
			if x.FptrMapIntfUint32 == nil {
				yyn302 = true
				goto LABEL302
			}
		LABEL302:
			if yyr2 || yy2arr2 {
				if yyn302 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntfUint32 == nil {
						r.EncodeNil()
					} else {
						yy303 := *x.FptrMapIntfUint32
						if false {
						} else {
							h.encMapInterfaceuint32((map[interface{}]uint32)(yy303), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntfUint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntfUint32`)
				}
				r.WriteMapElemValue()
				if yyn302 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntfUint32 == nil {
						r.EncodeNil()
					} else {
						yy305 := *x.FptrMapIntfUint32
						if false {
						} else {
							h.encMapInterfaceuint32((map[interface{}]uint32)(yy305), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntfUint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceuint64((map[interface{}]uint64)(x.FMapIntfUint64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntfUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntfUint64`)
				}
				r.WriteMapElemValue()
				if x.FMapIntfUint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceuint64((map[interface{}]uint64)(x.FMapIntfUint64), e)
					}
				}
			}
			var yyn310 bool
			if x.FptrMapIntfUint64 == nil {
				yyn310 = true
				goto LABEL310
			}
		LABEL310:
			if yyr2 || yy2arr2 {
				if yyn310 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntfUint64 == nil {
						r.EncodeNil()
					} else {
						yy311 := *x.FptrMapIntfUint64
						if false {
						} else {
							h.encMapInterfaceuint64((map[interface{}]uint64)(yy311), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntfUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntfUint64`)
				}
				r.WriteMapElemValue()
				if yyn310 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntfUint64 == nil {
						r.EncodeNil()
					} else {
						yy313 := *x.FptrMapIntfUint64
						if false {
						} else {
							h.encMapInterfaceuint64((map[interface{}]uint64)(yy313), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntfUintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceuintptr((map[interface{}]uintptr)(x.FMapIntfUintptr), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntfUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntfUintptr`)
				}
				r.WriteMapElemValue()
				if x.FMapIntfUintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceuintptr((map[interface{}]uintptr)(x.FMapIntfUintptr), e)
					}
				}
			}
			var yyn318 bool
			if x.FptrMapIntfUintptr == nil {
				yyn318 = true
				goto LABEL318
			}
		LABEL318:
			if yyr2 || yy2arr2 {
				if yyn318 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntfUintptr == nil {
						r.EncodeNil()
					} else {
						yy319 := *x.FptrMapIntfUintptr
						if false {
						} else {
							h.encMapInterfaceuintptr((map[interface{}]uintptr)(yy319), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntfUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntfUintptr`)
				}
				r.WriteMapElemValue()
				if yyn318 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntfUintptr == nil {
						r.EncodeNil()
					} else {
						yy321 := *x.FptrMapIntfUintptr
						if false {
						} else {
							h.encMapInterfaceuintptr((map[interface{}]uintptr)(yy321), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntfInt == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceint((map[interface{}]int)(x.FMapIntfInt), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntfInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntfInt`)
				}
				r.WriteMapElemValue()
				if x.FMapIntfInt == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceint((map[interface{}]int)(x.FMapIntfInt), e)
					}
				}
			}
			var yyn326 bool
			if x.FptrMapIntfInt == nil {
				yyn326 = true
				goto LABEL326
			}
		LABEL326:
			if yyr2 || yy2arr2 {
				if yyn326 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntfInt == nil {
						r.EncodeNil()
					} else {
						yy327 := *x.FptrMapIntfInt
						if false {
						} else {
							h.encMapInterfaceint((map[interface{}]int)(yy327), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntfInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntfInt`)
				}
				r.WriteMapElemValue()
				if yyn326 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntfInt == nil {
						r.EncodeNil()
					} else {
						yy329 := *x.FptrMapIntfInt
						if false {
						} else {
							h.encMapInterfaceint((map[interface{}]int)(yy329), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntfInt8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceint8((map[interface{}]int8)(x.FMapIntfInt8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntfInt8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntfInt8`)
				}
				r.WriteMapElemValue()
				if x.FMapIntfInt8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceint8((map[interface{}]int8)(x.FMapIntfInt8), e)
					}
				}
			}
			var yyn334 bool
			if x.FptrMapIntfInt8 == nil {
				yyn334 = true
				goto LABEL334
			}
		LABEL334:
			if yyr2 || yy2arr2 {
				if yyn334 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntfInt8 == nil {
						r.EncodeNil()
					} else {
						yy335 := *x.FptrMapIntfInt8
						if false {
						} else {
							h.encMapInterfaceint8((map[interface{}]int8)(yy335), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntfInt8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntfInt8`)
				}
				r.WriteMapElemValue()
				if yyn334 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntfInt8 == nil {
						r.EncodeNil()
					} else {
						yy337 := *x.FptrMapIntfInt8
						if false {
						} else {
							h.encMapInterfaceint8((map[interface{}]int8)(yy337), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntfInt16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceint16((map[interface{}]int16)(x.FMapIntfInt16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntfInt16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntfInt16`)
				}
				r.WriteMapElemValue()
				if x.FMapIntfInt16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceint16((map[interface{}]int16)(x.FMapIntfInt16), e)
					}
				}
			}
			var yyn342 bool
			if x.FptrMapIntfInt16 == nil {
				yyn342 = true
				goto LABEL342
			}
		LABEL342:
			if yyr2 || yy2arr2 {
				if yyn342 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntfInt16 == nil {
						r.EncodeNil()
					} else {
						yy343 := *x.FptrMapIntfInt16
						if false {
						} else {
							h.encMapInterfaceint16((map[interface{}]int16)(yy343), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntfInt16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntfInt16`)
				}
				r.WriteMapElemValue()
				if yyn342 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntfInt16 == nil {
						r.EncodeNil()
					} else {
						yy345 := *x.FptrMapIntfInt16
						if false {
						} else {
							h.encMapInterfaceint16((map[interface{}]int16)(yy345), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntfInt32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceint32((map[interface{}]int32)(x.FMapIntfInt32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntfInt32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntfInt32`)
				}
				r.WriteMapElemValue()
				if x.FMapIntfInt32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceint32((map[interface{}]int32)(x.FMapIntfInt32), e)
					}
				}
			}
			var yyn350 bool
			if x.FptrMapIntfInt32 == nil {
				yyn350 = true
				goto LABEL350
			}
		LABEL350:
			if yyr2 || yy2arr2 {
				if yyn350 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntfInt32 == nil {
						r.EncodeNil()
					} else {
						yy351 := *x.FptrMapIntfInt32
						if false {
						} else {
							h.encMapInterfaceint32((map[interface{}]int32)(yy351), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntfInt32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntfInt32`)
				}
				r.WriteMapElemValue()
				if yyn350 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntfInt32 == nil {
						r.EncodeNil()
					} else {
						yy353 := *x.FptrMapIntfInt32
						if false {
						} else {
							h.encMapInterfaceint32((map[interface{}]int32)(yy353), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntfInt64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceint64((map[interface{}]int64)(x.FMapIntfInt64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntfInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntfInt64`)
				}
				r.WriteMapElemValue()
				if x.FMapIntfInt64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfaceint64((map[interface{}]int64)(x.FMapIntfInt64), e)
					}
				}
			}
			var yyn358 bool
			if x.FptrMapIntfInt64 == nil {
				yyn358 = true
				goto LABEL358
			}
		LABEL358:
			if yyr2 || yy2arr2 {
				if yyn358 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntfInt64 == nil {
						r.EncodeNil()
					} else {
						yy359 := *x.FptrMapIntfInt64
						if false {
						} else {
							h.encMapInterfaceint64((map[interface{}]int64)(yy359), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntfInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntfInt64`)
				}
				r.WriteMapElemValue()
				if yyn358 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntfInt64 == nil {
						r.EncodeNil()
					} else {
						yy361 := *x.FptrMapIntfInt64
						if false {
						} else {
							h.encMapInterfaceint64((map[interface{}]int64)(yy361), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntfFloat32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfacefloat32((map[interface{}]float32)(x.FMapIntfFloat32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntfFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntfFloat32`)
				}
				r.WriteMapElemValue()
				if x.FMapIntfFloat32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfacefloat32((map[interface{}]float32)(x.FMapIntfFloat32), e)
					}
				}
			}
			var yyn366 bool
			if x.FptrMapIntfFloat32 == nil {
				yyn366 = true
				goto LABEL366
			}
		LABEL366:
			if yyr2 || yy2arr2 {
				if yyn366 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntfFloat32 == nil {
						r.EncodeNil()
					} else {
						yy367 := *x.FptrMapIntfFloat32
						if false {
						} else {
							h.encMapInterfacefloat32((map[interface{}]float32)(yy367), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntfFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntfFloat32`)
				}
				r.WriteMapElemValue()
				if yyn366 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntfFloat32 == nil {
						r.EncodeNil()
					} else {
						yy369 := *x.FptrMapIntfFloat32
						if false {
						} else {
							h.encMapInterfacefloat32((map[interface{}]float32)(yy369), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntfFloat64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfacefloat64((map[interface{}]float64)(x.FMapIntfFloat64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntfFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntfFloat64`)
				}
				r.WriteMapElemValue()
				if x.FMapIntfFloat64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfacefloat64((map[interface{}]float64)(x.FMapIntfFloat64), e)
					}
				}
			}
			var yyn374 bool
			if x.FptrMapIntfFloat64 == nil {
				yyn374 = true
				goto LABEL374
			}
		LABEL374:
			if yyr2 || yy2arr2 {
				if yyn374 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntfFloat64 == nil {
						r.EncodeNil()
					} else {
						yy375 := *x.FptrMapIntfFloat64
						if false {
						} else {
							h.encMapInterfacefloat64((map[interface{}]float64)(yy375), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntfFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntfFloat64`)
				}
				r.WriteMapElemValue()
				if yyn374 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntfFloat64 == nil {
						r.EncodeNil()
					} else {
						yy377 := *x.FptrMapIntfFloat64
						if false {
						} else {
							h.encMapInterfacefloat64((map[interface{}]float64)(yy377), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntfBool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfacebool((map[interface{}]bool)(x.FMapIntfBool), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntfBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntfBool`)
				}
				r.WriteMapElemValue()
				if x.FMapIntfBool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapInterfacebool((map[interface{}]bool)(x.FMapIntfBool), e)
					}
				}
			}
			var yyn382 bool
			if x.FptrMapIntfBool == nil {
				yyn382 = true
				goto LABEL382
			}
		LABEL382:
			if yyr2 || yy2arr2 {
				if yyn382 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntfBool == nil {
						r.EncodeNil()
					} else {
						yy383 := *x.FptrMapIntfBool
						if false {
						} else {
							h.encMapInterfacebool((map[interface{}]bool)(yy383), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntfBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntfBool`)
				}
				r.WriteMapElemValue()
				if yyn382 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntfBool == nil {
						r.EncodeNil()
					} else {
						yy385 := *x.FptrMapIntfBool
						if false {
						} else {
							h.encMapInterfacebool((map[interface{}]bool)(yy385), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapStringIntf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringInterface((map[string]interface{})(x.FMapStringIntf), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringIntf`)
				}
				r.WriteMapElemValue()
				if x.FMapStringIntf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringInterface((map[string]interface{})(x.FMapStringIntf), e)
					}
				}
			}
			var yyn390 bool
			if x.FptrMapStringIntf == nil {
				yyn390 = true
				goto LABEL390
			}
		LABEL390:
			if yyr2 || yy2arr2 {
				if yyn390 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapStringIntf == nil {
						r.EncodeNil()
					} else {
						yy391 := *x.FptrMapStringIntf
						if false {
						} else {
							h.encMapstringInterface((map[string]interface{})(yy391), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringIntf`)
				}
				r.WriteMapElemValue()
				if yyn390 {
					r.EncodeNil()
				} else {
					if x.FptrMapStringIntf == nil {
						r.EncodeNil()
					} else {
						yy393 := *x.FptrMapStringIntf
						if false {
						} else {
							h.encMapstringInterface((map[string]interface{})(yy393), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapStringString == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringstring((map[string]string)(x.FMapStringString), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringString`)
				}
				r.WriteMapElemValue()
				if x.FMapStringString == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringstring((map[string]string)(x.FMapStringString), e)
					}
				}
			}
			var yyn398 bool
			if x.FptrMapStringString == nil {
				yyn398 = true
				goto LABEL398
			}
		LABEL398:
			if yyr2 || yy2arr2 {
				if yyn398 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapStringString == nil {
						r.EncodeNil()
					} else {
						yy399 := *x.FptrMapStringString
						if false {
						} else {
							h.encMapstringstring((map[string]string)(yy399), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringString`)
				}
				r.WriteMapElemValue()
				if yyn398 {
					r.EncodeNil()
				} else {
					if x.FptrMapStringString == nil {
						r.EncodeNil()
					} else {
						yy401 := *x.FptrMapStringString
						if false {
						} else {
							h.encMapstringstring((map[string]string)(yy401), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapStringUint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringuint((map[string]uint)(x.FMapStringUint), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringUint`)
				}
				r.WriteMapElemValue()
				if x.FMapStringUint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringuint((map[string]uint)(x.FMapStringUint), e)
					}
				}
			}
			var yyn406 bool
			if x.FptrMapStringUint == nil {
				yyn406 = true
				goto LABEL406
			}
		LABEL406:
			if yyr2 || yy2arr2 {
				if yyn406 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapStringUint == nil {
						r.EncodeNil()
					} else {
						yy407 := *x.FptrMapStringUint
						if false {
						} else {
							h.encMapstringuint((map[string]uint)(yy407), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringUint`)
				}
				r.WriteMapElemValue()
				if yyn406 {
					r.EncodeNil()
				} else {
					if x.FptrMapStringUint == nil {
						r.EncodeNil()
					} else {
						yy409 := *x.FptrMapStringUint
						if false {
						} else {
							h.encMapstringuint((map[string]uint)(yy409), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapStringUint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringuint8((map[string]uint8)(x.FMapStringUint8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringUint8`)
				}
				r.WriteMapElemValue()
				if x.FMapStringUint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringuint8((map[string]uint8)(x.FMapStringUint8), e)
					}
				}
			}
			var yyn414 bool
			if x.FptrMapStringUint8 == nil {
				yyn414 = true
				goto LABEL414
			}
		LABEL414:
			if yyr2 || yy2arr2 {
				if yyn414 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapStringUint8 == nil {
						r.EncodeNil()
					} else {
						yy415 := *x.FptrMapStringUint8
						if false {
						} else {
							h.encMapstringuint8((map[string]uint8)(yy415), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringUint8`)
				}
				r.WriteMapElemValue()
				if yyn414 {
					r.EncodeNil()
				} else {
					if x.FptrMapStringUint8 == nil {
						r.EncodeNil()
					} else {
						yy417 := *x.FptrMapStringUint8
						if false {
						} else {
							h.encMapstringuint8((map[string]uint8)(yy417), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapStringUint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringuint16((map[string]uint16)(x.FMapStringUint16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringUint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringUint16`)
				}
				r.WriteMapElemValue()
				if x.FMapStringUint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringuint16((map[string]uint16)(x.FMapStringUint16), e)
					}
				}
			}
			var yyn422 bool
			if x.FptrMapStringUint16 == nil {
				yyn422 = true
				goto LABEL422
			}
		LABEL422:
			if yyr2 || yy2arr2 {
				if yyn422 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapStringUint16 == nil {
						r.EncodeNil()
					} else {
						yy423 := *x.FptrMapStringUint16
						if false {
						} else {
							h.encMapstringuint16((map[string]uint16)(yy423), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringUint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringUint16`)
				}
				r.WriteMapElemValue()
				if yyn422 {
					r.EncodeNil()
				} else {
					if x.FptrMapStringUint16 == nil {
						r.EncodeNil()
					} else {
						yy425 := *x.FptrMapStringUint16
						if false {
						} else {
							h.encMapstringuint16((map[string]uint16)(yy425), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapStringUint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringuint32((map[string]uint32)(x.FMapStringUint32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringUint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringUint32`)
				}
				r.WriteMapElemValue()
				if x.FMapStringUint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringuint32((map[string]uint32)(x.FMapStringUint32), e)
					}
				}
			}
			var yyn430 bool
			if x.FptrMapStringUint32 == nil {
				yyn430 = true
				goto LABEL430
			}
		LABEL430:
			if yyr2 || yy2arr2 {
				if yyn430 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapStringUint32 == nil {
						r.EncodeNil()
					} else {
						yy431 := *x.FptrMapStringUint32
						if false {
						} else {
							h.encMapstringuint32((map[string]uint32)(yy431), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringUint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringUint32`)
				}
				r.WriteMapElemValue()
				if yyn430 {
					r.EncodeNil()
				} else {
					if x.FptrMapStringUint32 == nil {
						r.EncodeNil()
					} else {
						yy433 := *x.FptrMapStringUint32
						if false {
						} else {
							h.encMapstringuint32((map[string]uint32)(yy433), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapStringUint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringuint64((map[string]uint64)(x.FMapStringUint64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringUint64`)
				}
				r.WriteMapElemValue()
				if x.FMapStringUint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringuint64((map[string]uint64)(x.FMapStringUint64), e)
					}
				}
			}
			var yyn438 bool
			if x.FptrMapStringUint64 == nil {
				yyn438 = true
				goto LABEL438
			}
		LABEL438:
			if yyr2 || yy2arr2 {
				if yyn438 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapStringUint64 == nil {
						r.EncodeNil()
					} else {
						yy439 := *x.FptrMapStringUint64
						if false {
						} else {
							h.encMapstringuint64((map[string]uint64)(yy439), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringUint64`)
				}
				r.WriteMapElemValue()
				if yyn438 {
					r.EncodeNil()
				} else {
					if x.FptrMapStringUint64 == nil {
						r.EncodeNil()
					} else {
						yy441 := *x.FptrMapStringUint64
						if false {
						} else {
							h.encMapstringuint64((map[string]uint64)(yy441), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapStringUintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringuintptr((map[string]uintptr)(x.FMapStringUintptr), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringUintptr`)
				}
				r.WriteMapElemValue()
				if x.FMapStringUintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringuintptr((map[string]uintptr)(x.FMapStringUintptr), e)
					}
				}
			}
			var yyn446 bool
			if x.FptrMapStringUintptr == nil {
				yyn446 = true
				goto LABEL446
			}
		LABEL446:
			if yyr2 || yy2arr2 {
				if yyn446 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapStringUintptr == nil {
						r.EncodeNil()
					} else {
						yy447 := *x.FptrMapStringUintptr
						if false {
						} else {
							h.encMapstringuintptr((map[string]uintptr)(yy447), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringUintptr`)
				}
				r.WriteMapElemValue()
				if yyn446 {
					r.EncodeNil()
				} else {
					if x.FptrMapStringUintptr == nil {
						r.EncodeNil()
					} else {
						yy449 := *x.FptrMapStringUintptr
						if false {
						} else {
							h.encMapstringuintptr((map[string]uintptr)(yy449), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapStringInt == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringint((map[string]int)(x.FMapStringInt), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringInt`)
				}
				r.WriteMapElemValue()
				if x.FMapStringInt == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringint((map[string]int)(x.FMapStringInt), e)
					}
				}
			}
			var yyn454 bool
			if x.FptrMapStringInt == nil {
				yyn454 = true
				goto LABEL454
			}
		LABEL454:
			if yyr2 || yy2arr2 {
				if yyn454 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapStringInt == nil {
						r.EncodeNil()
					} else {
						yy455 := *x.FptrMapStringInt
						if false {
						} else {
							h.encMapstringint((map[string]int)(yy455), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringInt`)
				}
				r.WriteMapElemValue()
				if yyn454 {
					r.EncodeNil()
				} else {
					if x.FptrMapStringInt == nil {
						r.EncodeNil()
					} else {
						yy457 := *x.FptrMapStringInt
						if false {
						} else {
							h.encMapstringint((map[string]int)(yy457), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapStringInt8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringint8((map[string]int8)(x.FMapStringInt8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringInt8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringInt8`)
				}
				r.WriteMapElemValue()
				if x.FMapStringInt8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringint8((map[string]int8)(x.FMapStringInt8), e)
					}
				}
			}
			var yyn462 bool
			if x.FptrMapStringInt8 == nil {
				yyn462 = true
				goto LABEL462
			}
		LABEL462:
			if yyr2 || yy2arr2 {
				if yyn462 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapStringInt8 == nil {
						r.EncodeNil()
					} else {
						yy463 := *x.FptrMapStringInt8
						if false {
						} else {
							h.encMapstringint8((map[string]int8)(yy463), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringInt8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringInt8`)
				}
				r.WriteMapElemValue()
				if yyn462 {
					r.EncodeNil()
				} else {
					if x.FptrMapStringInt8 == nil {
						r.EncodeNil()
					} else {
						yy465 := *x.FptrMapStringInt8
						if false {
						} else {
							h.encMapstringint8((map[string]int8)(yy465), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapStringInt16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringint16((map[string]int16)(x.FMapStringInt16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringInt16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringInt16`)
				}
				r.WriteMapElemValue()
				if x.FMapStringInt16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringint16((map[string]int16)(x.FMapStringInt16), e)
					}
				}
			}
			var yyn470 bool
			if x.FptrMapStringInt16 == nil {
				yyn470 = true
				goto LABEL470
			}
		LABEL470:
			if yyr2 || yy2arr2 {
				if yyn470 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapStringInt16 == nil {
						r.EncodeNil()
					} else {
						yy471 := *x.FptrMapStringInt16
						if false {
						} else {
							h.encMapstringint16((map[string]int16)(yy471), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringInt16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringInt16`)
				}
				r.WriteMapElemValue()
				if yyn470 {
					r.EncodeNil()
				} else {
					if x.FptrMapStringInt16 == nil {
						r.EncodeNil()
					} else {
						yy473 := *x.FptrMapStringInt16
						if false {
						} else {
							h.encMapstringint16((map[string]int16)(yy473), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapStringInt32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringint32((map[string]int32)(x.FMapStringInt32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringInt32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringInt32`)
				}
				r.WriteMapElemValue()
				if x.FMapStringInt32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringint32((map[string]int32)(x.FMapStringInt32), e)
					}
				}
			}
			var yyn478 bool
			if x.FptrMapStringInt32 == nil {
				yyn478 = true
				goto LABEL478
			}
		LABEL478:
			if yyr2 || yy2arr2 {
				if yyn478 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapStringInt32 == nil {
						r.EncodeNil()
					} else {
						yy479 := *x.FptrMapStringInt32
						if false {
						} else {
							h.encMapstringint32((map[string]int32)(yy479), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringInt32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringInt32`)
				}
				r.WriteMapElemValue()
				if yyn478 {
					r.EncodeNil()
				} else {
					if x.FptrMapStringInt32 == nil {
						r.EncodeNil()
					} else {
						yy481 := *x.FptrMapStringInt32
						if false {
						} else {
							h.encMapstringint32((map[string]int32)(yy481), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapStringInt64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringint64((map[string]int64)(x.FMapStringInt64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringInt64`)
				}
				r.WriteMapElemValue()
				if x.FMapStringInt64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringint64((map[string]int64)(x.FMapStringInt64), e)
					}
				}
			}
			var yyn486 bool
			if x.FptrMapStringInt64 == nil {
				yyn486 = true
				goto LABEL486
			}
		LABEL486:
			if yyr2 || yy2arr2 {
				if yyn486 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapStringInt64 == nil {
						r.EncodeNil()
					} else {
						yy487 := *x.FptrMapStringInt64
						if false {
						} else {
							h.encMapstringint64((map[string]int64)(yy487), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringInt64`)
				}
				r.WriteMapElemValue()
				if yyn486 {
					r.EncodeNil()
				} else {
					if x.FptrMapStringInt64 == nil {
						r.EncodeNil()
					} else {
						yy489 := *x.FptrMapStringInt64
						if false {
						} else {
							h.encMapstringint64((map[string]int64)(yy489), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapStringFloat32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringfloat32((map[string]float32)(x.FMapStringFloat32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringFloat32`)
				}
				r.WriteMapElemValue()
				if x.FMapStringFloat32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringfloat32((map[string]float32)(x.FMapStringFloat32), e)
					}
				}
			}
			var yyn494 bool
			if x.FptrMapStringFloat32 == nil {
				yyn494 = true
				goto LABEL494
			}
		LABEL494:
			if yyr2 || yy2arr2 {
				if yyn494 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapStringFloat32 == nil {
						r.EncodeNil()
					} else {
						yy495 := *x.FptrMapStringFloat32
						if false {
						} else {
							h.encMapstringfloat32((map[string]float32)(yy495), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringFloat32`)
				}
				r.WriteMapElemValue()
				if yyn494 {
					r.EncodeNil()
				} else {
					if x.FptrMapStringFloat32 == nil {
						r.EncodeNil()
					} else {
						yy497 := *x.FptrMapStringFloat32
						if false {
						} else {
							h.encMapstringfloat32((map[string]float32)(yy497), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapStringFloat64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringfloat64((map[string]float64)(x.FMapStringFloat64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringFloat64`)
				}
				r.WriteMapElemValue()
				if x.FMapStringFloat64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringfloat64((map[string]float64)(x.FMapStringFloat64), e)
					}
				}
			}
			var yyn502 bool
			if x.FptrMapStringFloat64 == nil {
				yyn502 = true
				goto LABEL502
			}
		LABEL502:
			if yyr2 || yy2arr2 {
				if yyn502 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapStringFloat64 == nil {
						r.EncodeNil()
					} else {
						yy503 := *x.FptrMapStringFloat64
						if false {
						} else {
							h.encMapstringfloat64((map[string]float64)(yy503), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringFloat64`)
				}
				r.WriteMapElemValue()
				if yyn502 {
					r.EncodeNil()
				} else {
					if x.FptrMapStringFloat64 == nil {
						r.EncodeNil()
					} else {
						yy505 := *x.FptrMapStringFloat64
						if false {
						} else {
							h.encMapstringfloat64((map[string]float64)(yy505), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapStringBool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringbool((map[string]bool)(x.FMapStringBool), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapStringBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapStringBool`)
				}
				r.WriteMapElemValue()
				if x.FMapStringBool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringbool((map[string]bool)(x.FMapStringBool), e)
					}
				}
			}
			var yyn510 bool
			if x.FptrMapStringBool == nil {
				yyn510 = true
				goto LABEL510
			}
		LABEL510:
			if yyr2 || yy2arr2 {
				if yyn510 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapStringBool == nil {
						r.EncodeNil()
					} else {
						yy511 := *x.FptrMapStringBool
						if false {
						} else {
							h.encMapstringbool((map[string]bool)(yy511), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapStringBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapStringBool`)
				}
				r.WriteMapElemValue()
				if yyn510 {
					r.EncodeNil()
				} else {
					if x.FptrMapStringBool == nil {
						r.EncodeNil()
					} else {
						yy513 := *x.FptrMapStringBool
						if false {
						} else {
							h.encMapstringbool((map[string]bool)(yy513), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat32Intf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32Interface((map[float32]interface{})(x.FMapFloat32Intf), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat32Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat32Intf`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat32Intf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32Interface((map[float32]interface{})(x.FMapFloat32Intf), e)
					}
				}
			}
			var yyn518 bool
			if x.FptrMapFloat32Intf == nil {
				yyn518 = true
				goto LABEL518
			}
		LABEL518:
			if yyr2 || yy2arr2 {
				if yyn518 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat32Intf == nil {
						r.EncodeNil()
					} else {
						yy519 := *x.FptrMapFloat32Intf
						if false {
						} else {
							h.encMapfloat32Interface((map[float32]interface{})(yy519), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat32Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat32Intf`)
				}
				r.WriteMapElemValue()
				if yyn518 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat32Intf == nil {
						r.EncodeNil()
					} else {
						yy521 := *x.FptrMapFloat32Intf
						if false {
						} else {
							h.encMapfloat32Interface((map[float32]interface{})(yy521), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat32String == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32string((map[float32]string)(x.FMapFloat32String), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat32String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat32String`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat32String == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32string((map[float32]string)(x.FMapFloat32String), e)
					}
				}
			}
			var yyn526 bool
			if x.FptrMapFloat32String == nil {
				yyn526 = true
				goto LABEL526
			}
		LABEL526:
			if yyr2 || yy2arr2 {
				if yyn526 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat32String == nil {
						r.EncodeNil()
					} else {
						yy527 := *x.FptrMapFloat32String
						if false {
						} else {
							h.encMapfloat32string((map[float32]string)(yy527), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat32String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat32String`)
				}
				r.WriteMapElemValue()
				if yyn526 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat32String == nil {
						r.EncodeNil()
					} else {
						yy529 := *x.FptrMapFloat32String
						if false {
						} else {
							h.encMapfloat32string((map[float32]string)(yy529), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat32Uint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32uint((map[float32]uint)(x.FMapFloat32Uint), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat32Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat32Uint`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat32Uint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32uint((map[float32]uint)(x.FMapFloat32Uint), e)
					}
				}
			}
			var yyn534 bool
			if x.FptrMapFloat32Uint == nil {
				yyn534 = true
				goto LABEL534
			}
		LABEL534:
			if yyr2 || yy2arr2 {
				if yyn534 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat32Uint == nil {
						r.EncodeNil()
					} else {
						yy535 := *x.FptrMapFloat32Uint
						if false {
						} else {
							h.encMapfloat32uint((map[float32]uint)(yy535), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat32Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat32Uint`)
				}
				r.WriteMapElemValue()
				if yyn534 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat32Uint == nil {
						r.EncodeNil()
					} else {
						yy537 := *x.FptrMapFloat32Uint
						if false {
						} else {
							h.encMapfloat32uint((map[float32]uint)(yy537), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat32Uint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32uint8((map[float32]uint8)(x.FMapFloat32Uint8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat32Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat32Uint8`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat32Uint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32uint8((map[float32]uint8)(x.FMapFloat32Uint8), e)
					}
				}
			}
			var yyn542 bool
			if x.FptrMapFloat32Uint8 == nil {
				yyn542 = true
				goto LABEL542
			}
		LABEL542:
			if yyr2 || yy2arr2 {
				if yyn542 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat32Uint8 == nil {
						r.EncodeNil()
					} else {
						yy543 := *x.FptrMapFloat32Uint8
						if false {
						} else {
							h.encMapfloat32uint8((map[float32]uint8)(yy543), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat32Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat32Uint8`)
				}
				r.WriteMapElemValue()
				if yyn542 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat32Uint8 == nil {
						r.EncodeNil()
					} else {
						yy545 := *x.FptrMapFloat32Uint8
						if false {
						} else {
							h.encMapfloat32uint8((map[float32]uint8)(yy545), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat32Uint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32uint16((map[float32]uint16)(x.FMapFloat32Uint16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat32Uint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat32Uint16`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat32Uint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32uint16((map[float32]uint16)(x.FMapFloat32Uint16), e)
					}
				}
			}
			var yyn550 bool
			if x.FptrMapFloat32Uint16 == nil {
				yyn550 = true
				goto LABEL550
			}
		LABEL550:
			if yyr2 || yy2arr2 {
				if yyn550 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat32Uint16 == nil {
						r.EncodeNil()
					} else {
						yy551 := *x.FptrMapFloat32Uint16
						if false {
						} else {
							h.encMapfloat32uint16((map[float32]uint16)(yy551), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat32Uint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat32Uint16`)
				}
				r.WriteMapElemValue()
				if yyn550 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat32Uint16 == nil {
						r.EncodeNil()
					} else {
						yy553 := *x.FptrMapFloat32Uint16
						if false {
						} else {
							h.encMapfloat32uint16((map[float32]uint16)(yy553), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat32Uint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32uint32((map[float32]uint32)(x.FMapFloat32Uint32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat32Uint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat32Uint32`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat32Uint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32uint32((map[float32]uint32)(x.FMapFloat32Uint32), e)
					}
				}
			}
			var yyn558 bool
			if x.FptrMapFloat32Uint32 == nil {
				yyn558 = true
				goto LABEL558
			}
		LABEL558:
			if yyr2 || yy2arr2 {
				if yyn558 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat32Uint32 == nil {
						r.EncodeNil()
					} else {
						yy559 := *x.FptrMapFloat32Uint32
						if false {
						} else {
							h.encMapfloat32uint32((map[float32]uint32)(yy559), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat32Uint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat32Uint32`)
				}
				r.WriteMapElemValue()
				if yyn558 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat32Uint32 == nil {
						r.EncodeNil()
					} else {
						yy561 := *x.FptrMapFloat32Uint32
						if false {
						} else {
							h.encMapfloat32uint32((map[float32]uint32)(yy561), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat32Uint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32uint64((map[float32]uint64)(x.FMapFloat32Uint64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat32Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat32Uint64`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat32Uint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32uint64((map[float32]uint64)(x.FMapFloat32Uint64), e)
					}
				}
			}
			var yyn566 bool
			if x.FptrMapFloat32Uint64 == nil {
				yyn566 = true
				goto LABEL566
			}
		LABEL566:
			if yyr2 || yy2arr2 {
				if yyn566 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat32Uint64 == nil {
						r.EncodeNil()
					} else {
						yy567 := *x.FptrMapFloat32Uint64
						if false {
						} else {
							h.encMapfloat32uint64((map[float32]uint64)(yy567), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat32Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat32Uint64`)
				}
				r.WriteMapElemValue()
				if yyn566 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat32Uint64 == nil {
						r.EncodeNil()
					} else {
						yy569 := *x.FptrMapFloat32Uint64
						if false {
						} else {
							h.encMapfloat32uint64((map[float32]uint64)(yy569), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat32Uintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32uintptr((map[float32]uintptr)(x.FMapFloat32Uintptr), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat32Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat32Uintptr`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat32Uintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32uintptr((map[float32]uintptr)(x.FMapFloat32Uintptr), e)
					}
				}
			}
			var yyn574 bool
			if x.FptrMapFloat32Uintptr == nil {
				yyn574 = true
				goto LABEL574
			}
		LABEL574:
			if yyr2 || yy2arr2 {
				if yyn574 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat32Uintptr == nil {
						r.EncodeNil()
					} else {
						yy575 := *x.FptrMapFloat32Uintptr
						if false {
						} else {
							h.encMapfloat32uintptr((map[float32]uintptr)(yy575), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat32Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat32Uintptr`)
				}
				r.WriteMapElemValue()
				if yyn574 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat32Uintptr == nil {
						r.EncodeNil()
					} else {
						yy577 := *x.FptrMapFloat32Uintptr
						if false {
						} else {
							h.encMapfloat32uintptr((map[float32]uintptr)(yy577), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat32Int == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32int((map[float32]int)(x.FMapFloat32Int), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat32Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat32Int`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat32Int == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32int((map[float32]int)(x.FMapFloat32Int), e)
					}
				}
			}
			var yyn582 bool
			if x.FptrMapFloat32Int == nil {
				yyn582 = true
				goto LABEL582
			}
		LABEL582:
			if yyr2 || yy2arr2 {
				if yyn582 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat32Int == nil {
						r.EncodeNil()
					} else {
						yy583 := *x.FptrMapFloat32Int
						if false {
						} else {
							h.encMapfloat32int((map[float32]int)(yy583), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat32Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat32Int`)
				}
				r.WriteMapElemValue()
				if yyn582 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat32Int == nil {
						r.EncodeNil()
					} else {
						yy585 := *x.FptrMapFloat32Int
						if false {
						} else {
							h.encMapfloat32int((map[float32]int)(yy585), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat32Int8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32int8((map[float32]int8)(x.FMapFloat32Int8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat32Int8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat32Int8`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat32Int8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32int8((map[float32]int8)(x.FMapFloat32Int8), e)
					}
				}
			}
			var yyn590 bool
			if x.FptrMapFloat32Int8 == nil {
				yyn590 = true
				goto LABEL590
			}
		LABEL590:
			if yyr2 || yy2arr2 {
				if yyn590 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat32Int8 == nil {
						r.EncodeNil()
					} else {
						yy591 := *x.FptrMapFloat32Int8
						if false {
						} else {
							h.encMapfloat32int8((map[float32]int8)(yy591), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat32Int8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat32Int8`)
				}
				r.WriteMapElemValue()
				if yyn590 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat32Int8 == nil {
						r.EncodeNil()
					} else {
						yy593 := *x.FptrMapFloat32Int8
						if false {
						} else {
							h.encMapfloat32int8((map[float32]int8)(yy593), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat32Int16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32int16((map[float32]int16)(x.FMapFloat32Int16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat32Int16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat32Int16`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat32Int16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32int16((map[float32]int16)(x.FMapFloat32Int16), e)
					}
				}
			}
			var yyn598 bool
			if x.FptrMapFloat32Int16 == nil {
				yyn598 = true
				goto LABEL598
			}
		LABEL598:
			if yyr2 || yy2arr2 {
				if yyn598 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat32Int16 == nil {
						r.EncodeNil()
					} else {
						yy599 := *x.FptrMapFloat32Int16
						if false {
						} else {
							h.encMapfloat32int16((map[float32]int16)(yy599), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat32Int16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat32Int16`)
				}
				r.WriteMapElemValue()
				if yyn598 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat32Int16 == nil {
						r.EncodeNil()
					} else {
						yy601 := *x.FptrMapFloat32Int16
						if false {
						} else {
							h.encMapfloat32int16((map[float32]int16)(yy601), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat32Int32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32int32((map[float32]int32)(x.FMapFloat32Int32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat32Int32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat32Int32`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat32Int32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32int32((map[float32]int32)(x.FMapFloat32Int32), e)
					}
				}
			}
			var yyn606 bool
			if x.FptrMapFloat32Int32 == nil {
				yyn606 = true
				goto LABEL606
			}
		LABEL606:
			if yyr2 || yy2arr2 {
				if yyn606 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat32Int32 == nil {
						r.EncodeNil()
					} else {
						yy607 := *x.FptrMapFloat32Int32
						if false {
						} else {
							h.encMapfloat32int32((map[float32]int32)(yy607), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat32Int32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat32Int32`)
				}
				r.WriteMapElemValue()
				if yyn606 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat32Int32 == nil {
						r.EncodeNil()
					} else {
						yy609 := *x.FptrMapFloat32Int32
						if false {
						} else {
							h.encMapfloat32int32((map[float32]int32)(yy609), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat32Int64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32int64((map[float32]int64)(x.FMapFloat32Int64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat32Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat32Int64`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat32Int64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32int64((map[float32]int64)(x.FMapFloat32Int64), e)
					}
				}
			}
			var yyn614 bool
			if x.FptrMapFloat32Int64 == nil {
				yyn614 = true
				goto LABEL614
			}
		LABEL614:
			if yyr2 || yy2arr2 {
				if yyn614 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat32Int64 == nil {
						r.EncodeNil()
					} else {
						yy615 := *x.FptrMapFloat32Int64
						if false {
						} else {
							h.encMapfloat32int64((map[float32]int64)(yy615), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat32Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat32Int64`)
				}
				r.WriteMapElemValue()
				if yyn614 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat32Int64 == nil {
						r.EncodeNil()
					} else {
						yy617 := *x.FptrMapFloat32Int64
						if false {
						} else {
							h.encMapfloat32int64((map[float32]int64)(yy617), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat32Float32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32float32((map[float32]float32)(x.FMapFloat32Float32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat32Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat32Float32`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat32Float32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32float32((map[float32]float32)(x.FMapFloat32Float32), e)
					}
				}
			}
			var yyn622 bool
			if x.FptrMapFloat32Float32 == nil {
				yyn622 = true
				goto LABEL622
			}
		LABEL622:
			if yyr2 || yy2arr2 {
				if yyn622 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat32Float32 == nil {
						r.EncodeNil()
					} else {
						yy623 := *x.FptrMapFloat32Float32
						if false {
						} else {
							h.encMapfloat32float32((map[float32]float32)(yy623), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat32Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat32Float32`)
				}
				r.WriteMapElemValue()
				if yyn622 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat32Float32 == nil {
						r.EncodeNil()
					} else {
						yy625 := *x.FptrMapFloat32Float32
						if false {
						} else {
							h.encMapfloat32float32((map[float32]float32)(yy625), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat32Float64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32float64((map[float32]float64)(x.FMapFloat32Float64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat32Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat32Float64`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat32Float64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32float64((map[float32]float64)(x.FMapFloat32Float64), e)
					}
				}
			}
			var yyn630 bool
			if x.FptrMapFloat32Float64 == nil {
				yyn630 = true
				goto LABEL630
			}
		LABEL630:
			if yyr2 || yy2arr2 {
				if yyn630 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat32Float64 == nil {
						r.EncodeNil()
					} else {
						yy631 := *x.FptrMapFloat32Float64
						if false {
						} else {
							h.encMapfloat32float64((map[float32]float64)(yy631), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat32Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat32Float64`)
				}
				r.WriteMapElemValue()
				if yyn630 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat32Float64 == nil {
						r.EncodeNil()
					} else {
						yy633 := *x.FptrMapFloat32Float64
						if false {
						} else {
							h.encMapfloat32float64((map[float32]float64)(yy633), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat32Bool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32bool((map[float32]bool)(x.FMapFloat32Bool), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat32Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat32Bool`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat32Bool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat32bool((map[float32]bool)(x.FMapFloat32Bool), e)
					}
				}
			}
			var yyn638 bool
			if x.FptrMapFloat32Bool == nil {
				yyn638 = true
				goto LABEL638
			}
		LABEL638:
			if yyr2 || yy2arr2 {
				if yyn638 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat32Bool == nil {
						r.EncodeNil()
					} else {
						yy639 := *x.FptrMapFloat32Bool
						if false {
						} else {
							h.encMapfloat32bool((map[float32]bool)(yy639), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat32Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat32Bool`)
				}
				r.WriteMapElemValue()
				if yyn638 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat32Bool == nil {
						r.EncodeNil()
					} else {
						yy641 := *x.FptrMapFloat32Bool
						if false {
						} else {
							h.encMapfloat32bool((map[float32]bool)(yy641), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat64Intf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64Interface((map[float64]interface{})(x.FMapFloat64Intf), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat64Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat64Intf`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat64Intf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64Interface((map[float64]interface{})(x.FMapFloat64Intf), e)
					}
				}
			}
			var yyn646 bool
			if x.FptrMapFloat64Intf == nil {
				yyn646 = true
				goto LABEL646
			}
		LABEL646:
			if yyr2 || yy2arr2 {
				if yyn646 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat64Intf == nil {
						r.EncodeNil()
					} else {
						yy647 := *x.FptrMapFloat64Intf
						if false {
						} else {
							h.encMapfloat64Interface((map[float64]interface{})(yy647), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat64Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat64Intf`)
				}
				r.WriteMapElemValue()
				if yyn646 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat64Intf == nil {
						r.EncodeNil()
					} else {
						yy649 := *x.FptrMapFloat64Intf
						if false {
						} else {
							h.encMapfloat64Interface((map[float64]interface{})(yy649), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat64String == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64string((map[float64]string)(x.FMapFloat64String), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat64String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat64String`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat64String == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64string((map[float64]string)(x.FMapFloat64String), e)
					}
				}
			}
			var yyn654 bool
			if x.FptrMapFloat64String == nil {
				yyn654 = true
				goto LABEL654
			}
		LABEL654:
			if yyr2 || yy2arr2 {
				if yyn654 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat64String == nil {
						r.EncodeNil()
					} else {
						yy655 := *x.FptrMapFloat64String
						if false {
						} else {
							h.encMapfloat64string((map[float64]string)(yy655), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat64String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat64String`)
				}
				r.WriteMapElemValue()
				if yyn654 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat64String == nil {
						r.EncodeNil()
					} else {
						yy657 := *x.FptrMapFloat64String
						if false {
						} else {
							h.encMapfloat64string((map[float64]string)(yy657), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat64Uint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64uint((map[float64]uint)(x.FMapFloat64Uint), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat64Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat64Uint`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat64Uint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64uint((map[float64]uint)(x.FMapFloat64Uint), e)
					}
				}
			}
			var yyn662 bool
			if x.FptrMapFloat64Uint == nil {
				yyn662 = true
				goto LABEL662
			}
		LABEL662:
			if yyr2 || yy2arr2 {
				if yyn662 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat64Uint == nil {
						r.EncodeNil()
					} else {
						yy663 := *x.FptrMapFloat64Uint
						if false {
						} else {
							h.encMapfloat64uint((map[float64]uint)(yy663), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat64Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat64Uint`)
				}
				r.WriteMapElemValue()
				if yyn662 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat64Uint == nil {
						r.EncodeNil()
					} else {
						yy665 := *x.FptrMapFloat64Uint
						if false {
						} else {
							h.encMapfloat64uint((map[float64]uint)(yy665), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat64Uint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64uint8((map[float64]uint8)(x.FMapFloat64Uint8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat64Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat64Uint8`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat64Uint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64uint8((map[float64]uint8)(x.FMapFloat64Uint8), e)
					}
				}
			}
			var yyn670 bool
			if x.FptrMapFloat64Uint8 == nil {
				yyn670 = true
				goto LABEL670
			}
		LABEL670:
			if yyr2 || yy2arr2 {
				if yyn670 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat64Uint8 == nil {
						r.EncodeNil()
					} else {
						yy671 := *x.FptrMapFloat64Uint8
						if false {
						} else {
							h.encMapfloat64uint8((map[float64]uint8)(yy671), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat64Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat64Uint8`)
				}
				r.WriteMapElemValue()
				if yyn670 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat64Uint8 == nil {
						r.EncodeNil()
					} else {
						yy673 := *x.FptrMapFloat64Uint8
						if false {
						} else {
							h.encMapfloat64uint8((map[float64]uint8)(yy673), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat64Uint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64uint16((map[float64]uint16)(x.FMapFloat64Uint16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat64Uint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat64Uint16`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat64Uint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64uint16((map[float64]uint16)(x.FMapFloat64Uint16), e)
					}
				}
			}
			var yyn678 bool
			if x.FptrMapFloat64Uint16 == nil {
				yyn678 = true
				goto LABEL678
			}
		LABEL678:
			if yyr2 || yy2arr2 {
				if yyn678 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat64Uint16 == nil {
						r.EncodeNil()
					} else {
						yy679 := *x.FptrMapFloat64Uint16
						if false {
						} else {
							h.encMapfloat64uint16((map[float64]uint16)(yy679), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat64Uint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat64Uint16`)
				}
				r.WriteMapElemValue()
				if yyn678 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat64Uint16 == nil {
						r.EncodeNil()
					} else {
						yy681 := *x.FptrMapFloat64Uint16
						if false {
						} else {
							h.encMapfloat64uint16((map[float64]uint16)(yy681), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat64Uint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64uint32((map[float64]uint32)(x.FMapFloat64Uint32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat64Uint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat64Uint32`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat64Uint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64uint32((map[float64]uint32)(x.FMapFloat64Uint32), e)
					}
				}
			}
			var yyn686 bool
			if x.FptrMapFloat64Uint32 == nil {
				yyn686 = true
				goto LABEL686
			}
		LABEL686:
			if yyr2 || yy2arr2 {
				if yyn686 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat64Uint32 == nil {
						r.EncodeNil()
					} else {
						yy687 := *x.FptrMapFloat64Uint32
						if false {
						} else {
							h.encMapfloat64uint32((map[float64]uint32)(yy687), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat64Uint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat64Uint32`)
				}
				r.WriteMapElemValue()
				if yyn686 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat64Uint32 == nil {
						r.EncodeNil()
					} else {
						yy689 := *x.FptrMapFloat64Uint32
						if false {
						} else {
							h.encMapfloat64uint32((map[float64]uint32)(yy689), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat64Uint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64uint64((map[float64]uint64)(x.FMapFloat64Uint64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat64Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat64Uint64`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat64Uint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64uint64((map[float64]uint64)(x.FMapFloat64Uint64), e)
					}
				}
			}
			var yyn694 bool
			if x.FptrMapFloat64Uint64 == nil {
				yyn694 = true
				goto LABEL694
			}
		LABEL694:
			if yyr2 || yy2arr2 {
				if yyn694 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat64Uint64 == nil {
						r.EncodeNil()
					} else {
						yy695 := *x.FptrMapFloat64Uint64
						if false {
						} else {
							h.encMapfloat64uint64((map[float64]uint64)(yy695), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat64Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat64Uint64`)
				}
				r.WriteMapElemValue()
				if yyn694 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat64Uint64 == nil {
						r.EncodeNil()
					} else {
						yy697 := *x.FptrMapFloat64Uint64
						if false {
						} else {
							h.encMapfloat64uint64((map[float64]uint64)(yy697), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat64Uintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64uintptr((map[float64]uintptr)(x.FMapFloat64Uintptr), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat64Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat64Uintptr`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat64Uintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64uintptr((map[float64]uintptr)(x.FMapFloat64Uintptr), e)
					}
				}
			}
			var yyn702 bool
			if x.FptrMapFloat64Uintptr == nil {
				yyn702 = true
				goto LABEL702
			}
		LABEL702:
			if yyr2 || yy2arr2 {
				if yyn702 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat64Uintptr == nil {
						r.EncodeNil()
					} else {
						yy703 := *x.FptrMapFloat64Uintptr
						if false {
						} else {
							h.encMapfloat64uintptr((map[float64]uintptr)(yy703), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat64Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat64Uintptr`)
				}
				r.WriteMapElemValue()
				if yyn702 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat64Uintptr == nil {
						r.EncodeNil()
					} else {
						yy705 := *x.FptrMapFloat64Uintptr
						if false {
						} else {
							h.encMapfloat64uintptr((map[float64]uintptr)(yy705), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat64Int == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64int((map[float64]int)(x.FMapFloat64Int), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat64Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat64Int`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat64Int == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64int((map[float64]int)(x.FMapFloat64Int), e)
					}
				}
			}
			var yyn710 bool
			if x.FptrMapFloat64Int == nil {
				yyn710 = true
				goto LABEL710
			}
		LABEL710:
			if yyr2 || yy2arr2 {
				if yyn710 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat64Int == nil {
						r.EncodeNil()
					} else {
						yy711 := *x.FptrMapFloat64Int
						if false {
						} else {
							h.encMapfloat64int((map[float64]int)(yy711), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat64Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat64Int`)
				}
				r.WriteMapElemValue()
				if yyn710 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat64Int == nil {
						r.EncodeNil()
					} else {
						yy713 := *x.FptrMapFloat64Int
						if false {
						} else {
							h.encMapfloat64int((map[float64]int)(yy713), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat64Int8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64int8((map[float64]int8)(x.FMapFloat64Int8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat64Int8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat64Int8`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat64Int8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64int8((map[float64]int8)(x.FMapFloat64Int8), e)
					}
				}
			}
			var yyn718 bool
			if x.FptrMapFloat64Int8 == nil {
				yyn718 = true
				goto LABEL718
			}
		LABEL718:
			if yyr2 || yy2arr2 {
				if yyn718 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat64Int8 == nil {
						r.EncodeNil()
					} else {
						yy719 := *x.FptrMapFloat64Int8
						if false {
						} else {
							h.encMapfloat64int8((map[float64]int8)(yy719), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat64Int8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat64Int8`)
				}
				r.WriteMapElemValue()
				if yyn718 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat64Int8 == nil {
						r.EncodeNil()
					} else {
						yy721 := *x.FptrMapFloat64Int8
						if false {
						} else {
							h.encMapfloat64int8((map[float64]int8)(yy721), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat64Int16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64int16((map[float64]int16)(x.FMapFloat64Int16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat64Int16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat64Int16`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat64Int16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64int16((map[float64]int16)(x.FMapFloat64Int16), e)
					}
				}
			}
			var yyn726 bool
			if x.FptrMapFloat64Int16 == nil {
				yyn726 = true
				goto LABEL726
			}
		LABEL726:
			if yyr2 || yy2arr2 {
				if yyn726 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat64Int16 == nil {
						r.EncodeNil()
					} else {
						yy727 := *x.FptrMapFloat64Int16
						if false {
						} else {
							h.encMapfloat64int16((map[float64]int16)(yy727), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat64Int16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat64Int16`)
				}
				r.WriteMapElemValue()
				if yyn726 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat64Int16 == nil {
						r.EncodeNil()
					} else {
						yy729 := *x.FptrMapFloat64Int16
						if false {
						} else {
							h.encMapfloat64int16((map[float64]int16)(yy729), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat64Int32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64int32((map[float64]int32)(x.FMapFloat64Int32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat64Int32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat64Int32`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat64Int32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64int32((map[float64]int32)(x.FMapFloat64Int32), e)
					}
				}
			}
			var yyn734 bool
			if x.FptrMapFloat64Int32 == nil {
				yyn734 = true
				goto LABEL734
			}
		LABEL734:
			if yyr2 || yy2arr2 {
				if yyn734 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat64Int32 == nil {
						r.EncodeNil()
					} else {
						yy735 := *x.FptrMapFloat64Int32
						if false {
						} else {
							h.encMapfloat64int32((map[float64]int32)(yy735), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat64Int32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat64Int32`)
				}
				r.WriteMapElemValue()
				if yyn734 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat64Int32 == nil {
						r.EncodeNil()
					} else {
						yy737 := *x.FptrMapFloat64Int32
						if false {
						} else {
							h.encMapfloat64int32((map[float64]int32)(yy737), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat64Int64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64int64((map[float64]int64)(x.FMapFloat64Int64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat64Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat64Int64`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat64Int64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64int64((map[float64]int64)(x.FMapFloat64Int64), e)
					}
				}
			}
			var yyn742 bool
			if x.FptrMapFloat64Int64 == nil {
				yyn742 = true
				goto LABEL742
			}
		LABEL742:
			if yyr2 || yy2arr2 {
				if yyn742 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat64Int64 == nil {
						r.EncodeNil()
					} else {
						yy743 := *x.FptrMapFloat64Int64
						if false {
						} else {
							h.encMapfloat64int64((map[float64]int64)(yy743), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat64Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat64Int64`)
				}
				r.WriteMapElemValue()
				if yyn742 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat64Int64 == nil {
						r.EncodeNil()
					} else {
						yy745 := *x.FptrMapFloat64Int64
						if false {
						} else {
							h.encMapfloat64int64((map[float64]int64)(yy745), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat64Float32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64float32((map[float64]float32)(x.FMapFloat64Float32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat64Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat64Float32`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat64Float32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64float32((map[float64]float32)(x.FMapFloat64Float32), e)
					}
				}
			}
			var yyn750 bool
			if x.FptrMapFloat64Float32 == nil {
				yyn750 = true
				goto LABEL750
			}
		LABEL750:
			if yyr2 || yy2arr2 {
				if yyn750 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat64Float32 == nil {
						r.EncodeNil()
					} else {
						yy751 := *x.FptrMapFloat64Float32
						if false {
						} else {
							h.encMapfloat64float32((map[float64]float32)(yy751), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat64Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat64Float32`)
				}
				r.WriteMapElemValue()
				if yyn750 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat64Float32 == nil {
						r.EncodeNil()
					} else {
						yy753 := *x.FptrMapFloat64Float32
						if false {
						} else {
							h.encMapfloat64float32((map[float64]float32)(yy753), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat64Float64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64float64((map[float64]float64)(x.FMapFloat64Float64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat64Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat64Float64`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat64Float64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64float64((map[float64]float64)(x.FMapFloat64Float64), e)
					}
				}
			}
			var yyn758 bool
			if x.FptrMapFloat64Float64 == nil {
				yyn758 = true
				goto LABEL758
			}
		LABEL758:
			if yyr2 || yy2arr2 {
				if yyn758 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat64Float64 == nil {
						r.EncodeNil()
					} else {
						yy759 := *x.FptrMapFloat64Float64
						if false {
						} else {
							h.encMapfloat64float64((map[float64]float64)(yy759), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat64Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat64Float64`)
				}
				r.WriteMapElemValue()
				if yyn758 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat64Float64 == nil {
						r.EncodeNil()
					} else {
						yy761 := *x.FptrMapFloat64Float64
						if false {
						} else {
							h.encMapfloat64float64((map[float64]float64)(yy761), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapFloat64Bool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64bool((map[float64]bool)(x.FMapFloat64Bool), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapFloat64Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapFloat64Bool`)
				}
				r.WriteMapElemValue()
				if x.FMapFloat64Bool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapfloat64bool((map[float64]bool)(x.FMapFloat64Bool), e)
					}
				}
			}
			var yyn766 bool
			if x.FptrMapFloat64Bool == nil {
				yyn766 = true
				goto LABEL766
			}
		LABEL766:
			if yyr2 || yy2arr2 {
				if yyn766 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapFloat64Bool == nil {
						r.EncodeNil()
					} else {
						yy767 := *x.FptrMapFloat64Bool
						if false {
						} else {
							h.encMapfloat64bool((map[float64]bool)(yy767), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapFloat64Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapFloat64Bool`)
				}
				r.WriteMapElemValue()
				if yyn766 {
					r.EncodeNil()
				} else {
					if x.FptrMapFloat64Bool == nil {
						r.EncodeNil()
					} else {
						yy769 := *x.FptrMapFloat64Bool
						if false {
						} else {
							h.encMapfloat64bool((map[float64]bool)(yy769), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintIntf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintInterface((map[uint]interface{})(x.FMapUintIntf), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintIntf`)
				}
				r.WriteMapElemValue()
				if x.FMapUintIntf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintInterface((map[uint]interface{})(x.FMapUintIntf), e)
					}
				}
			}
			var yyn774 bool
			if x.FptrMapUintIntf == nil {
				yyn774 = true
				goto LABEL774
			}
		LABEL774:
			if yyr2 || yy2arr2 {
				if yyn774 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintIntf == nil {
						r.EncodeNil()
					} else {
						yy775 := *x.FptrMapUintIntf
						if false {
						} else {
							h.encMapuintInterface((map[uint]interface{})(yy775), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintIntf`)
				}
				r.WriteMapElemValue()
				if yyn774 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintIntf == nil {
						r.EncodeNil()
					} else {
						yy777 := *x.FptrMapUintIntf
						if false {
						} else {
							h.encMapuintInterface((map[uint]interface{})(yy777), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintString == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintstring((map[uint]string)(x.FMapUintString), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintString`)
				}
				r.WriteMapElemValue()
				if x.FMapUintString == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintstring((map[uint]string)(x.FMapUintString), e)
					}
				}
			}
			var yyn782 bool
			if x.FptrMapUintString == nil {
				yyn782 = true
				goto LABEL782
			}
		LABEL782:
			if yyr2 || yy2arr2 {
				if yyn782 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintString == nil {
						r.EncodeNil()
					} else {
						yy783 := *x.FptrMapUintString
						if false {
						} else {
							h.encMapuintstring((map[uint]string)(yy783), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintString`)
				}
				r.WriteMapElemValue()
				if yyn782 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintString == nil {
						r.EncodeNil()
					} else {
						yy785 := *x.FptrMapUintString
						if false {
						} else {
							h.encMapuintstring((map[uint]string)(yy785), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintUint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintuint((map[uint]uint)(x.FMapUintUint), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintUint`)
				}
				r.WriteMapElemValue()
				if x.FMapUintUint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintuint((map[uint]uint)(x.FMapUintUint), e)
					}
				}
			}
			var yyn790 bool
			if x.FptrMapUintUint == nil {
				yyn790 = true
				goto LABEL790
			}
		LABEL790:
			if yyr2 || yy2arr2 {
				if yyn790 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintUint == nil {
						r.EncodeNil()
					} else {
						yy791 := *x.FptrMapUintUint
						if false {
						} else {
							h.encMapuintuint((map[uint]uint)(yy791), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintUint`)
				}
				r.WriteMapElemValue()
				if yyn790 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintUint == nil {
						r.EncodeNil()
					} else {
						yy793 := *x.FptrMapUintUint
						if false {
						} else {
							h.encMapuintuint((map[uint]uint)(yy793), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintUint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintuint8((map[uint]uint8)(x.FMapUintUint8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintUint8`)
				}
				r.WriteMapElemValue()
				if x.FMapUintUint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintuint8((map[uint]uint8)(x.FMapUintUint8), e)
					}
				}
			}
			var yyn798 bool
			if x.FptrMapUintUint8 == nil {
				yyn798 = true
				goto LABEL798
			}
		LABEL798:
			if yyr2 || yy2arr2 {
				if yyn798 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintUint8 == nil {
						r.EncodeNil()
					} else {
						yy799 := *x.FptrMapUintUint8
						if false {
						} else {
							h.encMapuintuint8((map[uint]uint8)(yy799), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintUint8`)
				}
				r.WriteMapElemValue()
				if yyn798 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintUint8 == nil {
						r.EncodeNil()
					} else {
						yy801 := *x.FptrMapUintUint8
						if false {
						} else {
							h.encMapuintuint8((map[uint]uint8)(yy801), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintUint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintuint16((map[uint]uint16)(x.FMapUintUint16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintUint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintUint16`)
				}
				r.WriteMapElemValue()
				if x.FMapUintUint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintuint16((map[uint]uint16)(x.FMapUintUint16), e)
					}
				}
			}
			var yyn806 bool
			if x.FptrMapUintUint16 == nil {
				yyn806 = true
				goto LABEL806
			}
		LABEL806:
			if yyr2 || yy2arr2 {
				if yyn806 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintUint16 == nil {
						r.EncodeNil()
					} else {
						yy807 := *x.FptrMapUintUint16
						if false {
						} else {
							h.encMapuintuint16((map[uint]uint16)(yy807), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintUint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintUint16`)
				}
				r.WriteMapElemValue()
				if yyn806 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintUint16 == nil {
						r.EncodeNil()
					} else {
						yy809 := *x.FptrMapUintUint16
						if false {
						} else {
							h.encMapuintuint16((map[uint]uint16)(yy809), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintUint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintuint32((map[uint]uint32)(x.FMapUintUint32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintUint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintUint32`)
				}
				r.WriteMapElemValue()
				if x.FMapUintUint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintuint32((map[uint]uint32)(x.FMapUintUint32), e)
					}
				}
			}
			var yyn814 bool
			if x.FptrMapUintUint32 == nil {
				yyn814 = true
				goto LABEL814
			}
		LABEL814:
			if yyr2 || yy2arr2 {
				if yyn814 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintUint32 == nil {
						r.EncodeNil()
					} else {
						yy815 := *x.FptrMapUintUint32
						if false {
						} else {
							h.encMapuintuint32((map[uint]uint32)(yy815), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintUint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintUint32`)
				}
				r.WriteMapElemValue()
				if yyn814 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintUint32 == nil {
						r.EncodeNil()
					} else {
						yy817 := *x.FptrMapUintUint32
						if false {
						} else {
							h.encMapuintuint32((map[uint]uint32)(yy817), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintUint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintuint64((map[uint]uint64)(x.FMapUintUint64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintUint64`)
				}
				r.WriteMapElemValue()
				if x.FMapUintUint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintuint64((map[uint]uint64)(x.FMapUintUint64), e)
					}
				}
			}
			var yyn822 bool
			if x.FptrMapUintUint64 == nil {
				yyn822 = true
				goto LABEL822
			}
		LABEL822:
			if yyr2 || yy2arr2 {
				if yyn822 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintUint64 == nil {
						r.EncodeNil()
					} else {
						yy823 := *x.FptrMapUintUint64
						if false {
						} else {
							h.encMapuintuint64((map[uint]uint64)(yy823), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintUint64`)
				}
				r.WriteMapElemValue()
				if yyn822 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintUint64 == nil {
						r.EncodeNil()
					} else {
						yy825 := *x.FptrMapUintUint64
						if false {
						} else {
							h.encMapuintuint64((map[uint]uint64)(yy825), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintUintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintuintptr((map[uint]uintptr)(x.FMapUintUintptr), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintUintptr`)
				}
				r.WriteMapElemValue()
				if x.FMapUintUintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintuintptr((map[uint]uintptr)(x.FMapUintUintptr), e)
					}
				}
			}
			var yyn830 bool
			if x.FptrMapUintUintptr == nil {
				yyn830 = true
				goto LABEL830
			}
		LABEL830:
			if yyr2 || yy2arr2 {
				if yyn830 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintUintptr == nil {
						r.EncodeNil()
					} else {
						yy831 := *x.FptrMapUintUintptr
						if false {
						} else {
							h.encMapuintuintptr((map[uint]uintptr)(yy831), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintUintptr`)
				}
				r.WriteMapElemValue()
				if yyn830 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintUintptr == nil {
						r.EncodeNil()
					} else {
						yy833 := *x.FptrMapUintUintptr
						if false {
						} else {
							h.encMapuintuintptr((map[uint]uintptr)(yy833), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintInt == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintint((map[uint]int)(x.FMapUintInt), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintInt`)
				}
				r.WriteMapElemValue()
				if x.FMapUintInt == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintint((map[uint]int)(x.FMapUintInt), e)
					}
				}
			}
			var yyn838 bool
			if x.FptrMapUintInt == nil {
				yyn838 = true
				goto LABEL838
			}
		LABEL838:
			if yyr2 || yy2arr2 {
				if yyn838 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintInt == nil {
						r.EncodeNil()
					} else {
						yy839 := *x.FptrMapUintInt
						if false {
						} else {
							h.encMapuintint((map[uint]int)(yy839), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintInt`)
				}
				r.WriteMapElemValue()
				if yyn838 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintInt == nil {
						r.EncodeNil()
					} else {
						yy841 := *x.FptrMapUintInt
						if false {
						} else {
							h.encMapuintint((map[uint]int)(yy841), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintInt8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintint8((map[uint]int8)(x.FMapUintInt8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintInt8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintInt8`)
				}
				r.WriteMapElemValue()
				if x.FMapUintInt8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintint8((map[uint]int8)(x.FMapUintInt8), e)
					}
				}
			}
			var yyn846 bool
			if x.FptrMapUintInt8 == nil {
				yyn846 = true
				goto LABEL846
			}
		LABEL846:
			if yyr2 || yy2arr2 {
				if yyn846 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintInt8 == nil {
						r.EncodeNil()
					} else {
						yy847 := *x.FptrMapUintInt8
						if false {
						} else {
							h.encMapuintint8((map[uint]int8)(yy847), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintInt8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintInt8`)
				}
				r.WriteMapElemValue()
				if yyn846 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintInt8 == nil {
						r.EncodeNil()
					} else {
						yy849 := *x.FptrMapUintInt8
						if false {
						} else {
							h.encMapuintint8((map[uint]int8)(yy849), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintInt16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintint16((map[uint]int16)(x.FMapUintInt16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintInt16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintInt16`)
				}
				r.WriteMapElemValue()
				if x.FMapUintInt16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintint16((map[uint]int16)(x.FMapUintInt16), e)
					}
				}
			}
			var yyn854 bool
			if x.FptrMapUintInt16 == nil {
				yyn854 = true
				goto LABEL854
			}
		LABEL854:
			if yyr2 || yy2arr2 {
				if yyn854 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintInt16 == nil {
						r.EncodeNil()
					} else {
						yy855 := *x.FptrMapUintInt16
						if false {
						} else {
							h.encMapuintint16((map[uint]int16)(yy855), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintInt16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintInt16`)
				}
				r.WriteMapElemValue()
				if yyn854 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintInt16 == nil {
						r.EncodeNil()
					} else {
						yy857 := *x.FptrMapUintInt16
						if false {
						} else {
							h.encMapuintint16((map[uint]int16)(yy857), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintInt32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintint32((map[uint]int32)(x.FMapUintInt32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintInt32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintInt32`)
				}
				r.WriteMapElemValue()
				if x.FMapUintInt32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintint32((map[uint]int32)(x.FMapUintInt32), e)
					}
				}
			}
			var yyn862 bool
			if x.FptrMapUintInt32 == nil {
				yyn862 = true
				goto LABEL862
			}
		LABEL862:
			if yyr2 || yy2arr2 {
				if yyn862 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintInt32 == nil {
						r.EncodeNil()
					} else {
						yy863 := *x.FptrMapUintInt32
						if false {
						} else {
							h.encMapuintint32((map[uint]int32)(yy863), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintInt32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintInt32`)
				}
				r.WriteMapElemValue()
				if yyn862 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintInt32 == nil {
						r.EncodeNil()
					} else {
						yy865 := *x.FptrMapUintInt32
						if false {
						} else {
							h.encMapuintint32((map[uint]int32)(yy865), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintInt64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintint64((map[uint]int64)(x.FMapUintInt64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintInt64`)
				}
				r.WriteMapElemValue()
				if x.FMapUintInt64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintint64((map[uint]int64)(x.FMapUintInt64), e)
					}
				}
			}
			var yyn870 bool
			if x.FptrMapUintInt64 == nil {
				yyn870 = true
				goto LABEL870
			}
		LABEL870:
			if yyr2 || yy2arr2 {
				if yyn870 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintInt64 == nil {
						r.EncodeNil()
					} else {
						yy871 := *x.FptrMapUintInt64
						if false {
						} else {
							h.encMapuintint64((map[uint]int64)(yy871), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintInt64`)
				}
				r.WriteMapElemValue()
				if yyn870 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintInt64 == nil {
						r.EncodeNil()
					} else {
						yy873 := *x.FptrMapUintInt64
						if false {
						} else {
							h.encMapuintint64((map[uint]int64)(yy873), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintFloat32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintfloat32((map[uint]float32)(x.FMapUintFloat32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintFloat32`)
				}
				r.WriteMapElemValue()
				if x.FMapUintFloat32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintfloat32((map[uint]float32)(x.FMapUintFloat32), e)
					}
				}
			}
			var yyn878 bool
			if x.FptrMapUintFloat32 == nil {
				yyn878 = true
				goto LABEL878
			}
		LABEL878:
			if yyr2 || yy2arr2 {
				if yyn878 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintFloat32 == nil {
						r.EncodeNil()
					} else {
						yy879 := *x.FptrMapUintFloat32
						if false {
						} else {
							h.encMapuintfloat32((map[uint]float32)(yy879), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintFloat32`)
				}
				r.WriteMapElemValue()
				if yyn878 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintFloat32 == nil {
						r.EncodeNil()
					} else {
						yy881 := *x.FptrMapUintFloat32
						if false {
						} else {
							h.encMapuintfloat32((map[uint]float32)(yy881), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintFloat64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintfloat64((map[uint]float64)(x.FMapUintFloat64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintFloat64`)
				}
				r.WriteMapElemValue()
				if x.FMapUintFloat64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintfloat64((map[uint]float64)(x.FMapUintFloat64), e)
					}
				}
			}
			var yyn886 bool
			if x.FptrMapUintFloat64 == nil {
				yyn886 = true
				goto LABEL886
			}
		LABEL886:
			if yyr2 || yy2arr2 {
				if yyn886 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintFloat64 == nil {
						r.EncodeNil()
					} else {
						yy887 := *x.FptrMapUintFloat64
						if false {
						} else {
							h.encMapuintfloat64((map[uint]float64)(yy887), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintFloat64`)
				}
				r.WriteMapElemValue()
				if yyn886 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintFloat64 == nil {
						r.EncodeNil()
					} else {
						yy889 := *x.FptrMapUintFloat64
						if false {
						} else {
							h.encMapuintfloat64((map[uint]float64)(yy889), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintBool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintbool((map[uint]bool)(x.FMapUintBool), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintBool`)
				}
				r.WriteMapElemValue()
				if x.FMapUintBool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintbool((map[uint]bool)(x.FMapUintBool), e)
					}
				}
			}
			var yyn894 bool
			if x.FptrMapUintBool == nil {
				yyn894 = true
				goto LABEL894
			}
		LABEL894:
			if yyr2 || yy2arr2 {
				if yyn894 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintBool == nil {
						r.EncodeNil()
					} else {
						yy895 := *x.FptrMapUintBool
						if false {
						} else {
							h.encMapuintbool((map[uint]bool)(yy895), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintBool`)
				}
				r.WriteMapElemValue()
				if yyn894 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintBool == nil {
						r.EncodeNil()
					} else {
						yy897 := *x.FptrMapUintBool
						if false {
						} else {
							h.encMapuintbool((map[uint]bool)(yy897), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint8Intf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8Interface((map[uint8]interface{})(x.FMapUint8Intf), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Intf`)
				}
				r.WriteMapElemValue()
				if x.FMapUint8Intf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8Interface((map[uint8]interface{})(x.FMapUint8Intf), e)
					}
				}
			}
			var yyn902 bool
			if x.FptrMapUint8Intf == nil {
				yyn902 = true
				goto LABEL902
			}
		LABEL902:
			if yyr2 || yy2arr2 {
				if yyn902 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint8Intf == nil {
						r.EncodeNil()
					} else {
						yy903 := *x.FptrMapUint8Intf
						if false {
						} else {
							h.encMapuint8Interface((map[uint8]interface{})(yy903), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Intf`)
				}
				r.WriteMapElemValue()
				if yyn902 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint8Intf == nil {
						r.EncodeNil()
					} else {
						yy905 := *x.FptrMapUint8Intf
						if false {
						} else {
							h.encMapuint8Interface((map[uint8]interface{})(yy905), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint8String == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8string((map[uint8]string)(x.FMapUint8String), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8String`)
				}
				r.WriteMapElemValue()
				if x.FMapUint8String == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8string((map[uint8]string)(x.FMapUint8String), e)
					}
				}
			}
			var yyn910 bool
			if x.FptrMapUint8String == nil {
				yyn910 = true
				goto LABEL910
			}
		LABEL910:
			if yyr2 || yy2arr2 {
				if yyn910 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint8String == nil {
						r.EncodeNil()
					} else {
						yy911 := *x.FptrMapUint8String
						if false {
						} else {
							h.encMapuint8string((map[uint8]string)(yy911), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8String`)
				}
				r.WriteMapElemValue()
				if yyn910 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint8String == nil {
						r.EncodeNil()
					} else {
						yy913 := *x.FptrMapUint8String
						if false {
						} else {
							h.encMapuint8string((map[uint8]string)(yy913), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint8Uint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8uint((map[uint8]uint)(x.FMapUint8Uint), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Uint`)
				}
				r.WriteMapElemValue()
				if x.FMapUint8Uint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8uint((map[uint8]uint)(x.FMapUint8Uint), e)
					}
				}
			}
			var yyn918 bool
			if x.FptrMapUint8Uint == nil {
				yyn918 = true
				goto LABEL918
			}
		LABEL918:
			if yyr2 || yy2arr2 {
				if yyn918 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint8Uint == nil {
						r.EncodeNil()
					} else {
						yy919 := *x.FptrMapUint8Uint
						if false {
						} else {
							h.encMapuint8uint((map[uint8]uint)(yy919), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Uint`)
				}
				r.WriteMapElemValue()
				if yyn918 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint8Uint == nil {
						r.EncodeNil()
					} else {
						yy921 := *x.FptrMapUint8Uint
						if false {
						} else {
							h.encMapuint8uint((map[uint8]uint)(yy921), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint8Uint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8uint8((map[uint8]uint8)(x.FMapUint8Uint8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Uint8`)
				}
				r.WriteMapElemValue()
				if x.FMapUint8Uint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8uint8((map[uint8]uint8)(x.FMapUint8Uint8), e)
					}
				}
			}
			var yyn926 bool
			if x.FptrMapUint8Uint8 == nil {
				yyn926 = true
				goto LABEL926
			}
		LABEL926:
			if yyr2 || yy2arr2 {
				if yyn926 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint8Uint8 == nil {
						r.EncodeNil()
					} else {
						yy927 := *x.FptrMapUint8Uint8
						if false {
						} else {
							h.encMapuint8uint8((map[uint8]uint8)(yy927), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Uint8`)
				}
				r.WriteMapElemValue()
				if yyn926 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint8Uint8 == nil {
						r.EncodeNil()
					} else {
						yy929 := *x.FptrMapUint8Uint8
						if false {
						} else {
							h.encMapuint8uint8((map[uint8]uint8)(yy929), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint8Uint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8uint16((map[uint8]uint16)(x.FMapUint8Uint16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Uint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Uint16`)
				}
				r.WriteMapElemValue()
				if x.FMapUint8Uint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8uint16((map[uint8]uint16)(x.FMapUint8Uint16), e)
					}
				}
			}
			var yyn934 bool
			if x.FptrMapUint8Uint16 == nil {
				yyn934 = true
				goto LABEL934
			}
		LABEL934:
			if yyr2 || yy2arr2 {
				if yyn934 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint8Uint16 == nil {
						r.EncodeNil()
					} else {
						yy935 := *x.FptrMapUint8Uint16
						if false {
						} else {
							h.encMapuint8uint16((map[uint8]uint16)(yy935), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Uint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Uint16`)
				}
				r.WriteMapElemValue()
				if yyn934 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint8Uint16 == nil {
						r.EncodeNil()
					} else {
						yy937 := *x.FptrMapUint8Uint16
						if false {
						} else {
							h.encMapuint8uint16((map[uint8]uint16)(yy937), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint8Uint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8uint32((map[uint8]uint32)(x.FMapUint8Uint32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Uint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Uint32`)
				}
				r.WriteMapElemValue()
				if x.FMapUint8Uint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8uint32((map[uint8]uint32)(x.FMapUint8Uint32), e)
					}
				}
			}
			var yyn942 bool
			if x.FptrMapUint8Uint32 == nil {
				yyn942 = true
				goto LABEL942
			}
		LABEL942:
			if yyr2 || yy2arr2 {
				if yyn942 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint8Uint32 == nil {
						r.EncodeNil()
					} else {
						yy943 := *x.FptrMapUint8Uint32
						if false {
						} else {
							h.encMapuint8uint32((map[uint8]uint32)(yy943), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Uint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Uint32`)
				}
				r.WriteMapElemValue()
				if yyn942 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint8Uint32 == nil {
						r.EncodeNil()
					} else {
						yy945 := *x.FptrMapUint8Uint32
						if false {
						} else {
							h.encMapuint8uint32((map[uint8]uint32)(yy945), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint8Uint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8uint64((map[uint8]uint64)(x.FMapUint8Uint64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Uint64`)
				}
				r.WriteMapElemValue()
				if x.FMapUint8Uint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8uint64((map[uint8]uint64)(x.FMapUint8Uint64), e)
					}
				}
			}
			var yyn950 bool
			if x.FptrMapUint8Uint64 == nil {
				yyn950 = true
				goto LABEL950
			}
		LABEL950:
			if yyr2 || yy2arr2 {
				if yyn950 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint8Uint64 == nil {
						r.EncodeNil()
					} else {
						yy951 := *x.FptrMapUint8Uint64
						if false {
						} else {
							h.encMapuint8uint64((map[uint8]uint64)(yy951), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Uint64`)
				}
				r.WriteMapElemValue()
				if yyn950 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint8Uint64 == nil {
						r.EncodeNil()
					} else {
						yy953 := *x.FptrMapUint8Uint64
						if false {
						} else {
							h.encMapuint8uint64((map[uint8]uint64)(yy953), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint8Uintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8uintptr((map[uint8]uintptr)(x.FMapUint8Uintptr), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Uintptr`)
				}
				r.WriteMapElemValue()
				if x.FMapUint8Uintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8uintptr((map[uint8]uintptr)(x.FMapUint8Uintptr), e)
					}
				}
			}
			var yyn958 bool
			if x.FptrMapUint8Uintptr == nil {
				yyn958 = true
				goto LABEL958
			}
		LABEL958:
			if yyr2 || yy2arr2 {
				if yyn958 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint8Uintptr == nil {
						r.EncodeNil()
					} else {
						yy959 := *x.FptrMapUint8Uintptr
						if false {
						} else {
							h.encMapuint8uintptr((map[uint8]uintptr)(yy959), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Uintptr`)
				}
				r.WriteMapElemValue()
				if yyn958 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint8Uintptr == nil {
						r.EncodeNil()
					} else {
						yy961 := *x.FptrMapUint8Uintptr
						if false {
						} else {
							h.encMapuint8uintptr((map[uint8]uintptr)(yy961), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint8Int == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8int((map[uint8]int)(x.FMapUint8Int), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Int`)
				}
				r.WriteMapElemValue()
				if x.FMapUint8Int == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8int((map[uint8]int)(x.FMapUint8Int), e)
					}
				}
			}
			var yyn966 bool
			if x.FptrMapUint8Int == nil {
				yyn966 = true
				goto LABEL966
			}
		LABEL966:
			if yyr2 || yy2arr2 {
				if yyn966 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint8Int == nil {
						r.EncodeNil()
					} else {
						yy967 := *x.FptrMapUint8Int
						if false {
						} else {
							h.encMapuint8int((map[uint8]int)(yy967), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Int`)
				}
				r.WriteMapElemValue()
				if yyn966 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint8Int == nil {
						r.EncodeNil()
					} else {
						yy969 := *x.FptrMapUint8Int
						if false {
						} else {
							h.encMapuint8int((map[uint8]int)(yy969), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint8Int8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8int8((map[uint8]int8)(x.FMapUint8Int8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Int8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Int8`)
				}
				r.WriteMapElemValue()
				if x.FMapUint8Int8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8int8((map[uint8]int8)(x.FMapUint8Int8), e)
					}
				}
			}
			var yyn974 bool
			if x.FptrMapUint8Int8 == nil {
				yyn974 = true
				goto LABEL974
			}
		LABEL974:
			if yyr2 || yy2arr2 {
				if yyn974 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint8Int8 == nil {
						r.EncodeNil()
					} else {
						yy975 := *x.FptrMapUint8Int8
						if false {
						} else {
							h.encMapuint8int8((map[uint8]int8)(yy975), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Int8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Int8`)
				}
				r.WriteMapElemValue()
				if yyn974 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint8Int8 == nil {
						r.EncodeNil()
					} else {
						yy977 := *x.FptrMapUint8Int8
						if false {
						} else {
							h.encMapuint8int8((map[uint8]int8)(yy977), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint8Int16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8int16((map[uint8]int16)(x.FMapUint8Int16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Int16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Int16`)
				}
				r.WriteMapElemValue()
				if x.FMapUint8Int16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8int16((map[uint8]int16)(x.FMapUint8Int16), e)
					}
				}
			}
			var yyn982 bool
			if x.FptrMapUint8Int16 == nil {
				yyn982 = true
				goto LABEL982
			}
		LABEL982:
			if yyr2 || yy2arr2 {
				if yyn982 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint8Int16 == nil {
						r.EncodeNil()
					} else {
						yy983 := *x.FptrMapUint8Int16
						if false {
						} else {
							h.encMapuint8int16((map[uint8]int16)(yy983), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Int16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Int16`)
				}
				r.WriteMapElemValue()
				if yyn982 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint8Int16 == nil {
						r.EncodeNil()
					} else {
						yy985 := *x.FptrMapUint8Int16
						if false {
						} else {
							h.encMapuint8int16((map[uint8]int16)(yy985), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint8Int32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8int32((map[uint8]int32)(x.FMapUint8Int32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Int32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Int32`)
				}
				r.WriteMapElemValue()
				if x.FMapUint8Int32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8int32((map[uint8]int32)(x.FMapUint8Int32), e)
					}
				}
			}
			var yyn990 bool
			if x.FptrMapUint8Int32 == nil {
				yyn990 = true
				goto LABEL990
			}
		LABEL990:
			if yyr2 || yy2arr2 {
				if yyn990 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint8Int32 == nil {
						r.EncodeNil()
					} else {
						yy991 := *x.FptrMapUint8Int32
						if false {
						} else {
							h.encMapuint8int32((map[uint8]int32)(yy991), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Int32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Int32`)
				}
				r.WriteMapElemValue()
				if yyn990 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint8Int32 == nil {
						r.EncodeNil()
					} else {
						yy993 := *x.FptrMapUint8Int32
						if false {
						} else {
							h.encMapuint8int32((map[uint8]int32)(yy993), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint8Int64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8int64((map[uint8]int64)(x.FMapUint8Int64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Int64`)
				}
				r.WriteMapElemValue()
				if x.FMapUint8Int64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8int64((map[uint8]int64)(x.FMapUint8Int64), e)
					}
				}
			}
			var yyn998 bool
			if x.FptrMapUint8Int64 == nil {
				yyn998 = true
				goto LABEL998
			}
		LABEL998:
			if yyr2 || yy2arr2 {
				if yyn998 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint8Int64 == nil {
						r.EncodeNil()
					} else {
						yy999 := *x.FptrMapUint8Int64
						if false {
						} else {
							h.encMapuint8int64((map[uint8]int64)(yy999), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Int64`)
				}
				r.WriteMapElemValue()
				if yyn998 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint8Int64 == nil {
						r.EncodeNil()
					} else {
						yy1001 := *x.FptrMapUint8Int64
						if false {
						} else {
							h.encMapuint8int64((map[uint8]int64)(yy1001), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint8Float32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8float32((map[uint8]float32)(x.FMapUint8Float32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Float32`)
				}
				r.WriteMapElemValue()
				if x.FMapUint8Float32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8float32((map[uint8]float32)(x.FMapUint8Float32), e)
					}
				}
			}
			var yyn1006 bool
			if x.FptrMapUint8Float32 == nil {
				yyn1006 = true
				goto LABEL1006
			}
		LABEL1006:
			if yyr2 || yy2arr2 {
				if yyn1006 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint8Float32 == nil {
						r.EncodeNil()
					} else {
						yy1007 := *x.FptrMapUint8Float32
						if false {
						} else {
							h.encMapuint8float32((map[uint8]float32)(yy1007), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Float32`)
				}
				r.WriteMapElemValue()
				if yyn1006 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint8Float32 == nil {
						r.EncodeNil()
					} else {
						yy1009 := *x.FptrMapUint8Float32
						if false {
						} else {
							h.encMapuint8float32((map[uint8]float32)(yy1009), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint8Float64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8float64((map[uint8]float64)(x.FMapUint8Float64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Float64`)
				}
				r.WriteMapElemValue()
				if x.FMapUint8Float64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8float64((map[uint8]float64)(x.FMapUint8Float64), e)
					}
				}
			}
			var yyn1014 bool
			if x.FptrMapUint8Float64 == nil {
				yyn1014 = true
				goto LABEL1014
			}
		LABEL1014:
			if yyr2 || yy2arr2 {
				if yyn1014 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint8Float64 == nil {
						r.EncodeNil()
					} else {
						yy1015 := *x.FptrMapUint8Float64
						if false {
						} else {
							h.encMapuint8float64((map[uint8]float64)(yy1015), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Float64`)
				}
				r.WriteMapElemValue()
				if yyn1014 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint8Float64 == nil {
						r.EncodeNil()
					} else {
						yy1017 := *x.FptrMapUint8Float64
						if false {
						} else {
							h.encMapuint8float64((map[uint8]float64)(yy1017), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint8Bool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8bool((map[uint8]bool)(x.FMapUint8Bool), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint8Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint8Bool`)
				}
				r.WriteMapElemValue()
				if x.FMapUint8Bool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint8bool((map[uint8]bool)(x.FMapUint8Bool), e)
					}
				}
			}
			var yyn1022 bool
			if x.FptrMapUint8Bool == nil {
				yyn1022 = true
				goto LABEL1022
			}
		LABEL1022:
			if yyr2 || yy2arr2 {
				if yyn1022 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint8Bool == nil {
						r.EncodeNil()
					} else {
						yy1023 := *x.FptrMapUint8Bool
						if false {
						} else {
							h.encMapuint8bool((map[uint8]bool)(yy1023), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint8Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint8Bool`)
				}
				r.WriteMapElemValue()
				if yyn1022 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint8Bool == nil {
						r.EncodeNil()
					} else {
						yy1025 := *x.FptrMapUint8Bool
						if false {
						} else {
							h.encMapuint8bool((map[uint8]bool)(yy1025), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint16Intf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16Interface((map[uint16]interface{})(x.FMapUint16Intf), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint16Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint16Intf`)
				}
				r.WriteMapElemValue()
				if x.FMapUint16Intf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16Interface((map[uint16]interface{})(x.FMapUint16Intf), e)
					}
				}
			}
			var yyn1030 bool
			if x.FptrMapUint16Intf == nil {
				yyn1030 = true
				goto LABEL1030
			}
		LABEL1030:
			if yyr2 || yy2arr2 {
				if yyn1030 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint16Intf == nil {
						r.EncodeNil()
					} else {
						yy1031 := *x.FptrMapUint16Intf
						if false {
						} else {
							h.encMapuint16Interface((map[uint16]interface{})(yy1031), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint16Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint16Intf`)
				}
				r.WriteMapElemValue()
				if yyn1030 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint16Intf == nil {
						r.EncodeNil()
					} else {
						yy1033 := *x.FptrMapUint16Intf
						if false {
						} else {
							h.encMapuint16Interface((map[uint16]interface{})(yy1033), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint16String == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16string((map[uint16]string)(x.FMapUint16String), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint16String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint16String`)
				}
				r.WriteMapElemValue()
				if x.FMapUint16String == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16string((map[uint16]string)(x.FMapUint16String), e)
					}
				}
			}
			var yyn1038 bool
			if x.FptrMapUint16String == nil {
				yyn1038 = true
				goto LABEL1038
			}
		LABEL1038:
			if yyr2 || yy2arr2 {
				if yyn1038 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint16String == nil {
						r.EncodeNil()
					} else {
						yy1039 := *x.FptrMapUint16String
						if false {
						} else {
							h.encMapuint16string((map[uint16]string)(yy1039), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint16String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint16String`)
				}
				r.WriteMapElemValue()
				if yyn1038 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint16String == nil {
						r.EncodeNil()
					} else {
						yy1041 := *x.FptrMapUint16String
						if false {
						} else {
							h.encMapuint16string((map[uint16]string)(yy1041), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint16Uint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16uint((map[uint16]uint)(x.FMapUint16Uint), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint16Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint16Uint`)
				}
				r.WriteMapElemValue()
				if x.FMapUint16Uint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16uint((map[uint16]uint)(x.FMapUint16Uint), e)
					}
				}
			}
			var yyn1046 bool
			if x.FptrMapUint16Uint == nil {
				yyn1046 = true
				goto LABEL1046
			}
		LABEL1046:
			if yyr2 || yy2arr2 {
				if yyn1046 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint16Uint == nil {
						r.EncodeNil()
					} else {
						yy1047 := *x.FptrMapUint16Uint
						if false {
						} else {
							h.encMapuint16uint((map[uint16]uint)(yy1047), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint16Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint16Uint`)
				}
				r.WriteMapElemValue()
				if yyn1046 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint16Uint == nil {
						r.EncodeNil()
					} else {
						yy1049 := *x.FptrMapUint16Uint
						if false {
						} else {
							h.encMapuint16uint((map[uint16]uint)(yy1049), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint16Uint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16uint8((map[uint16]uint8)(x.FMapUint16Uint8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint16Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint16Uint8`)
				}
				r.WriteMapElemValue()
				if x.FMapUint16Uint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16uint8((map[uint16]uint8)(x.FMapUint16Uint8), e)
					}
				}
			}
			var yyn1054 bool
			if x.FptrMapUint16Uint8 == nil {
				yyn1054 = true
				goto LABEL1054
			}
		LABEL1054:
			if yyr2 || yy2arr2 {
				if yyn1054 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint16Uint8 == nil {
						r.EncodeNil()
					} else {
						yy1055 := *x.FptrMapUint16Uint8
						if false {
						} else {
							h.encMapuint16uint8((map[uint16]uint8)(yy1055), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint16Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint16Uint8`)
				}
				r.WriteMapElemValue()
				if yyn1054 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint16Uint8 == nil {
						r.EncodeNil()
					} else {
						yy1057 := *x.FptrMapUint16Uint8
						if false {
						} else {
							h.encMapuint16uint8((map[uint16]uint8)(yy1057), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint16Uint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16uint16((map[uint16]uint16)(x.FMapUint16Uint16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint16Uint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint16Uint16`)
				}
				r.WriteMapElemValue()
				if x.FMapUint16Uint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16uint16((map[uint16]uint16)(x.FMapUint16Uint16), e)
					}
				}
			}
			var yyn1062 bool
			if x.FptrMapUint16Uint16 == nil {
				yyn1062 = true
				goto LABEL1062
			}
		LABEL1062:
			if yyr2 || yy2arr2 {
				if yyn1062 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint16Uint16 == nil {
						r.EncodeNil()
					} else {
						yy1063 := *x.FptrMapUint16Uint16
						if false {
						} else {
							h.encMapuint16uint16((map[uint16]uint16)(yy1063), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint16Uint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint16Uint16`)
				}
				r.WriteMapElemValue()
				if yyn1062 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint16Uint16 == nil {
						r.EncodeNil()
					} else {
						yy1065 := *x.FptrMapUint16Uint16
						if false {
						} else {
							h.encMapuint16uint16((map[uint16]uint16)(yy1065), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint16Uint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16uint32((map[uint16]uint32)(x.FMapUint16Uint32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint16Uint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint16Uint32`)
				}
				r.WriteMapElemValue()
				if x.FMapUint16Uint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16uint32((map[uint16]uint32)(x.FMapUint16Uint32), e)
					}
				}
			}
			var yyn1070 bool
			if x.FptrMapUint16Uint32 == nil {
				yyn1070 = true
				goto LABEL1070
			}
		LABEL1070:
			if yyr2 || yy2arr2 {
				if yyn1070 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint16Uint32 == nil {
						r.EncodeNil()
					} else {
						yy1071 := *x.FptrMapUint16Uint32
						if false {
						} else {
							h.encMapuint16uint32((map[uint16]uint32)(yy1071), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint16Uint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint16Uint32`)
				}
				r.WriteMapElemValue()
				if yyn1070 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint16Uint32 == nil {
						r.EncodeNil()
					} else {
						yy1073 := *x.FptrMapUint16Uint32
						if false {
						} else {
							h.encMapuint16uint32((map[uint16]uint32)(yy1073), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint16Uint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16uint64((map[uint16]uint64)(x.FMapUint16Uint64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint16Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint16Uint64`)
				}
				r.WriteMapElemValue()
				if x.FMapUint16Uint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16uint64((map[uint16]uint64)(x.FMapUint16Uint64), e)
					}
				}
			}
			var yyn1078 bool
			if x.FptrMapUint16Uint64 == nil {
				yyn1078 = true
				goto LABEL1078
			}
		LABEL1078:
			if yyr2 || yy2arr2 {
				if yyn1078 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint16Uint64 == nil {
						r.EncodeNil()
					} else {
						yy1079 := *x.FptrMapUint16Uint64
						if false {
						} else {
							h.encMapuint16uint64((map[uint16]uint64)(yy1079), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint16Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint16Uint64`)
				}
				r.WriteMapElemValue()
				if yyn1078 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint16Uint64 == nil {
						r.EncodeNil()
					} else {
						yy1081 := *x.FptrMapUint16Uint64
						if false {
						} else {
							h.encMapuint16uint64((map[uint16]uint64)(yy1081), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint16Uintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16uintptr((map[uint16]uintptr)(x.FMapUint16Uintptr), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint16Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint16Uintptr`)
				}
				r.WriteMapElemValue()
				if x.FMapUint16Uintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16uintptr((map[uint16]uintptr)(x.FMapUint16Uintptr), e)
					}
				}
			}
			var yyn1086 bool
			if x.FptrMapUint16Uintptr == nil {
				yyn1086 = true
				goto LABEL1086
			}
		LABEL1086:
			if yyr2 || yy2arr2 {
				if yyn1086 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint16Uintptr == nil {
						r.EncodeNil()
					} else {
						yy1087 := *x.FptrMapUint16Uintptr
						if false {
						} else {
							h.encMapuint16uintptr((map[uint16]uintptr)(yy1087), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint16Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint16Uintptr`)
				}
				r.WriteMapElemValue()
				if yyn1086 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint16Uintptr == nil {
						r.EncodeNil()
					} else {
						yy1089 := *x.FptrMapUint16Uintptr
						if false {
						} else {
							h.encMapuint16uintptr((map[uint16]uintptr)(yy1089), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint16Int == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16int((map[uint16]int)(x.FMapUint16Int), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint16Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint16Int`)
				}
				r.WriteMapElemValue()
				if x.FMapUint16Int == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16int((map[uint16]int)(x.FMapUint16Int), e)
					}
				}
			}
			var yyn1094 bool
			if x.FptrMapUint16Int == nil {
				yyn1094 = true
				goto LABEL1094
			}
		LABEL1094:
			if yyr2 || yy2arr2 {
				if yyn1094 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint16Int == nil {
						r.EncodeNil()
					} else {
						yy1095 := *x.FptrMapUint16Int
						if false {
						} else {
							h.encMapuint16int((map[uint16]int)(yy1095), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint16Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint16Int`)
				}
				r.WriteMapElemValue()
				if yyn1094 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint16Int == nil {
						r.EncodeNil()
					} else {
						yy1097 := *x.FptrMapUint16Int
						if false {
						} else {
							h.encMapuint16int((map[uint16]int)(yy1097), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint16Int8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16int8((map[uint16]int8)(x.FMapUint16Int8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint16Int8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint16Int8`)
				}
				r.WriteMapElemValue()
				if x.FMapUint16Int8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16int8((map[uint16]int8)(x.FMapUint16Int8), e)
					}
				}
			}
			var yyn1102 bool
			if x.FptrMapUint16Int8 == nil {
				yyn1102 = true
				goto LABEL1102
			}
		LABEL1102:
			if yyr2 || yy2arr2 {
				if yyn1102 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint16Int8 == nil {
						r.EncodeNil()
					} else {
						yy1103 := *x.FptrMapUint16Int8
						if false {
						} else {
							h.encMapuint16int8((map[uint16]int8)(yy1103), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint16Int8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint16Int8`)
				}
				r.WriteMapElemValue()
				if yyn1102 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint16Int8 == nil {
						r.EncodeNil()
					} else {
						yy1105 := *x.FptrMapUint16Int8
						if false {
						} else {
							h.encMapuint16int8((map[uint16]int8)(yy1105), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint16Int16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16int16((map[uint16]int16)(x.FMapUint16Int16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint16Int16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint16Int16`)
				}
				r.WriteMapElemValue()
				if x.FMapUint16Int16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16int16((map[uint16]int16)(x.FMapUint16Int16), e)
					}
				}
			}
			var yyn1110 bool
			if x.FptrMapUint16Int16 == nil {
				yyn1110 = true
				goto LABEL1110
			}
		LABEL1110:
			if yyr2 || yy2arr2 {
				if yyn1110 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint16Int16 == nil {
						r.EncodeNil()
					} else {
						yy1111 := *x.FptrMapUint16Int16
						if false {
						} else {
							h.encMapuint16int16((map[uint16]int16)(yy1111), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint16Int16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint16Int16`)
				}
				r.WriteMapElemValue()
				if yyn1110 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint16Int16 == nil {
						r.EncodeNil()
					} else {
						yy1113 := *x.FptrMapUint16Int16
						if false {
						} else {
							h.encMapuint16int16((map[uint16]int16)(yy1113), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint16Int32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16int32((map[uint16]int32)(x.FMapUint16Int32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint16Int32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint16Int32`)
				}
				r.WriteMapElemValue()
				if x.FMapUint16Int32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16int32((map[uint16]int32)(x.FMapUint16Int32), e)
					}
				}
			}
			var yyn1118 bool
			if x.FptrMapUint16Int32 == nil {
				yyn1118 = true
				goto LABEL1118
			}
		LABEL1118:
			if yyr2 || yy2arr2 {
				if yyn1118 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint16Int32 == nil {
						r.EncodeNil()
					} else {
						yy1119 := *x.FptrMapUint16Int32
						if false {
						} else {
							h.encMapuint16int32((map[uint16]int32)(yy1119), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint16Int32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint16Int32`)
				}
				r.WriteMapElemValue()
				if yyn1118 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint16Int32 == nil {
						r.EncodeNil()
					} else {
						yy1121 := *x.FptrMapUint16Int32
						if false {
						} else {
							h.encMapuint16int32((map[uint16]int32)(yy1121), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint16Int64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16int64((map[uint16]int64)(x.FMapUint16Int64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint16Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint16Int64`)
				}
				r.WriteMapElemValue()
				if x.FMapUint16Int64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16int64((map[uint16]int64)(x.FMapUint16Int64), e)
					}
				}
			}
			var yyn1126 bool
			if x.FptrMapUint16Int64 == nil {
				yyn1126 = true
				goto LABEL1126
			}
		LABEL1126:
			if yyr2 || yy2arr2 {
				if yyn1126 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint16Int64 == nil {
						r.EncodeNil()
					} else {
						yy1127 := *x.FptrMapUint16Int64
						if false {
						} else {
							h.encMapuint16int64((map[uint16]int64)(yy1127), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint16Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint16Int64`)
				}
				r.WriteMapElemValue()
				if yyn1126 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint16Int64 == nil {
						r.EncodeNil()
					} else {
						yy1129 := *x.FptrMapUint16Int64
						if false {
						} else {
							h.encMapuint16int64((map[uint16]int64)(yy1129), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint16Float32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16float32((map[uint16]float32)(x.FMapUint16Float32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint16Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint16Float32`)
				}
				r.WriteMapElemValue()
				if x.FMapUint16Float32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16float32((map[uint16]float32)(x.FMapUint16Float32), e)
					}
				}
			}
			var yyn1134 bool
			if x.FptrMapUint16Float32 == nil {
				yyn1134 = true
				goto LABEL1134
			}
		LABEL1134:
			if yyr2 || yy2arr2 {
				if yyn1134 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint16Float32 == nil {
						r.EncodeNil()
					} else {
						yy1135 := *x.FptrMapUint16Float32
						if false {
						} else {
							h.encMapuint16float32((map[uint16]float32)(yy1135), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint16Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint16Float32`)
				}
				r.WriteMapElemValue()
				if yyn1134 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint16Float32 == nil {
						r.EncodeNil()
					} else {
						yy1137 := *x.FptrMapUint16Float32
						if false {
						} else {
							h.encMapuint16float32((map[uint16]float32)(yy1137), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint16Float64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16float64((map[uint16]float64)(x.FMapUint16Float64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint16Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint16Float64`)
				}
				r.WriteMapElemValue()
				if x.FMapUint16Float64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16float64((map[uint16]float64)(x.FMapUint16Float64), e)
					}
				}
			}
			var yyn1142 bool
			if x.FptrMapUint16Float64 == nil {
				yyn1142 = true
				goto LABEL1142
			}
		LABEL1142:
			if yyr2 || yy2arr2 {
				if yyn1142 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint16Float64 == nil {
						r.EncodeNil()
					} else {
						yy1143 := *x.FptrMapUint16Float64
						if false {
						} else {
							h.encMapuint16float64((map[uint16]float64)(yy1143), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint16Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint16Float64`)
				}
				r.WriteMapElemValue()
				if yyn1142 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint16Float64 == nil {
						r.EncodeNil()
					} else {
						yy1145 := *x.FptrMapUint16Float64
						if false {
						} else {
							h.encMapuint16float64((map[uint16]float64)(yy1145), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint16Bool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16bool((map[uint16]bool)(x.FMapUint16Bool), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint16Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint16Bool`)
				}
				r.WriteMapElemValue()
				if x.FMapUint16Bool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint16bool((map[uint16]bool)(x.FMapUint16Bool), e)
					}
				}
			}
			var yyn1150 bool
			if x.FptrMapUint16Bool == nil {
				yyn1150 = true
				goto LABEL1150
			}
		LABEL1150:
			if yyr2 || yy2arr2 {
				if yyn1150 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint16Bool == nil {
						r.EncodeNil()
					} else {
						yy1151 := *x.FptrMapUint16Bool
						if false {
						} else {
							h.encMapuint16bool((map[uint16]bool)(yy1151), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint16Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint16Bool`)
				}
				r.WriteMapElemValue()
				if yyn1150 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint16Bool == nil {
						r.EncodeNil()
					} else {
						yy1153 := *x.FptrMapUint16Bool
						if false {
						} else {
							h.encMapuint16bool((map[uint16]bool)(yy1153), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint32Intf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32Interface((map[uint32]interface{})(x.FMapUint32Intf), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint32Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint32Intf`)
				}
				r.WriteMapElemValue()
				if x.FMapUint32Intf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32Interface((map[uint32]interface{})(x.FMapUint32Intf), e)
					}
				}
			}
			var yyn1158 bool
			if x.FptrMapUint32Intf == nil {
				yyn1158 = true
				goto LABEL1158
			}
		LABEL1158:
			if yyr2 || yy2arr2 {
				if yyn1158 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint32Intf == nil {
						r.EncodeNil()
					} else {
						yy1159 := *x.FptrMapUint32Intf
						if false {
						} else {
							h.encMapuint32Interface((map[uint32]interface{})(yy1159), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint32Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint32Intf`)
				}
				r.WriteMapElemValue()
				if yyn1158 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint32Intf == nil {
						r.EncodeNil()
					} else {
						yy1161 := *x.FptrMapUint32Intf
						if false {
						} else {
							h.encMapuint32Interface((map[uint32]interface{})(yy1161), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint32String == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32string((map[uint32]string)(x.FMapUint32String), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint32String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint32String`)
				}
				r.WriteMapElemValue()
				if x.FMapUint32String == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32string((map[uint32]string)(x.FMapUint32String), e)
					}
				}
			}
			var yyn1166 bool
			if x.FptrMapUint32String == nil {
				yyn1166 = true
				goto LABEL1166
			}
		LABEL1166:
			if yyr2 || yy2arr2 {
				if yyn1166 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint32String == nil {
						r.EncodeNil()
					} else {
						yy1167 := *x.FptrMapUint32String
						if false {
						} else {
							h.encMapuint32string((map[uint32]string)(yy1167), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint32String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint32String`)
				}
				r.WriteMapElemValue()
				if yyn1166 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint32String == nil {
						r.EncodeNil()
					} else {
						yy1169 := *x.FptrMapUint32String
						if false {
						} else {
							h.encMapuint32string((map[uint32]string)(yy1169), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint32Uint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32uint((map[uint32]uint)(x.FMapUint32Uint), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint32Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint32Uint`)
				}
				r.WriteMapElemValue()
				if x.FMapUint32Uint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32uint((map[uint32]uint)(x.FMapUint32Uint), e)
					}
				}
			}
			var yyn1174 bool
			if x.FptrMapUint32Uint == nil {
				yyn1174 = true
				goto LABEL1174
			}
		LABEL1174:
			if yyr2 || yy2arr2 {
				if yyn1174 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint32Uint == nil {
						r.EncodeNil()
					} else {
						yy1175 := *x.FptrMapUint32Uint
						if false {
						} else {
							h.encMapuint32uint((map[uint32]uint)(yy1175), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint32Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint32Uint`)
				}
				r.WriteMapElemValue()
				if yyn1174 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint32Uint == nil {
						r.EncodeNil()
					} else {
						yy1177 := *x.FptrMapUint32Uint
						if false {
						} else {
							h.encMapuint32uint((map[uint32]uint)(yy1177), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint32Uint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32uint8((map[uint32]uint8)(x.FMapUint32Uint8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint32Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint32Uint8`)
				}
				r.WriteMapElemValue()
				if x.FMapUint32Uint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32uint8((map[uint32]uint8)(x.FMapUint32Uint8), e)
					}
				}
			}
			var yyn1182 bool
			if x.FptrMapUint32Uint8 == nil {
				yyn1182 = true
				goto LABEL1182
			}
		LABEL1182:
			if yyr2 || yy2arr2 {
				if yyn1182 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint32Uint8 == nil {
						r.EncodeNil()
					} else {
						yy1183 := *x.FptrMapUint32Uint8
						if false {
						} else {
							h.encMapuint32uint8((map[uint32]uint8)(yy1183), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint32Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint32Uint8`)
				}
				r.WriteMapElemValue()
				if yyn1182 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint32Uint8 == nil {
						r.EncodeNil()
					} else {
						yy1185 := *x.FptrMapUint32Uint8
						if false {
						} else {
							h.encMapuint32uint8((map[uint32]uint8)(yy1185), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint32Uint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32uint16((map[uint32]uint16)(x.FMapUint32Uint16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint32Uint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint32Uint16`)
				}
				r.WriteMapElemValue()
				if x.FMapUint32Uint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32uint16((map[uint32]uint16)(x.FMapUint32Uint16), e)
					}
				}
			}
			var yyn1190 bool
			if x.FptrMapUint32Uint16 == nil {
				yyn1190 = true
				goto LABEL1190
			}
		LABEL1190:
			if yyr2 || yy2arr2 {
				if yyn1190 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint32Uint16 == nil {
						r.EncodeNil()
					} else {
						yy1191 := *x.FptrMapUint32Uint16
						if false {
						} else {
							h.encMapuint32uint16((map[uint32]uint16)(yy1191), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint32Uint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint32Uint16`)
				}
				r.WriteMapElemValue()
				if yyn1190 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint32Uint16 == nil {
						r.EncodeNil()
					} else {
						yy1193 := *x.FptrMapUint32Uint16
						if false {
						} else {
							h.encMapuint32uint16((map[uint32]uint16)(yy1193), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint32Uint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32uint32((map[uint32]uint32)(x.FMapUint32Uint32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint32Uint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint32Uint32`)
				}
				r.WriteMapElemValue()
				if x.FMapUint32Uint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32uint32((map[uint32]uint32)(x.FMapUint32Uint32), e)
					}
				}
			}
			var yyn1198 bool
			if x.FptrMapUint32Uint32 == nil {
				yyn1198 = true
				goto LABEL1198
			}
		LABEL1198:
			if yyr2 || yy2arr2 {
				if yyn1198 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint32Uint32 == nil {
						r.EncodeNil()
					} else {
						yy1199 := *x.FptrMapUint32Uint32
						if false {
						} else {
							h.encMapuint32uint32((map[uint32]uint32)(yy1199), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint32Uint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint32Uint32`)
				}
				r.WriteMapElemValue()
				if yyn1198 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint32Uint32 == nil {
						r.EncodeNil()
					} else {
						yy1201 := *x.FptrMapUint32Uint32
						if false {
						} else {
							h.encMapuint32uint32((map[uint32]uint32)(yy1201), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint32Uint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32uint64((map[uint32]uint64)(x.FMapUint32Uint64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint32Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint32Uint64`)
				}
				r.WriteMapElemValue()
				if x.FMapUint32Uint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32uint64((map[uint32]uint64)(x.FMapUint32Uint64), e)
					}
				}
			}
			var yyn1206 bool
			if x.FptrMapUint32Uint64 == nil {
				yyn1206 = true
				goto LABEL1206
			}
		LABEL1206:
			if yyr2 || yy2arr2 {
				if yyn1206 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint32Uint64 == nil {
						r.EncodeNil()
					} else {
						yy1207 := *x.FptrMapUint32Uint64
						if false {
						} else {
							h.encMapuint32uint64((map[uint32]uint64)(yy1207), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint32Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint32Uint64`)
				}
				r.WriteMapElemValue()
				if yyn1206 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint32Uint64 == nil {
						r.EncodeNil()
					} else {
						yy1209 := *x.FptrMapUint32Uint64
						if false {
						} else {
							h.encMapuint32uint64((map[uint32]uint64)(yy1209), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint32Uintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32uintptr((map[uint32]uintptr)(x.FMapUint32Uintptr), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint32Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint32Uintptr`)
				}
				r.WriteMapElemValue()
				if x.FMapUint32Uintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32uintptr((map[uint32]uintptr)(x.FMapUint32Uintptr), e)
					}
				}
			}
			var yyn1214 bool
			if x.FptrMapUint32Uintptr == nil {
				yyn1214 = true
				goto LABEL1214
			}
		LABEL1214:
			if yyr2 || yy2arr2 {
				if yyn1214 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint32Uintptr == nil {
						r.EncodeNil()
					} else {
						yy1215 := *x.FptrMapUint32Uintptr
						if false {
						} else {
							h.encMapuint32uintptr((map[uint32]uintptr)(yy1215), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint32Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint32Uintptr`)
				}
				r.WriteMapElemValue()
				if yyn1214 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint32Uintptr == nil {
						r.EncodeNil()
					} else {
						yy1217 := *x.FptrMapUint32Uintptr
						if false {
						} else {
							h.encMapuint32uintptr((map[uint32]uintptr)(yy1217), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint32Int == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32int((map[uint32]int)(x.FMapUint32Int), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint32Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint32Int`)
				}
				r.WriteMapElemValue()
				if x.FMapUint32Int == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32int((map[uint32]int)(x.FMapUint32Int), e)
					}
				}
			}
			var yyn1222 bool
			if x.FptrMapUint32Int == nil {
				yyn1222 = true
				goto LABEL1222
			}
		LABEL1222:
			if yyr2 || yy2arr2 {
				if yyn1222 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint32Int == nil {
						r.EncodeNil()
					} else {
						yy1223 := *x.FptrMapUint32Int
						if false {
						} else {
							h.encMapuint32int((map[uint32]int)(yy1223), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint32Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint32Int`)
				}
				r.WriteMapElemValue()
				if yyn1222 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint32Int == nil {
						r.EncodeNil()
					} else {
						yy1225 := *x.FptrMapUint32Int
						if false {
						} else {
							h.encMapuint32int((map[uint32]int)(yy1225), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint32Int8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32int8((map[uint32]int8)(x.FMapUint32Int8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint32Int8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint32Int8`)
				}
				r.WriteMapElemValue()
				if x.FMapUint32Int8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32int8((map[uint32]int8)(x.FMapUint32Int8), e)
					}
				}
			}
			var yyn1230 bool
			if x.FptrMapUint32Int8 == nil {
				yyn1230 = true
				goto LABEL1230
			}
		LABEL1230:
			if yyr2 || yy2arr2 {
				if yyn1230 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint32Int8 == nil {
						r.EncodeNil()
					} else {
						yy1231 := *x.FptrMapUint32Int8
						if false {
						} else {
							h.encMapuint32int8((map[uint32]int8)(yy1231), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint32Int8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint32Int8`)
				}
				r.WriteMapElemValue()
				if yyn1230 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint32Int8 == nil {
						r.EncodeNil()
					} else {
						yy1233 := *x.FptrMapUint32Int8
						if false {
						} else {
							h.encMapuint32int8((map[uint32]int8)(yy1233), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint32Int16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32int16((map[uint32]int16)(x.FMapUint32Int16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint32Int16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint32Int16`)
				}
				r.WriteMapElemValue()
				if x.FMapUint32Int16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32int16((map[uint32]int16)(x.FMapUint32Int16), e)
					}
				}
			}
			var yyn1238 bool
			if x.FptrMapUint32Int16 == nil {
				yyn1238 = true
				goto LABEL1238
			}
		LABEL1238:
			if yyr2 || yy2arr2 {
				if yyn1238 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint32Int16 == nil {
						r.EncodeNil()
					} else {
						yy1239 := *x.FptrMapUint32Int16
						if false {
						} else {
							h.encMapuint32int16((map[uint32]int16)(yy1239), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint32Int16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint32Int16`)
				}
				r.WriteMapElemValue()
				if yyn1238 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint32Int16 == nil {
						r.EncodeNil()
					} else {
						yy1241 := *x.FptrMapUint32Int16
						if false {
						} else {
							h.encMapuint32int16((map[uint32]int16)(yy1241), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint32Int32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32int32((map[uint32]int32)(x.FMapUint32Int32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint32Int32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint32Int32`)
				}
				r.WriteMapElemValue()
				if x.FMapUint32Int32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32int32((map[uint32]int32)(x.FMapUint32Int32), e)
					}
				}
			}
			var yyn1246 bool
			if x.FptrMapUint32Int32 == nil {
				yyn1246 = true
				goto LABEL1246
			}
		LABEL1246:
			if yyr2 || yy2arr2 {
				if yyn1246 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint32Int32 == nil {
						r.EncodeNil()
					} else {
						yy1247 := *x.FptrMapUint32Int32
						if false {
						} else {
							h.encMapuint32int32((map[uint32]int32)(yy1247), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint32Int32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint32Int32`)
				}
				r.WriteMapElemValue()
				if yyn1246 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint32Int32 == nil {
						r.EncodeNil()
					} else {
						yy1249 := *x.FptrMapUint32Int32
						if false {
						} else {
							h.encMapuint32int32((map[uint32]int32)(yy1249), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint32Int64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32int64((map[uint32]int64)(x.FMapUint32Int64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint32Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint32Int64`)
				}
				r.WriteMapElemValue()
				if x.FMapUint32Int64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32int64((map[uint32]int64)(x.FMapUint32Int64), e)
					}
				}
			}
			var yyn1254 bool
			if x.FptrMapUint32Int64 == nil {
				yyn1254 = true
				goto LABEL1254
			}
		LABEL1254:
			if yyr2 || yy2arr2 {
				if yyn1254 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint32Int64 == nil {
						r.EncodeNil()
					} else {
						yy1255 := *x.FptrMapUint32Int64
						if false {
						} else {
							h.encMapuint32int64((map[uint32]int64)(yy1255), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint32Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint32Int64`)
				}
				r.WriteMapElemValue()
				if yyn1254 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint32Int64 == nil {
						r.EncodeNil()
					} else {
						yy1257 := *x.FptrMapUint32Int64
						if false {
						} else {
							h.encMapuint32int64((map[uint32]int64)(yy1257), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint32Float32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32float32((map[uint32]float32)(x.FMapUint32Float32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint32Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint32Float32`)
				}
				r.WriteMapElemValue()
				if x.FMapUint32Float32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32float32((map[uint32]float32)(x.FMapUint32Float32), e)
					}
				}
			}
			var yyn1262 bool
			if x.FptrMapUint32Float32 == nil {
				yyn1262 = true
				goto LABEL1262
			}
		LABEL1262:
			if yyr2 || yy2arr2 {
				if yyn1262 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint32Float32 == nil {
						r.EncodeNil()
					} else {
						yy1263 := *x.FptrMapUint32Float32
						if false {
						} else {
							h.encMapuint32float32((map[uint32]float32)(yy1263), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint32Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint32Float32`)
				}
				r.WriteMapElemValue()
				if yyn1262 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint32Float32 == nil {
						r.EncodeNil()
					} else {
						yy1265 := *x.FptrMapUint32Float32
						if false {
						} else {
							h.encMapuint32float32((map[uint32]float32)(yy1265), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint32Float64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32float64((map[uint32]float64)(x.FMapUint32Float64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint32Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint32Float64`)
				}
				r.WriteMapElemValue()
				if x.FMapUint32Float64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32float64((map[uint32]float64)(x.FMapUint32Float64), e)
					}
				}
			}
			var yyn1270 bool
			if x.FptrMapUint32Float64 == nil {
				yyn1270 = true
				goto LABEL1270
			}
		LABEL1270:
			if yyr2 || yy2arr2 {
				if yyn1270 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint32Float64 == nil {
						r.EncodeNil()
					} else {
						yy1271 := *x.FptrMapUint32Float64
						if false {
						} else {
							h.encMapuint32float64((map[uint32]float64)(yy1271), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint32Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint32Float64`)
				}
				r.WriteMapElemValue()
				if yyn1270 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint32Float64 == nil {
						r.EncodeNil()
					} else {
						yy1273 := *x.FptrMapUint32Float64
						if false {
						} else {
							h.encMapuint32float64((map[uint32]float64)(yy1273), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint32Bool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32bool((map[uint32]bool)(x.FMapUint32Bool), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint32Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint32Bool`)
				}
				r.WriteMapElemValue()
				if x.FMapUint32Bool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint32bool((map[uint32]bool)(x.FMapUint32Bool), e)
					}
				}
			}
			var yyn1278 bool
			if x.FptrMapUint32Bool == nil {
				yyn1278 = true
				goto LABEL1278
			}
		LABEL1278:
			if yyr2 || yy2arr2 {
				if yyn1278 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint32Bool == nil {
						r.EncodeNil()
					} else {
						yy1279 := *x.FptrMapUint32Bool
						if false {
						} else {
							h.encMapuint32bool((map[uint32]bool)(yy1279), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint32Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint32Bool`)
				}
				r.WriteMapElemValue()
				if yyn1278 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint32Bool == nil {
						r.EncodeNil()
					} else {
						yy1281 := *x.FptrMapUint32Bool
						if false {
						} else {
							h.encMapuint32bool((map[uint32]bool)(yy1281), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint64Intf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64Interface((map[uint64]interface{})(x.FMapUint64Intf), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Intf`)
				}
				r.WriteMapElemValue()
				if x.FMapUint64Intf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64Interface((map[uint64]interface{})(x.FMapUint64Intf), e)
					}
				}
			}
			var yyn1286 bool
			if x.FptrMapUint64Intf == nil {
				yyn1286 = true
				goto LABEL1286
			}
		LABEL1286:
			if yyr2 || yy2arr2 {
				if yyn1286 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint64Intf == nil {
						r.EncodeNil()
					} else {
						yy1287 := *x.FptrMapUint64Intf
						if false {
						} else {
							h.encMapuint64Interface((map[uint64]interface{})(yy1287), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Intf`)
				}
				r.WriteMapElemValue()
				if yyn1286 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint64Intf == nil {
						r.EncodeNil()
					} else {
						yy1289 := *x.FptrMapUint64Intf
						if false {
						} else {
							h.encMapuint64Interface((map[uint64]interface{})(yy1289), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint64String == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64string((map[uint64]string)(x.FMapUint64String), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64String`)
				}
				r.WriteMapElemValue()
				if x.FMapUint64String == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64string((map[uint64]string)(x.FMapUint64String), e)
					}
				}
			}
			var yyn1294 bool
			if x.FptrMapUint64String == nil {
				yyn1294 = true
				goto LABEL1294
			}
		LABEL1294:
			if yyr2 || yy2arr2 {
				if yyn1294 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint64String == nil {
						r.EncodeNil()
					} else {
						yy1295 := *x.FptrMapUint64String
						if false {
						} else {
							h.encMapuint64string((map[uint64]string)(yy1295), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64String`)
				}
				r.WriteMapElemValue()
				if yyn1294 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint64String == nil {
						r.EncodeNil()
					} else {
						yy1297 := *x.FptrMapUint64String
						if false {
						} else {
							h.encMapuint64string((map[uint64]string)(yy1297), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint64Uint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64uint((map[uint64]uint)(x.FMapUint64Uint), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Uint`)
				}
				r.WriteMapElemValue()
				if x.FMapUint64Uint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64uint((map[uint64]uint)(x.FMapUint64Uint), e)
					}
				}
			}
			var yyn1302 bool
			if x.FptrMapUint64Uint == nil {
				yyn1302 = true
				goto LABEL1302
			}
		LABEL1302:
			if yyr2 || yy2arr2 {
				if yyn1302 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint64Uint == nil {
						r.EncodeNil()
					} else {
						yy1303 := *x.FptrMapUint64Uint
						if false {
						} else {
							h.encMapuint64uint((map[uint64]uint)(yy1303), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Uint`)
				}
				r.WriteMapElemValue()
				if yyn1302 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint64Uint == nil {
						r.EncodeNil()
					} else {
						yy1305 := *x.FptrMapUint64Uint
						if false {
						} else {
							h.encMapuint64uint((map[uint64]uint)(yy1305), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint64Uint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64uint8((map[uint64]uint8)(x.FMapUint64Uint8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Uint8`)
				}
				r.WriteMapElemValue()
				if x.FMapUint64Uint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64uint8((map[uint64]uint8)(x.FMapUint64Uint8), e)
					}
				}
			}
			var yyn1310 bool
			if x.FptrMapUint64Uint8 == nil {
				yyn1310 = true
				goto LABEL1310
			}
		LABEL1310:
			if yyr2 || yy2arr2 {
				if yyn1310 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint64Uint8 == nil {
						r.EncodeNil()
					} else {
						yy1311 := *x.FptrMapUint64Uint8
						if false {
						} else {
							h.encMapuint64uint8((map[uint64]uint8)(yy1311), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Uint8`)
				}
				r.WriteMapElemValue()
				if yyn1310 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint64Uint8 == nil {
						r.EncodeNil()
					} else {
						yy1313 := *x.FptrMapUint64Uint8
						if false {
						} else {
							h.encMapuint64uint8((map[uint64]uint8)(yy1313), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint64Uint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64uint16((map[uint64]uint16)(x.FMapUint64Uint16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Uint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Uint16`)
				}
				r.WriteMapElemValue()
				if x.FMapUint64Uint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64uint16((map[uint64]uint16)(x.FMapUint64Uint16), e)
					}
				}
			}
			var yyn1318 bool
			if x.FptrMapUint64Uint16 == nil {
				yyn1318 = true
				goto LABEL1318
			}
		LABEL1318:
			if yyr2 || yy2arr2 {
				if yyn1318 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint64Uint16 == nil {
						r.EncodeNil()
					} else {
						yy1319 := *x.FptrMapUint64Uint16
						if false {
						} else {
							h.encMapuint64uint16((map[uint64]uint16)(yy1319), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Uint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Uint16`)
				}
				r.WriteMapElemValue()
				if yyn1318 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint64Uint16 == nil {
						r.EncodeNil()
					} else {
						yy1321 := *x.FptrMapUint64Uint16
						if false {
						} else {
							h.encMapuint64uint16((map[uint64]uint16)(yy1321), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint64Uint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64uint32((map[uint64]uint32)(x.FMapUint64Uint32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Uint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Uint32`)
				}
				r.WriteMapElemValue()
				if x.FMapUint64Uint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64uint32((map[uint64]uint32)(x.FMapUint64Uint32), e)
					}
				}
			}
			var yyn1326 bool
			if x.FptrMapUint64Uint32 == nil {
				yyn1326 = true
				goto LABEL1326
			}
		LABEL1326:
			if yyr2 || yy2arr2 {
				if yyn1326 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint64Uint32 == nil {
						r.EncodeNil()
					} else {
						yy1327 := *x.FptrMapUint64Uint32
						if false {
						} else {
							h.encMapuint64uint32((map[uint64]uint32)(yy1327), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Uint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Uint32`)
				}
				r.WriteMapElemValue()
				if yyn1326 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint64Uint32 == nil {
						r.EncodeNil()
					} else {
						yy1329 := *x.FptrMapUint64Uint32
						if false {
						} else {
							h.encMapuint64uint32((map[uint64]uint32)(yy1329), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint64Uint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64uint64((map[uint64]uint64)(x.FMapUint64Uint64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Uint64`)
				}
				r.WriteMapElemValue()
				if x.FMapUint64Uint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64uint64((map[uint64]uint64)(x.FMapUint64Uint64), e)
					}
				}
			}
			var yyn1334 bool
			if x.FptrMapUint64Uint64 == nil {
				yyn1334 = true
				goto LABEL1334
			}
		LABEL1334:
			if yyr2 || yy2arr2 {
				if yyn1334 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint64Uint64 == nil {
						r.EncodeNil()
					} else {
						yy1335 := *x.FptrMapUint64Uint64
						if false {
						} else {
							h.encMapuint64uint64((map[uint64]uint64)(yy1335), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Uint64`)
				}
				r.WriteMapElemValue()
				if yyn1334 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint64Uint64 == nil {
						r.EncodeNil()
					} else {
						yy1337 := *x.FptrMapUint64Uint64
						if false {
						} else {
							h.encMapuint64uint64((map[uint64]uint64)(yy1337), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint64Uintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64uintptr((map[uint64]uintptr)(x.FMapUint64Uintptr), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Uintptr`)
				}
				r.WriteMapElemValue()
				if x.FMapUint64Uintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64uintptr((map[uint64]uintptr)(x.FMapUint64Uintptr), e)
					}
				}
			}
			var yyn1342 bool
			if x.FptrMapUint64Uintptr == nil {
				yyn1342 = true
				goto LABEL1342
			}
		LABEL1342:
			if yyr2 || yy2arr2 {
				if yyn1342 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint64Uintptr == nil {
						r.EncodeNil()
					} else {
						yy1343 := *x.FptrMapUint64Uintptr
						if false {
						} else {
							h.encMapuint64uintptr((map[uint64]uintptr)(yy1343), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Uintptr`)
				}
				r.WriteMapElemValue()
				if yyn1342 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint64Uintptr == nil {
						r.EncodeNil()
					} else {
						yy1345 := *x.FptrMapUint64Uintptr
						if false {
						} else {
							h.encMapuint64uintptr((map[uint64]uintptr)(yy1345), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint64Int == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64int((map[uint64]int)(x.FMapUint64Int), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Int`)
				}
				r.WriteMapElemValue()
				if x.FMapUint64Int == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64int((map[uint64]int)(x.FMapUint64Int), e)
					}
				}
			}
			var yyn1350 bool
			if x.FptrMapUint64Int == nil {
				yyn1350 = true
				goto LABEL1350
			}
		LABEL1350:
			if yyr2 || yy2arr2 {
				if yyn1350 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint64Int == nil {
						r.EncodeNil()
					} else {
						yy1351 := *x.FptrMapUint64Int
						if false {
						} else {
							h.encMapuint64int((map[uint64]int)(yy1351), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Int`)
				}
				r.WriteMapElemValue()
				if yyn1350 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint64Int == nil {
						r.EncodeNil()
					} else {
						yy1353 := *x.FptrMapUint64Int
						if false {
						} else {
							h.encMapuint64int((map[uint64]int)(yy1353), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint64Int8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64int8((map[uint64]int8)(x.FMapUint64Int8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Int8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Int8`)
				}
				r.WriteMapElemValue()
				if x.FMapUint64Int8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64int8((map[uint64]int8)(x.FMapUint64Int8), e)
					}
				}
			}
			var yyn1358 bool
			if x.FptrMapUint64Int8 == nil {
				yyn1358 = true
				goto LABEL1358
			}
		LABEL1358:
			if yyr2 || yy2arr2 {
				if yyn1358 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint64Int8 == nil {
						r.EncodeNil()
					} else {
						yy1359 := *x.FptrMapUint64Int8
						if false {
						} else {
							h.encMapuint64int8((map[uint64]int8)(yy1359), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Int8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Int8`)
				}
				r.WriteMapElemValue()
				if yyn1358 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint64Int8 == nil {
						r.EncodeNil()
					} else {
						yy1361 := *x.FptrMapUint64Int8
						if false {
						} else {
							h.encMapuint64int8((map[uint64]int8)(yy1361), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint64Int16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64int16((map[uint64]int16)(x.FMapUint64Int16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Int16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Int16`)
				}
				r.WriteMapElemValue()
				if x.FMapUint64Int16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64int16((map[uint64]int16)(x.FMapUint64Int16), e)
					}
				}
			}
			var yyn1366 bool
			if x.FptrMapUint64Int16 == nil {
				yyn1366 = true
				goto LABEL1366
			}
		LABEL1366:
			if yyr2 || yy2arr2 {
				if yyn1366 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint64Int16 == nil {
						r.EncodeNil()
					} else {
						yy1367 := *x.FptrMapUint64Int16
						if false {
						} else {
							h.encMapuint64int16((map[uint64]int16)(yy1367), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Int16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Int16`)
				}
				r.WriteMapElemValue()
				if yyn1366 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint64Int16 == nil {
						r.EncodeNil()
					} else {
						yy1369 := *x.FptrMapUint64Int16
						if false {
						} else {
							h.encMapuint64int16((map[uint64]int16)(yy1369), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint64Int32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64int32((map[uint64]int32)(x.FMapUint64Int32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Int32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Int32`)
				}
				r.WriteMapElemValue()
				if x.FMapUint64Int32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64int32((map[uint64]int32)(x.FMapUint64Int32), e)
					}
				}
			}
			var yyn1374 bool
			if x.FptrMapUint64Int32 == nil {
				yyn1374 = true
				goto LABEL1374
			}
		LABEL1374:
			if yyr2 || yy2arr2 {
				if yyn1374 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint64Int32 == nil {
						r.EncodeNil()
					} else {
						yy1375 := *x.FptrMapUint64Int32
						if false {
						} else {
							h.encMapuint64int32((map[uint64]int32)(yy1375), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Int32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Int32`)
				}
				r.WriteMapElemValue()
				if yyn1374 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint64Int32 == nil {
						r.EncodeNil()
					} else {
						yy1377 := *x.FptrMapUint64Int32
						if false {
						} else {
							h.encMapuint64int32((map[uint64]int32)(yy1377), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint64Int64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64int64((map[uint64]int64)(x.FMapUint64Int64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Int64`)
				}
				r.WriteMapElemValue()
				if x.FMapUint64Int64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64int64((map[uint64]int64)(x.FMapUint64Int64), e)
					}
				}
			}
			var yyn1382 bool
			if x.FptrMapUint64Int64 == nil {
				yyn1382 = true
				goto LABEL1382
			}
		LABEL1382:
			if yyr2 || yy2arr2 {
				if yyn1382 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint64Int64 == nil {
						r.EncodeNil()
					} else {
						yy1383 := *x.FptrMapUint64Int64
						if false {
						} else {
							h.encMapuint64int64((map[uint64]int64)(yy1383), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Int64`)
				}
				r.WriteMapElemValue()
				if yyn1382 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint64Int64 == nil {
						r.EncodeNil()
					} else {
						yy1385 := *x.FptrMapUint64Int64
						if false {
						} else {
							h.encMapuint64int64((map[uint64]int64)(yy1385), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint64Float32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64float32((map[uint64]float32)(x.FMapUint64Float32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Float32`)
				}
				r.WriteMapElemValue()
				if x.FMapUint64Float32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64float32((map[uint64]float32)(x.FMapUint64Float32), e)
					}
				}
			}
			var yyn1390 bool
			if x.FptrMapUint64Float32 == nil {
				yyn1390 = true
				goto LABEL1390
			}
		LABEL1390:
			if yyr2 || yy2arr2 {
				if yyn1390 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint64Float32 == nil {
						r.EncodeNil()
					} else {
						yy1391 := *x.FptrMapUint64Float32
						if false {
						} else {
							h.encMapuint64float32((map[uint64]float32)(yy1391), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Float32`)
				}
				r.WriteMapElemValue()
				if yyn1390 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint64Float32 == nil {
						r.EncodeNil()
					} else {
						yy1393 := *x.FptrMapUint64Float32
						if false {
						} else {
							h.encMapuint64float32((map[uint64]float32)(yy1393), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint64Float64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64float64((map[uint64]float64)(x.FMapUint64Float64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Float64`)
				}
				r.WriteMapElemValue()
				if x.FMapUint64Float64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64float64((map[uint64]float64)(x.FMapUint64Float64), e)
					}
				}
			}
			var yyn1398 bool
			if x.FptrMapUint64Float64 == nil {
				yyn1398 = true
				goto LABEL1398
			}
		LABEL1398:
			if yyr2 || yy2arr2 {
				if yyn1398 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint64Float64 == nil {
						r.EncodeNil()
					} else {
						yy1399 := *x.FptrMapUint64Float64
						if false {
						} else {
							h.encMapuint64float64((map[uint64]float64)(yy1399), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Float64`)
				}
				r.WriteMapElemValue()
				if yyn1398 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint64Float64 == nil {
						r.EncodeNil()
					} else {
						yy1401 := *x.FptrMapUint64Float64
						if false {
						} else {
							h.encMapuint64float64((map[uint64]float64)(yy1401), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUint64Bool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64bool((map[uint64]bool)(x.FMapUint64Bool), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUint64Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUint64Bool`)
				}
				r.WriteMapElemValue()
				if x.FMapUint64Bool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuint64bool((map[uint64]bool)(x.FMapUint64Bool), e)
					}
				}
			}
			var yyn1406 bool
			if x.FptrMapUint64Bool == nil {
				yyn1406 = true
				goto LABEL1406
			}
		LABEL1406:
			if yyr2 || yy2arr2 {
				if yyn1406 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUint64Bool == nil {
						r.EncodeNil()
					} else {
						yy1407 := *x.FptrMapUint64Bool
						if false {
						} else {
							h.encMapuint64bool((map[uint64]bool)(yy1407), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUint64Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUint64Bool`)
				}
				r.WriteMapElemValue()
				if yyn1406 {
					r.EncodeNil()
				} else {
					if x.FptrMapUint64Bool == nil {
						r.EncodeNil()
					} else {
						yy1409 := *x.FptrMapUint64Bool
						if false {
						} else {
							h.encMapuint64bool((map[uint64]bool)(yy1409), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintptrIntf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptrInterface((map[uintptr]interface{})(x.FMapUintptrIntf), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintptrIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintptrIntf`)
				}
				r.WriteMapElemValue()
				if x.FMapUintptrIntf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptrInterface((map[uintptr]interface{})(x.FMapUintptrIntf), e)
					}
				}
			}
			var yyn1414 bool
			if x.FptrMapUintptrIntf == nil {
				yyn1414 = true
				goto LABEL1414
			}
		LABEL1414:
			if yyr2 || yy2arr2 {
				if yyn1414 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintptrIntf == nil {
						r.EncodeNil()
					} else {
						yy1415 := *x.FptrMapUintptrIntf
						if false {
						} else {
							h.encMapuintptrInterface((map[uintptr]interface{})(yy1415), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintptrIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintptrIntf`)
				}
				r.WriteMapElemValue()
				if yyn1414 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintptrIntf == nil {
						r.EncodeNil()
					} else {
						yy1417 := *x.FptrMapUintptrIntf
						if false {
						} else {
							h.encMapuintptrInterface((map[uintptr]interface{})(yy1417), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintptrString == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptrstring((map[uintptr]string)(x.FMapUintptrString), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintptrString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintptrString`)
				}
				r.WriteMapElemValue()
				if x.FMapUintptrString == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptrstring((map[uintptr]string)(x.FMapUintptrString), e)
					}
				}
			}
			var yyn1422 bool
			if x.FptrMapUintptrString == nil {
				yyn1422 = true
				goto LABEL1422
			}
		LABEL1422:
			if yyr2 || yy2arr2 {
				if yyn1422 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintptrString == nil {
						r.EncodeNil()
					} else {
						yy1423 := *x.FptrMapUintptrString
						if false {
						} else {
							h.encMapuintptrstring((map[uintptr]string)(yy1423), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintptrString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintptrString`)
				}
				r.WriteMapElemValue()
				if yyn1422 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintptrString == nil {
						r.EncodeNil()
					} else {
						yy1425 := *x.FptrMapUintptrString
						if false {
						} else {
							h.encMapuintptrstring((map[uintptr]string)(yy1425), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintptrUint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptruint((map[uintptr]uint)(x.FMapUintptrUint), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintptrUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintptrUint`)
				}
				r.WriteMapElemValue()
				if x.FMapUintptrUint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptruint((map[uintptr]uint)(x.FMapUintptrUint), e)
					}
				}
			}
			var yyn1430 bool
			if x.FptrMapUintptrUint == nil {
				yyn1430 = true
				goto LABEL1430
			}
		LABEL1430:
			if yyr2 || yy2arr2 {
				if yyn1430 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintptrUint == nil {
						r.EncodeNil()
					} else {
						yy1431 := *x.FptrMapUintptrUint
						if false {
						} else {
							h.encMapuintptruint((map[uintptr]uint)(yy1431), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintptrUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintptrUint`)
				}
				r.WriteMapElemValue()
				if yyn1430 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintptrUint == nil {
						r.EncodeNil()
					} else {
						yy1433 := *x.FptrMapUintptrUint
						if false {
						} else {
							h.encMapuintptruint((map[uintptr]uint)(yy1433), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintptrUint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptruint8((map[uintptr]uint8)(x.FMapUintptrUint8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintptrUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintptrUint8`)
				}
				r.WriteMapElemValue()
				if x.FMapUintptrUint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptruint8((map[uintptr]uint8)(x.FMapUintptrUint8), e)
					}
				}
			}
			var yyn1438 bool
			if x.FptrMapUintptrUint8 == nil {
				yyn1438 = true
				goto LABEL1438
			}
		LABEL1438:
			if yyr2 || yy2arr2 {
				if yyn1438 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintptrUint8 == nil {
						r.EncodeNil()
					} else {
						yy1439 := *x.FptrMapUintptrUint8
						if false {
						} else {
							h.encMapuintptruint8((map[uintptr]uint8)(yy1439), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintptrUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintptrUint8`)
				}
				r.WriteMapElemValue()
				if yyn1438 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintptrUint8 == nil {
						r.EncodeNil()
					} else {
						yy1441 := *x.FptrMapUintptrUint8
						if false {
						} else {
							h.encMapuintptruint8((map[uintptr]uint8)(yy1441), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintptrUint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptruint16((map[uintptr]uint16)(x.FMapUintptrUint16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintptrUint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintptrUint16`)
				}
				r.WriteMapElemValue()
				if x.FMapUintptrUint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptruint16((map[uintptr]uint16)(x.FMapUintptrUint16), e)
					}
				}
			}
			var yyn1446 bool
			if x.FptrMapUintptrUint16 == nil {
				yyn1446 = true
				goto LABEL1446
			}
		LABEL1446:
			if yyr2 || yy2arr2 {
				if yyn1446 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintptrUint16 == nil {
						r.EncodeNil()
					} else {
						yy1447 := *x.FptrMapUintptrUint16
						if false {
						} else {
							h.encMapuintptruint16((map[uintptr]uint16)(yy1447), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintptrUint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintptrUint16`)
				}
				r.WriteMapElemValue()
				if yyn1446 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintptrUint16 == nil {
						r.EncodeNil()
					} else {
						yy1449 := *x.FptrMapUintptrUint16
						if false {
						} else {
							h.encMapuintptruint16((map[uintptr]uint16)(yy1449), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintptrUint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptruint32((map[uintptr]uint32)(x.FMapUintptrUint32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintptrUint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintptrUint32`)
				}
				r.WriteMapElemValue()
				if x.FMapUintptrUint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptruint32((map[uintptr]uint32)(x.FMapUintptrUint32), e)
					}
				}
			}
			var yyn1454 bool
			if x.FptrMapUintptrUint32 == nil {
				yyn1454 = true
				goto LABEL1454
			}
		LABEL1454:
			if yyr2 || yy2arr2 {
				if yyn1454 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintptrUint32 == nil {
						r.EncodeNil()
					} else {
						yy1455 := *x.FptrMapUintptrUint32
						if false {
						} else {
							h.encMapuintptruint32((map[uintptr]uint32)(yy1455), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintptrUint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintptrUint32`)
				}
				r.WriteMapElemValue()
				if yyn1454 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintptrUint32 == nil {
						r.EncodeNil()
					} else {
						yy1457 := *x.FptrMapUintptrUint32
						if false {
						} else {
							h.encMapuintptruint32((map[uintptr]uint32)(yy1457), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintptrUint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptruint64((map[uintptr]uint64)(x.FMapUintptrUint64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintptrUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintptrUint64`)
				}
				r.WriteMapElemValue()
				if x.FMapUintptrUint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptruint64((map[uintptr]uint64)(x.FMapUintptrUint64), e)
					}
				}
			}
			var yyn1462 bool
			if x.FptrMapUintptrUint64 == nil {
				yyn1462 = true
				goto LABEL1462
			}
		LABEL1462:
			if yyr2 || yy2arr2 {
				if yyn1462 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintptrUint64 == nil {
						r.EncodeNil()
					} else {
						yy1463 := *x.FptrMapUintptrUint64
						if false {
						} else {
							h.encMapuintptruint64((map[uintptr]uint64)(yy1463), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintptrUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintptrUint64`)
				}
				r.WriteMapElemValue()
				if yyn1462 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintptrUint64 == nil {
						r.EncodeNil()
					} else {
						yy1465 := *x.FptrMapUintptrUint64
						if false {
						} else {
							h.encMapuintptruint64((map[uintptr]uint64)(yy1465), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintptrUintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptruintptr((map[uintptr]uintptr)(x.FMapUintptrUintptr), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintptrUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintptrUintptr`)
				}
				r.WriteMapElemValue()
				if x.FMapUintptrUintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptruintptr((map[uintptr]uintptr)(x.FMapUintptrUintptr), e)
					}
				}
			}
			var yyn1470 bool
			if x.FptrMapUintptrUintptr == nil {
				yyn1470 = true
				goto LABEL1470
			}
		LABEL1470:
			if yyr2 || yy2arr2 {
				if yyn1470 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintptrUintptr == nil {
						r.EncodeNil()
					} else {
						yy1471 := *x.FptrMapUintptrUintptr
						if false {
						} else {
							h.encMapuintptruintptr((map[uintptr]uintptr)(yy1471), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintptrUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintptrUintptr`)
				}
				r.WriteMapElemValue()
				if yyn1470 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintptrUintptr == nil {
						r.EncodeNil()
					} else {
						yy1473 := *x.FptrMapUintptrUintptr
						if false {
						} else {
							h.encMapuintptruintptr((map[uintptr]uintptr)(yy1473), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintptrInt == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptrint((map[uintptr]int)(x.FMapUintptrInt), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintptrInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintptrInt`)
				}
				r.WriteMapElemValue()
				if x.FMapUintptrInt == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptrint((map[uintptr]int)(x.FMapUintptrInt), e)
					}
				}
			}
			var yyn1478 bool
			if x.FptrMapUintptrInt == nil {
				yyn1478 = true
				goto LABEL1478
			}
		LABEL1478:
			if yyr2 || yy2arr2 {
				if yyn1478 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintptrInt == nil {
						r.EncodeNil()
					} else {
						yy1479 := *x.FptrMapUintptrInt
						if false {
						} else {
							h.encMapuintptrint((map[uintptr]int)(yy1479), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintptrInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintptrInt`)
				}
				r.WriteMapElemValue()
				if yyn1478 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintptrInt == nil {
						r.EncodeNil()
					} else {
						yy1481 := *x.FptrMapUintptrInt
						if false {
						} else {
							h.encMapuintptrint((map[uintptr]int)(yy1481), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintptrInt8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptrint8((map[uintptr]int8)(x.FMapUintptrInt8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintptrInt8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintptrInt8`)
				}
				r.WriteMapElemValue()
				if x.FMapUintptrInt8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptrint8((map[uintptr]int8)(x.FMapUintptrInt8), e)
					}
				}
			}
			var yyn1486 bool
			if x.FptrMapUintptrInt8 == nil {
				yyn1486 = true
				goto LABEL1486
			}
		LABEL1486:
			if yyr2 || yy2arr2 {
				if yyn1486 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintptrInt8 == nil {
						r.EncodeNil()
					} else {
						yy1487 := *x.FptrMapUintptrInt8
						if false {
						} else {
							h.encMapuintptrint8((map[uintptr]int8)(yy1487), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintptrInt8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintptrInt8`)
				}
				r.WriteMapElemValue()
				if yyn1486 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintptrInt8 == nil {
						r.EncodeNil()
					} else {
						yy1489 := *x.FptrMapUintptrInt8
						if false {
						} else {
							h.encMapuintptrint8((map[uintptr]int8)(yy1489), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintptrInt16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptrint16((map[uintptr]int16)(x.FMapUintptrInt16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintptrInt16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintptrInt16`)
				}
				r.WriteMapElemValue()
				if x.FMapUintptrInt16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptrint16((map[uintptr]int16)(x.FMapUintptrInt16), e)
					}
				}
			}
			var yyn1494 bool
			if x.FptrMapUintptrInt16 == nil {
				yyn1494 = true
				goto LABEL1494
			}
		LABEL1494:
			if yyr2 || yy2arr2 {
				if yyn1494 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintptrInt16 == nil {
						r.EncodeNil()
					} else {
						yy1495 := *x.FptrMapUintptrInt16
						if false {
						} else {
							h.encMapuintptrint16((map[uintptr]int16)(yy1495), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintptrInt16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintptrInt16`)
				}
				r.WriteMapElemValue()
				if yyn1494 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintptrInt16 == nil {
						r.EncodeNil()
					} else {
						yy1497 := *x.FptrMapUintptrInt16
						if false {
						} else {
							h.encMapuintptrint16((map[uintptr]int16)(yy1497), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintptrInt32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptrint32((map[uintptr]int32)(x.FMapUintptrInt32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintptrInt32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintptrInt32`)
				}
				r.WriteMapElemValue()
				if x.FMapUintptrInt32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptrint32((map[uintptr]int32)(x.FMapUintptrInt32), e)
					}
				}
			}
			var yyn1502 bool
			if x.FptrMapUintptrInt32 == nil {
				yyn1502 = true
				goto LABEL1502
			}
		LABEL1502:
			if yyr2 || yy2arr2 {
				if yyn1502 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintptrInt32 == nil {
						r.EncodeNil()
					} else {
						yy1503 := *x.FptrMapUintptrInt32
						if false {
						} else {
							h.encMapuintptrint32((map[uintptr]int32)(yy1503), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintptrInt32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintptrInt32`)
				}
				r.WriteMapElemValue()
				if yyn1502 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintptrInt32 == nil {
						r.EncodeNil()
					} else {
						yy1505 := *x.FptrMapUintptrInt32
						if false {
						} else {
							h.encMapuintptrint32((map[uintptr]int32)(yy1505), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintptrInt64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptrint64((map[uintptr]int64)(x.FMapUintptrInt64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintptrInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintptrInt64`)
				}
				r.WriteMapElemValue()
				if x.FMapUintptrInt64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptrint64((map[uintptr]int64)(x.FMapUintptrInt64), e)
					}
				}
			}
			var yyn1510 bool
			if x.FptrMapUintptrInt64 == nil {
				yyn1510 = true
				goto LABEL1510
			}
		LABEL1510:
			if yyr2 || yy2arr2 {
				if yyn1510 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintptrInt64 == nil {
						r.EncodeNil()
					} else {
						yy1511 := *x.FptrMapUintptrInt64
						if false {
						} else {
							h.encMapuintptrint64((map[uintptr]int64)(yy1511), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintptrInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintptrInt64`)
				}
				r.WriteMapElemValue()
				if yyn1510 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintptrInt64 == nil {
						r.EncodeNil()
					} else {
						yy1513 := *x.FptrMapUintptrInt64
						if false {
						} else {
							h.encMapuintptrint64((map[uintptr]int64)(yy1513), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintptrFloat32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptrfloat32((map[uintptr]float32)(x.FMapUintptrFloat32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintptrFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintptrFloat32`)
				}
				r.WriteMapElemValue()
				if x.FMapUintptrFloat32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptrfloat32((map[uintptr]float32)(x.FMapUintptrFloat32), e)
					}
				}
			}
			var yyn1518 bool
			if x.FptrMapUintptrFloat32 == nil {
				yyn1518 = true
				goto LABEL1518
			}
		LABEL1518:
			if yyr2 || yy2arr2 {
				if yyn1518 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintptrFloat32 == nil {
						r.EncodeNil()
					} else {
						yy1519 := *x.FptrMapUintptrFloat32
						if false {
						} else {
							h.encMapuintptrfloat32((map[uintptr]float32)(yy1519), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintptrFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintptrFloat32`)
				}
				r.WriteMapElemValue()
				if yyn1518 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintptrFloat32 == nil {
						r.EncodeNil()
					} else {
						yy1521 := *x.FptrMapUintptrFloat32
						if false {
						} else {
							h.encMapuintptrfloat32((map[uintptr]float32)(yy1521), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintptrFloat64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptrfloat64((map[uintptr]float64)(x.FMapUintptrFloat64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintptrFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintptrFloat64`)
				}
				r.WriteMapElemValue()
				if x.FMapUintptrFloat64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptrfloat64((map[uintptr]float64)(x.FMapUintptrFloat64), e)
					}
				}
			}
			var yyn1526 bool
			if x.FptrMapUintptrFloat64 == nil {
				yyn1526 = true
				goto LABEL1526
			}
		LABEL1526:
			if yyr2 || yy2arr2 {
				if yyn1526 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintptrFloat64 == nil {
						r.EncodeNil()
					} else {
						yy1527 := *x.FptrMapUintptrFloat64
						if false {
						} else {
							h.encMapuintptrfloat64((map[uintptr]float64)(yy1527), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintptrFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintptrFloat64`)
				}
				r.WriteMapElemValue()
				if yyn1526 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintptrFloat64 == nil {
						r.EncodeNil()
					} else {
						yy1529 := *x.FptrMapUintptrFloat64
						if false {
						} else {
							h.encMapuintptrfloat64((map[uintptr]float64)(yy1529), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapUintptrBool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptrbool((map[uintptr]bool)(x.FMapUintptrBool), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapUintptrBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapUintptrBool`)
				}
				r.WriteMapElemValue()
				if x.FMapUintptrBool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapuintptrbool((map[uintptr]bool)(x.FMapUintptrBool), e)
					}
				}
			}
			var yyn1534 bool
			if x.FptrMapUintptrBool == nil {
				yyn1534 = true
				goto LABEL1534
			}
		LABEL1534:
			if yyr2 || yy2arr2 {
				if yyn1534 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapUintptrBool == nil {
						r.EncodeNil()
					} else {
						yy1535 := *x.FptrMapUintptrBool
						if false {
						} else {
							h.encMapuintptrbool((map[uintptr]bool)(yy1535), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapUintptrBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapUintptrBool`)
				}
				r.WriteMapElemValue()
				if yyn1534 {
					r.EncodeNil()
				} else {
					if x.FptrMapUintptrBool == nil {
						r.EncodeNil()
					} else {
						yy1537 := *x.FptrMapUintptrBool
						if false {
						} else {
							h.encMapuintptrbool((map[uintptr]bool)(yy1537), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntIntf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintInterface((map[int]interface{})(x.FMapIntIntf), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntIntf`)
				}
				r.WriteMapElemValue()
				if x.FMapIntIntf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintInterface((map[int]interface{})(x.FMapIntIntf), e)
					}
				}
			}
			var yyn1542 bool
			if x.FptrMapIntIntf == nil {
				yyn1542 = true
				goto LABEL1542
			}
		LABEL1542:
			if yyr2 || yy2arr2 {
				if yyn1542 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntIntf == nil {
						r.EncodeNil()
					} else {
						yy1543 := *x.FptrMapIntIntf
						if false {
						} else {
							h.encMapintInterface((map[int]interface{})(yy1543), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntIntf`)
				}
				r.WriteMapElemValue()
				if yyn1542 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntIntf == nil {
						r.EncodeNil()
					} else {
						yy1545 := *x.FptrMapIntIntf
						if false {
						} else {
							h.encMapintInterface((map[int]interface{})(yy1545), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntString == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintstring((map[int]string)(x.FMapIntString), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntString`)
				}
				r.WriteMapElemValue()
				if x.FMapIntString == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintstring((map[int]string)(x.FMapIntString), e)
					}
				}
			}
			var yyn1550 bool
			if x.FptrMapIntString == nil {
				yyn1550 = true
				goto LABEL1550
			}
		LABEL1550:
			if yyr2 || yy2arr2 {
				if yyn1550 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntString == nil {
						r.EncodeNil()
					} else {
						yy1551 := *x.FptrMapIntString
						if false {
						} else {
							h.encMapintstring((map[int]string)(yy1551), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntString`)
				}
				r.WriteMapElemValue()
				if yyn1550 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntString == nil {
						r.EncodeNil()
					} else {
						yy1553 := *x.FptrMapIntString
						if false {
						} else {
							h.encMapintstring((map[int]string)(yy1553), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntUint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintuint((map[int]uint)(x.FMapIntUint), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntUint`)
				}
				r.WriteMapElemValue()
				if x.FMapIntUint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintuint((map[int]uint)(x.FMapIntUint), e)
					}
				}
			}
			var yyn1558 bool
			if x.FptrMapIntUint == nil {
				yyn1558 = true
				goto LABEL1558
			}
		LABEL1558:
			if yyr2 || yy2arr2 {
				if yyn1558 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntUint == nil {
						r.EncodeNil()
					} else {
						yy1559 := *x.FptrMapIntUint
						if false {
						} else {
							h.encMapintuint((map[int]uint)(yy1559), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntUint`)
				}
				r.WriteMapElemValue()
				if yyn1558 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntUint == nil {
						r.EncodeNil()
					} else {
						yy1561 := *x.FptrMapIntUint
						if false {
						} else {
							h.encMapintuint((map[int]uint)(yy1561), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntUint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintuint8((map[int]uint8)(x.FMapIntUint8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntUint8`)
				}
				r.WriteMapElemValue()
				if x.FMapIntUint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintuint8((map[int]uint8)(x.FMapIntUint8), e)
					}
				}
			}
			var yyn1566 bool
			if x.FptrMapIntUint8 == nil {
				yyn1566 = true
				goto LABEL1566
			}
		LABEL1566:
			if yyr2 || yy2arr2 {
				if yyn1566 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntUint8 == nil {
						r.EncodeNil()
					} else {
						yy1567 := *x.FptrMapIntUint8
						if false {
						} else {
							h.encMapintuint8((map[int]uint8)(yy1567), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntUint8`)
				}
				r.WriteMapElemValue()
				if yyn1566 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntUint8 == nil {
						r.EncodeNil()
					} else {
						yy1569 := *x.FptrMapIntUint8
						if false {
						} else {
							h.encMapintuint8((map[int]uint8)(yy1569), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntUint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintuint16((map[int]uint16)(x.FMapIntUint16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntUint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntUint16`)
				}
				r.WriteMapElemValue()
				if x.FMapIntUint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintuint16((map[int]uint16)(x.FMapIntUint16), e)
					}
				}
			}
			var yyn1574 bool
			if x.FptrMapIntUint16 == nil {
				yyn1574 = true
				goto LABEL1574
			}
		LABEL1574:
			if yyr2 || yy2arr2 {
				if yyn1574 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntUint16 == nil {
						r.EncodeNil()
					} else {
						yy1575 := *x.FptrMapIntUint16
						if false {
						} else {
							h.encMapintuint16((map[int]uint16)(yy1575), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntUint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntUint16`)
				}
				r.WriteMapElemValue()
				if yyn1574 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntUint16 == nil {
						r.EncodeNil()
					} else {
						yy1577 := *x.FptrMapIntUint16
						if false {
						} else {
							h.encMapintuint16((map[int]uint16)(yy1577), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntUint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintuint32((map[int]uint32)(x.FMapIntUint32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntUint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntUint32`)
				}
				r.WriteMapElemValue()
				if x.FMapIntUint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintuint32((map[int]uint32)(x.FMapIntUint32), e)
					}
				}
			}
			var yyn1582 bool
			if x.FptrMapIntUint32 == nil {
				yyn1582 = true
				goto LABEL1582
			}
		LABEL1582:
			if yyr2 || yy2arr2 {
				if yyn1582 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntUint32 == nil {
						r.EncodeNil()
					} else {
						yy1583 := *x.FptrMapIntUint32
						if false {
						} else {
							h.encMapintuint32((map[int]uint32)(yy1583), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntUint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntUint32`)
				}
				r.WriteMapElemValue()
				if yyn1582 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntUint32 == nil {
						r.EncodeNil()
					} else {
						yy1585 := *x.FptrMapIntUint32
						if false {
						} else {
							h.encMapintuint32((map[int]uint32)(yy1585), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntUint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintuint64((map[int]uint64)(x.FMapIntUint64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntUint64`)
				}
				r.WriteMapElemValue()
				if x.FMapIntUint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintuint64((map[int]uint64)(x.FMapIntUint64), e)
					}
				}
			}
			var yyn1590 bool
			if x.FptrMapIntUint64 == nil {
				yyn1590 = true
				goto LABEL1590
			}
		LABEL1590:
			if yyr2 || yy2arr2 {
				if yyn1590 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntUint64 == nil {
						r.EncodeNil()
					} else {
						yy1591 := *x.FptrMapIntUint64
						if false {
						} else {
							h.encMapintuint64((map[int]uint64)(yy1591), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntUint64`)
				}
				r.WriteMapElemValue()
				if yyn1590 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntUint64 == nil {
						r.EncodeNil()
					} else {
						yy1593 := *x.FptrMapIntUint64
						if false {
						} else {
							h.encMapintuint64((map[int]uint64)(yy1593), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntUintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintuintptr((map[int]uintptr)(x.FMapIntUintptr), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntUintptr`)
				}
				r.WriteMapElemValue()
				if x.FMapIntUintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintuintptr((map[int]uintptr)(x.FMapIntUintptr), e)
					}
				}
			}
			var yyn1598 bool
			if x.FptrMapIntUintptr == nil {
				yyn1598 = true
				goto LABEL1598
			}
		LABEL1598:
			if yyr2 || yy2arr2 {
				if yyn1598 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntUintptr == nil {
						r.EncodeNil()
					} else {
						yy1599 := *x.FptrMapIntUintptr
						if false {
						} else {
							h.encMapintuintptr((map[int]uintptr)(yy1599), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntUintptr`)
				}
				r.WriteMapElemValue()
				if yyn1598 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntUintptr == nil {
						r.EncodeNil()
					} else {
						yy1601 := *x.FptrMapIntUintptr
						if false {
						} else {
							h.encMapintuintptr((map[int]uintptr)(yy1601), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntInt == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintint((map[int]int)(x.FMapIntInt), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntInt`)
				}
				r.WriteMapElemValue()
				if x.FMapIntInt == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintint((map[int]int)(x.FMapIntInt), e)
					}
				}
			}
			var yyn1606 bool
			if x.FptrMapIntInt == nil {
				yyn1606 = true
				goto LABEL1606
			}
		LABEL1606:
			if yyr2 || yy2arr2 {
				if yyn1606 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntInt == nil {
						r.EncodeNil()
					} else {
						yy1607 := *x.FptrMapIntInt
						if false {
						} else {
							h.encMapintint((map[int]int)(yy1607), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntInt`)
				}
				r.WriteMapElemValue()
				if yyn1606 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntInt == nil {
						r.EncodeNil()
					} else {
						yy1609 := *x.FptrMapIntInt
						if false {
						} else {
							h.encMapintint((map[int]int)(yy1609), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntInt8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintint8((map[int]int8)(x.FMapIntInt8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntInt8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntInt8`)
				}
				r.WriteMapElemValue()
				if x.FMapIntInt8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintint8((map[int]int8)(x.FMapIntInt8), e)
					}
				}
			}
			var yyn1614 bool
			if x.FptrMapIntInt8 == nil {
				yyn1614 = true
				goto LABEL1614
			}
		LABEL1614:
			if yyr2 || yy2arr2 {
				if yyn1614 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntInt8 == nil {
						r.EncodeNil()
					} else {
						yy1615 := *x.FptrMapIntInt8
						if false {
						} else {
							h.encMapintint8((map[int]int8)(yy1615), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntInt8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntInt8`)
				}
				r.WriteMapElemValue()
				if yyn1614 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntInt8 == nil {
						r.EncodeNil()
					} else {
						yy1617 := *x.FptrMapIntInt8
						if false {
						} else {
							h.encMapintint8((map[int]int8)(yy1617), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntInt16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintint16((map[int]int16)(x.FMapIntInt16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntInt16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntInt16`)
				}
				r.WriteMapElemValue()
				if x.FMapIntInt16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintint16((map[int]int16)(x.FMapIntInt16), e)
					}
				}
			}
			var yyn1622 bool
			if x.FptrMapIntInt16 == nil {
				yyn1622 = true
				goto LABEL1622
			}
		LABEL1622:
			if yyr2 || yy2arr2 {
				if yyn1622 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntInt16 == nil {
						r.EncodeNil()
					} else {
						yy1623 := *x.FptrMapIntInt16
						if false {
						} else {
							h.encMapintint16((map[int]int16)(yy1623), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntInt16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntInt16`)
				}
				r.WriteMapElemValue()
				if yyn1622 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntInt16 == nil {
						r.EncodeNil()
					} else {
						yy1625 := *x.FptrMapIntInt16
						if false {
						} else {
							h.encMapintint16((map[int]int16)(yy1625), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntInt32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintint32((map[int]int32)(x.FMapIntInt32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntInt32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntInt32`)
				}
				r.WriteMapElemValue()
				if x.FMapIntInt32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintint32((map[int]int32)(x.FMapIntInt32), e)
					}
				}
			}
			var yyn1630 bool
			if x.FptrMapIntInt32 == nil {
				yyn1630 = true
				goto LABEL1630
			}
		LABEL1630:
			if yyr2 || yy2arr2 {
				if yyn1630 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntInt32 == nil {
						r.EncodeNil()
					} else {
						yy1631 := *x.FptrMapIntInt32
						if false {
						} else {
							h.encMapintint32((map[int]int32)(yy1631), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntInt32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntInt32`)
				}
				r.WriteMapElemValue()
				if yyn1630 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntInt32 == nil {
						r.EncodeNil()
					} else {
						yy1633 := *x.FptrMapIntInt32
						if false {
						} else {
							h.encMapintint32((map[int]int32)(yy1633), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntInt64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintint64((map[int]int64)(x.FMapIntInt64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntInt64`)
				}
				r.WriteMapElemValue()
				if x.FMapIntInt64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintint64((map[int]int64)(x.FMapIntInt64), e)
					}
				}
			}
			var yyn1638 bool
			if x.FptrMapIntInt64 == nil {
				yyn1638 = true
				goto LABEL1638
			}
		LABEL1638:
			if yyr2 || yy2arr2 {
				if yyn1638 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntInt64 == nil {
						r.EncodeNil()
					} else {
						yy1639 := *x.FptrMapIntInt64
						if false {
						} else {
							h.encMapintint64((map[int]int64)(yy1639), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntInt64`)
				}
				r.WriteMapElemValue()
				if yyn1638 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntInt64 == nil {
						r.EncodeNil()
					} else {
						yy1641 := *x.FptrMapIntInt64
						if false {
						} else {
							h.encMapintint64((map[int]int64)(yy1641), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntFloat32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintfloat32((map[int]float32)(x.FMapIntFloat32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntFloat32`)
				}
				r.WriteMapElemValue()
				if x.FMapIntFloat32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintfloat32((map[int]float32)(x.FMapIntFloat32), e)
					}
				}
			}
			var yyn1646 bool
			if x.FptrMapIntFloat32 == nil {
				yyn1646 = true
				goto LABEL1646
			}
		LABEL1646:
			if yyr2 || yy2arr2 {
				if yyn1646 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntFloat32 == nil {
						r.EncodeNil()
					} else {
						yy1647 := *x.FptrMapIntFloat32
						if false {
						} else {
							h.encMapintfloat32((map[int]float32)(yy1647), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntFloat32`)
				}
				r.WriteMapElemValue()
				if yyn1646 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntFloat32 == nil {
						r.EncodeNil()
					} else {
						yy1649 := *x.FptrMapIntFloat32
						if false {
						} else {
							h.encMapintfloat32((map[int]float32)(yy1649), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntFloat64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintfloat64((map[int]float64)(x.FMapIntFloat64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntFloat64`)
				}
				r.WriteMapElemValue()
				if x.FMapIntFloat64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintfloat64((map[int]float64)(x.FMapIntFloat64), e)
					}
				}
			}
			var yyn1654 bool
			if x.FptrMapIntFloat64 == nil {
				yyn1654 = true
				goto LABEL1654
			}
		LABEL1654:
			if yyr2 || yy2arr2 {
				if yyn1654 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntFloat64 == nil {
						r.EncodeNil()
					} else {
						yy1655 := *x.FptrMapIntFloat64
						if false {
						} else {
							h.encMapintfloat64((map[int]float64)(yy1655), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntFloat64`)
				}
				r.WriteMapElemValue()
				if yyn1654 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntFloat64 == nil {
						r.EncodeNil()
					} else {
						yy1657 := *x.FptrMapIntFloat64
						if false {
						} else {
							h.encMapintfloat64((map[int]float64)(yy1657), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapIntBool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintbool((map[int]bool)(x.FMapIntBool), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapIntBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapIntBool`)
				}
				r.WriteMapElemValue()
				if x.FMapIntBool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapintbool((map[int]bool)(x.FMapIntBool), e)
					}
				}
			}
			var yyn1662 bool
			if x.FptrMapIntBool == nil {
				yyn1662 = true
				goto LABEL1662
			}
		LABEL1662:
			if yyr2 || yy2arr2 {
				if yyn1662 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapIntBool == nil {
						r.EncodeNil()
					} else {
						yy1663 := *x.FptrMapIntBool
						if false {
						} else {
							h.encMapintbool((map[int]bool)(yy1663), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapIntBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapIntBool`)
				}
				r.WriteMapElemValue()
				if yyn1662 {
					r.EncodeNil()
				} else {
					if x.FptrMapIntBool == nil {
						r.EncodeNil()
					} else {
						yy1665 := *x.FptrMapIntBool
						if false {
						} else {
							h.encMapintbool((map[int]bool)(yy1665), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt8Intf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8Interface((map[int8]interface{})(x.FMapInt8Intf), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt8Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt8Intf`)
				}
				r.WriteMapElemValue()
				if x.FMapInt8Intf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8Interface((map[int8]interface{})(x.FMapInt8Intf), e)
					}
				}
			}
			var yyn1670 bool
			if x.FptrMapInt8Intf == nil {
				yyn1670 = true
				goto LABEL1670
			}
		LABEL1670:
			if yyr2 || yy2arr2 {
				if yyn1670 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt8Intf == nil {
						r.EncodeNil()
					} else {
						yy1671 := *x.FptrMapInt8Intf
						if false {
						} else {
							h.encMapint8Interface((map[int8]interface{})(yy1671), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt8Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt8Intf`)
				}
				r.WriteMapElemValue()
				if yyn1670 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt8Intf == nil {
						r.EncodeNil()
					} else {
						yy1673 := *x.FptrMapInt8Intf
						if false {
						} else {
							h.encMapint8Interface((map[int8]interface{})(yy1673), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt8String == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8string((map[int8]string)(x.FMapInt8String), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt8String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt8String`)
				}
				r.WriteMapElemValue()
				if x.FMapInt8String == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8string((map[int8]string)(x.FMapInt8String), e)
					}
				}
			}
			var yyn1678 bool
			if x.FptrMapInt8String == nil {
				yyn1678 = true
				goto LABEL1678
			}
		LABEL1678:
			if yyr2 || yy2arr2 {
				if yyn1678 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt8String == nil {
						r.EncodeNil()
					} else {
						yy1679 := *x.FptrMapInt8String
						if false {
						} else {
							h.encMapint8string((map[int8]string)(yy1679), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt8String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt8String`)
				}
				r.WriteMapElemValue()
				if yyn1678 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt8String == nil {
						r.EncodeNil()
					} else {
						yy1681 := *x.FptrMapInt8String
						if false {
						} else {
							h.encMapint8string((map[int8]string)(yy1681), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt8Uint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8uint((map[int8]uint)(x.FMapInt8Uint), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt8Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt8Uint`)
				}
				r.WriteMapElemValue()
				if x.FMapInt8Uint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8uint((map[int8]uint)(x.FMapInt8Uint), e)
					}
				}
			}
			var yyn1686 bool
			if x.FptrMapInt8Uint == nil {
				yyn1686 = true
				goto LABEL1686
			}
		LABEL1686:
			if yyr2 || yy2arr2 {
				if yyn1686 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt8Uint == nil {
						r.EncodeNil()
					} else {
						yy1687 := *x.FptrMapInt8Uint
						if false {
						} else {
							h.encMapint8uint((map[int8]uint)(yy1687), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt8Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt8Uint`)
				}
				r.WriteMapElemValue()
				if yyn1686 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt8Uint == nil {
						r.EncodeNil()
					} else {
						yy1689 := *x.FptrMapInt8Uint
						if false {
						} else {
							h.encMapint8uint((map[int8]uint)(yy1689), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt8Uint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8uint8((map[int8]uint8)(x.FMapInt8Uint8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt8Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt8Uint8`)
				}
				r.WriteMapElemValue()
				if x.FMapInt8Uint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8uint8((map[int8]uint8)(x.FMapInt8Uint8), e)
					}
				}
			}
			var yyn1694 bool
			if x.FptrMapInt8Uint8 == nil {
				yyn1694 = true
				goto LABEL1694
			}
		LABEL1694:
			if yyr2 || yy2arr2 {
				if yyn1694 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt8Uint8 == nil {
						r.EncodeNil()
					} else {
						yy1695 := *x.FptrMapInt8Uint8
						if false {
						} else {
							h.encMapint8uint8((map[int8]uint8)(yy1695), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt8Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt8Uint8`)
				}
				r.WriteMapElemValue()
				if yyn1694 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt8Uint8 == nil {
						r.EncodeNil()
					} else {
						yy1697 := *x.FptrMapInt8Uint8
						if false {
						} else {
							h.encMapint8uint8((map[int8]uint8)(yy1697), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt8Uint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8uint16((map[int8]uint16)(x.FMapInt8Uint16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt8Uint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt8Uint16`)
				}
				r.WriteMapElemValue()
				if x.FMapInt8Uint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8uint16((map[int8]uint16)(x.FMapInt8Uint16), e)
					}
				}
			}
			var yyn1702 bool
			if x.FptrMapInt8Uint16 == nil {
				yyn1702 = true
				goto LABEL1702
			}
		LABEL1702:
			if yyr2 || yy2arr2 {
				if yyn1702 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt8Uint16 == nil {
						r.EncodeNil()
					} else {
						yy1703 := *x.FptrMapInt8Uint16
						if false {
						} else {
							h.encMapint8uint16((map[int8]uint16)(yy1703), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt8Uint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt8Uint16`)
				}
				r.WriteMapElemValue()
				if yyn1702 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt8Uint16 == nil {
						r.EncodeNil()
					} else {
						yy1705 := *x.FptrMapInt8Uint16
						if false {
						} else {
							h.encMapint8uint16((map[int8]uint16)(yy1705), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt8Uint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8uint32((map[int8]uint32)(x.FMapInt8Uint32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt8Uint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt8Uint32`)
				}
				r.WriteMapElemValue()
				if x.FMapInt8Uint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8uint32((map[int8]uint32)(x.FMapInt8Uint32), e)
					}
				}
			}
			var yyn1710 bool
			if x.FptrMapInt8Uint32 == nil {
				yyn1710 = true
				goto LABEL1710
			}
		LABEL1710:
			if yyr2 || yy2arr2 {
				if yyn1710 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt8Uint32 == nil {
						r.EncodeNil()
					} else {
						yy1711 := *x.FptrMapInt8Uint32
						if false {
						} else {
							h.encMapint8uint32((map[int8]uint32)(yy1711), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt8Uint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt8Uint32`)
				}
				r.WriteMapElemValue()
				if yyn1710 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt8Uint32 == nil {
						r.EncodeNil()
					} else {
						yy1713 := *x.FptrMapInt8Uint32
						if false {
						} else {
							h.encMapint8uint32((map[int8]uint32)(yy1713), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt8Uint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8uint64((map[int8]uint64)(x.FMapInt8Uint64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt8Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt8Uint64`)
				}
				r.WriteMapElemValue()
				if x.FMapInt8Uint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8uint64((map[int8]uint64)(x.FMapInt8Uint64), e)
					}
				}
			}
			var yyn1718 bool
			if x.FptrMapInt8Uint64 == nil {
				yyn1718 = true
				goto LABEL1718
			}
		LABEL1718:
			if yyr2 || yy2arr2 {
				if yyn1718 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt8Uint64 == nil {
						r.EncodeNil()
					} else {
						yy1719 := *x.FptrMapInt8Uint64
						if false {
						} else {
							h.encMapint8uint64((map[int8]uint64)(yy1719), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt8Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt8Uint64`)
				}
				r.WriteMapElemValue()
				if yyn1718 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt8Uint64 == nil {
						r.EncodeNil()
					} else {
						yy1721 := *x.FptrMapInt8Uint64
						if false {
						} else {
							h.encMapint8uint64((map[int8]uint64)(yy1721), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt8Uintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8uintptr((map[int8]uintptr)(x.FMapInt8Uintptr), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt8Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt8Uintptr`)
				}
				r.WriteMapElemValue()
				if x.FMapInt8Uintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8uintptr((map[int8]uintptr)(x.FMapInt8Uintptr), e)
					}
				}
			}
			var yyn1726 bool
			if x.FptrMapInt8Uintptr == nil {
				yyn1726 = true
				goto LABEL1726
			}
		LABEL1726:
			if yyr2 || yy2arr2 {
				if yyn1726 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt8Uintptr == nil {
						r.EncodeNil()
					} else {
						yy1727 := *x.FptrMapInt8Uintptr
						if false {
						} else {
							h.encMapint8uintptr((map[int8]uintptr)(yy1727), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt8Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt8Uintptr`)
				}
				r.WriteMapElemValue()
				if yyn1726 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt8Uintptr == nil {
						r.EncodeNil()
					} else {
						yy1729 := *x.FptrMapInt8Uintptr
						if false {
						} else {
							h.encMapint8uintptr((map[int8]uintptr)(yy1729), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt8Int == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8int((map[int8]int)(x.FMapInt8Int), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt8Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt8Int`)
				}
				r.WriteMapElemValue()
				if x.FMapInt8Int == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8int((map[int8]int)(x.FMapInt8Int), e)
					}
				}
			}
			var yyn1734 bool
			if x.FptrMapInt8Int == nil {
				yyn1734 = true
				goto LABEL1734
			}
		LABEL1734:
			if yyr2 || yy2arr2 {
				if yyn1734 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt8Int == nil {
						r.EncodeNil()
					} else {
						yy1735 := *x.FptrMapInt8Int
						if false {
						} else {
							h.encMapint8int((map[int8]int)(yy1735), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt8Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt8Int`)
				}
				r.WriteMapElemValue()
				if yyn1734 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt8Int == nil {
						r.EncodeNil()
					} else {
						yy1737 := *x.FptrMapInt8Int
						if false {
						} else {
							h.encMapint8int((map[int8]int)(yy1737), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt8Int8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8int8((map[int8]int8)(x.FMapInt8Int8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt8Int8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt8Int8`)
				}
				r.WriteMapElemValue()
				if x.FMapInt8Int8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8int8((map[int8]int8)(x.FMapInt8Int8), e)
					}
				}
			}
			var yyn1742 bool
			if x.FptrMapInt8Int8 == nil {
				yyn1742 = true
				goto LABEL1742
			}
		LABEL1742:
			if yyr2 || yy2arr2 {
				if yyn1742 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt8Int8 == nil {
						r.EncodeNil()
					} else {
						yy1743 := *x.FptrMapInt8Int8
						if false {
						} else {
							h.encMapint8int8((map[int8]int8)(yy1743), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt8Int8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt8Int8`)
				}
				r.WriteMapElemValue()
				if yyn1742 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt8Int8 == nil {
						r.EncodeNil()
					} else {
						yy1745 := *x.FptrMapInt8Int8
						if false {
						} else {
							h.encMapint8int8((map[int8]int8)(yy1745), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt8Int16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8int16((map[int8]int16)(x.FMapInt8Int16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt8Int16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt8Int16`)
				}
				r.WriteMapElemValue()
				if x.FMapInt8Int16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8int16((map[int8]int16)(x.FMapInt8Int16), e)
					}
				}
			}
			var yyn1750 bool
			if x.FptrMapInt8Int16 == nil {
				yyn1750 = true
				goto LABEL1750
			}
		LABEL1750:
			if yyr2 || yy2arr2 {
				if yyn1750 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt8Int16 == nil {
						r.EncodeNil()
					} else {
						yy1751 := *x.FptrMapInt8Int16
						if false {
						} else {
							h.encMapint8int16((map[int8]int16)(yy1751), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt8Int16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt8Int16`)
				}
				r.WriteMapElemValue()
				if yyn1750 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt8Int16 == nil {
						r.EncodeNil()
					} else {
						yy1753 := *x.FptrMapInt8Int16
						if false {
						} else {
							h.encMapint8int16((map[int8]int16)(yy1753), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt8Int32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8int32((map[int8]int32)(x.FMapInt8Int32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt8Int32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt8Int32`)
				}
				r.WriteMapElemValue()
				if x.FMapInt8Int32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8int32((map[int8]int32)(x.FMapInt8Int32), e)
					}
				}
			}
			var yyn1758 bool
			if x.FptrMapInt8Int32 == nil {
				yyn1758 = true
				goto LABEL1758
			}
		LABEL1758:
			if yyr2 || yy2arr2 {
				if yyn1758 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt8Int32 == nil {
						r.EncodeNil()
					} else {
						yy1759 := *x.FptrMapInt8Int32
						if false {
						} else {
							h.encMapint8int32((map[int8]int32)(yy1759), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt8Int32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt8Int32`)
				}
				r.WriteMapElemValue()
				if yyn1758 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt8Int32 == nil {
						r.EncodeNil()
					} else {
						yy1761 := *x.FptrMapInt8Int32
						if false {
						} else {
							h.encMapint8int32((map[int8]int32)(yy1761), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt8Int64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8int64((map[int8]int64)(x.FMapInt8Int64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt8Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt8Int64`)
				}
				r.WriteMapElemValue()
				if x.FMapInt8Int64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8int64((map[int8]int64)(x.FMapInt8Int64), e)
					}
				}
			}
			var yyn1766 bool
			if x.FptrMapInt8Int64 == nil {
				yyn1766 = true
				goto LABEL1766
			}
		LABEL1766:
			if yyr2 || yy2arr2 {
				if yyn1766 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt8Int64 == nil {
						r.EncodeNil()
					} else {
						yy1767 := *x.FptrMapInt8Int64
						if false {
						} else {
							h.encMapint8int64((map[int8]int64)(yy1767), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt8Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt8Int64`)
				}
				r.WriteMapElemValue()
				if yyn1766 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt8Int64 == nil {
						r.EncodeNil()
					} else {
						yy1769 := *x.FptrMapInt8Int64
						if false {
						} else {
							h.encMapint8int64((map[int8]int64)(yy1769), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt8Float32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8float32((map[int8]float32)(x.FMapInt8Float32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt8Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt8Float32`)
				}
				r.WriteMapElemValue()
				if x.FMapInt8Float32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8float32((map[int8]float32)(x.FMapInt8Float32), e)
					}
				}
			}
			var yyn1774 bool
			if x.FptrMapInt8Float32 == nil {
				yyn1774 = true
				goto LABEL1774
			}
		LABEL1774:
			if yyr2 || yy2arr2 {
				if yyn1774 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt8Float32 == nil {
						r.EncodeNil()
					} else {
						yy1775 := *x.FptrMapInt8Float32
						if false {
						} else {
							h.encMapint8float32((map[int8]float32)(yy1775), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt8Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt8Float32`)
				}
				r.WriteMapElemValue()
				if yyn1774 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt8Float32 == nil {
						r.EncodeNil()
					} else {
						yy1777 := *x.FptrMapInt8Float32
						if false {
						} else {
							h.encMapint8float32((map[int8]float32)(yy1777), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt8Float64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8float64((map[int8]float64)(x.FMapInt8Float64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt8Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt8Float64`)
				}
				r.WriteMapElemValue()
				if x.FMapInt8Float64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8float64((map[int8]float64)(x.FMapInt8Float64), e)
					}
				}
			}
			var yyn1782 bool
			if x.FptrMapInt8Float64 == nil {
				yyn1782 = true
				goto LABEL1782
			}
		LABEL1782:
			if yyr2 || yy2arr2 {
				if yyn1782 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt8Float64 == nil {
						r.EncodeNil()
					} else {
						yy1783 := *x.FptrMapInt8Float64
						if false {
						} else {
							h.encMapint8float64((map[int8]float64)(yy1783), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt8Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt8Float64`)
				}
				r.WriteMapElemValue()
				if yyn1782 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt8Float64 == nil {
						r.EncodeNil()
					} else {
						yy1785 := *x.FptrMapInt8Float64
						if false {
						} else {
							h.encMapint8float64((map[int8]float64)(yy1785), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt8Bool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8bool((map[int8]bool)(x.FMapInt8Bool), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt8Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt8Bool`)
				}
				r.WriteMapElemValue()
				if x.FMapInt8Bool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint8bool((map[int8]bool)(x.FMapInt8Bool), e)
					}
				}
			}
			var yyn1790 bool
			if x.FptrMapInt8Bool == nil {
				yyn1790 = true
				goto LABEL1790
			}
		LABEL1790:
			if yyr2 || yy2arr2 {
				if yyn1790 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt8Bool == nil {
						r.EncodeNil()
					} else {
						yy1791 := *x.FptrMapInt8Bool
						if false {
						} else {
							h.encMapint8bool((map[int8]bool)(yy1791), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt8Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt8Bool`)
				}
				r.WriteMapElemValue()
				if yyn1790 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt8Bool == nil {
						r.EncodeNil()
					} else {
						yy1793 := *x.FptrMapInt8Bool
						if false {
						} else {
							h.encMapint8bool((map[int8]bool)(yy1793), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt16Intf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16Interface((map[int16]interface{})(x.FMapInt16Intf), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt16Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt16Intf`)
				}
				r.WriteMapElemValue()
				if x.FMapInt16Intf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16Interface((map[int16]interface{})(x.FMapInt16Intf), e)
					}
				}
			}
			var yyn1798 bool
			if x.FptrMapInt16Intf == nil {
				yyn1798 = true
				goto LABEL1798
			}
		LABEL1798:
			if yyr2 || yy2arr2 {
				if yyn1798 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt16Intf == nil {
						r.EncodeNil()
					} else {
						yy1799 := *x.FptrMapInt16Intf
						if false {
						} else {
							h.encMapint16Interface((map[int16]interface{})(yy1799), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt16Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt16Intf`)
				}
				r.WriteMapElemValue()
				if yyn1798 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt16Intf == nil {
						r.EncodeNil()
					} else {
						yy1801 := *x.FptrMapInt16Intf
						if false {
						} else {
							h.encMapint16Interface((map[int16]interface{})(yy1801), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt16String == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16string((map[int16]string)(x.FMapInt16String), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt16String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt16String`)
				}
				r.WriteMapElemValue()
				if x.FMapInt16String == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16string((map[int16]string)(x.FMapInt16String), e)
					}
				}
			}
			var yyn1806 bool
			if x.FptrMapInt16String == nil {
				yyn1806 = true
				goto LABEL1806
			}
		LABEL1806:
			if yyr2 || yy2arr2 {
				if yyn1806 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt16String == nil {
						r.EncodeNil()
					} else {
						yy1807 := *x.FptrMapInt16String
						if false {
						} else {
							h.encMapint16string((map[int16]string)(yy1807), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt16String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt16String`)
				}
				r.WriteMapElemValue()
				if yyn1806 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt16String == nil {
						r.EncodeNil()
					} else {
						yy1809 := *x.FptrMapInt16String
						if false {
						} else {
							h.encMapint16string((map[int16]string)(yy1809), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt16Uint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16uint((map[int16]uint)(x.FMapInt16Uint), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt16Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt16Uint`)
				}
				r.WriteMapElemValue()
				if x.FMapInt16Uint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16uint((map[int16]uint)(x.FMapInt16Uint), e)
					}
				}
			}
			var yyn1814 bool
			if x.FptrMapInt16Uint == nil {
				yyn1814 = true
				goto LABEL1814
			}
		LABEL1814:
			if yyr2 || yy2arr2 {
				if yyn1814 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt16Uint == nil {
						r.EncodeNil()
					} else {
						yy1815 := *x.FptrMapInt16Uint
						if false {
						} else {
							h.encMapint16uint((map[int16]uint)(yy1815), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt16Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt16Uint`)
				}
				r.WriteMapElemValue()
				if yyn1814 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt16Uint == nil {
						r.EncodeNil()
					} else {
						yy1817 := *x.FptrMapInt16Uint
						if false {
						} else {
							h.encMapint16uint((map[int16]uint)(yy1817), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt16Uint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16uint8((map[int16]uint8)(x.FMapInt16Uint8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt16Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt16Uint8`)
				}
				r.WriteMapElemValue()
				if x.FMapInt16Uint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16uint8((map[int16]uint8)(x.FMapInt16Uint8), e)
					}
				}
			}
			var yyn1822 bool
			if x.FptrMapInt16Uint8 == nil {
				yyn1822 = true
				goto LABEL1822
			}
		LABEL1822:
			if yyr2 || yy2arr2 {
				if yyn1822 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt16Uint8 == nil {
						r.EncodeNil()
					} else {
						yy1823 := *x.FptrMapInt16Uint8
						if false {
						} else {
							h.encMapint16uint8((map[int16]uint8)(yy1823), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt16Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt16Uint8`)
				}
				r.WriteMapElemValue()
				if yyn1822 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt16Uint8 == nil {
						r.EncodeNil()
					} else {
						yy1825 := *x.FptrMapInt16Uint8
						if false {
						} else {
							h.encMapint16uint8((map[int16]uint8)(yy1825), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt16Uint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16uint16((map[int16]uint16)(x.FMapInt16Uint16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt16Uint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt16Uint16`)
				}
				r.WriteMapElemValue()
				if x.FMapInt16Uint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16uint16((map[int16]uint16)(x.FMapInt16Uint16), e)
					}
				}
			}
			var yyn1830 bool
			if x.FptrMapInt16Uint16 == nil {
				yyn1830 = true
				goto LABEL1830
			}
		LABEL1830:
			if yyr2 || yy2arr2 {
				if yyn1830 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt16Uint16 == nil {
						r.EncodeNil()
					} else {
						yy1831 := *x.FptrMapInt16Uint16
						if false {
						} else {
							h.encMapint16uint16((map[int16]uint16)(yy1831), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt16Uint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt16Uint16`)
				}
				r.WriteMapElemValue()
				if yyn1830 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt16Uint16 == nil {
						r.EncodeNil()
					} else {
						yy1833 := *x.FptrMapInt16Uint16
						if false {
						} else {
							h.encMapint16uint16((map[int16]uint16)(yy1833), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt16Uint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16uint32((map[int16]uint32)(x.FMapInt16Uint32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt16Uint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt16Uint32`)
				}
				r.WriteMapElemValue()
				if x.FMapInt16Uint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16uint32((map[int16]uint32)(x.FMapInt16Uint32), e)
					}
				}
			}
			var yyn1838 bool
			if x.FptrMapInt16Uint32 == nil {
				yyn1838 = true
				goto LABEL1838
			}
		LABEL1838:
			if yyr2 || yy2arr2 {
				if yyn1838 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt16Uint32 == nil {
						r.EncodeNil()
					} else {
						yy1839 := *x.FptrMapInt16Uint32
						if false {
						} else {
							h.encMapint16uint32((map[int16]uint32)(yy1839), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt16Uint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt16Uint32`)
				}
				r.WriteMapElemValue()
				if yyn1838 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt16Uint32 == nil {
						r.EncodeNil()
					} else {
						yy1841 := *x.FptrMapInt16Uint32
						if false {
						} else {
							h.encMapint16uint32((map[int16]uint32)(yy1841), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt16Uint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16uint64((map[int16]uint64)(x.FMapInt16Uint64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt16Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt16Uint64`)
				}
				r.WriteMapElemValue()
				if x.FMapInt16Uint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16uint64((map[int16]uint64)(x.FMapInt16Uint64), e)
					}
				}
			}
			var yyn1846 bool
			if x.FptrMapInt16Uint64 == nil {
				yyn1846 = true
				goto LABEL1846
			}
		LABEL1846:
			if yyr2 || yy2arr2 {
				if yyn1846 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt16Uint64 == nil {
						r.EncodeNil()
					} else {
						yy1847 := *x.FptrMapInt16Uint64
						if false {
						} else {
							h.encMapint16uint64((map[int16]uint64)(yy1847), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt16Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt16Uint64`)
				}
				r.WriteMapElemValue()
				if yyn1846 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt16Uint64 == nil {
						r.EncodeNil()
					} else {
						yy1849 := *x.FptrMapInt16Uint64
						if false {
						} else {
							h.encMapint16uint64((map[int16]uint64)(yy1849), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt16Uintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16uintptr((map[int16]uintptr)(x.FMapInt16Uintptr), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt16Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt16Uintptr`)
				}
				r.WriteMapElemValue()
				if x.FMapInt16Uintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16uintptr((map[int16]uintptr)(x.FMapInt16Uintptr), e)
					}
				}
			}
			var yyn1854 bool
			if x.FptrMapInt16Uintptr == nil {
				yyn1854 = true
				goto LABEL1854
			}
		LABEL1854:
			if yyr2 || yy2arr2 {
				if yyn1854 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt16Uintptr == nil {
						r.EncodeNil()
					} else {
						yy1855 := *x.FptrMapInt16Uintptr
						if false {
						} else {
							h.encMapint16uintptr((map[int16]uintptr)(yy1855), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt16Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt16Uintptr`)
				}
				r.WriteMapElemValue()
				if yyn1854 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt16Uintptr == nil {
						r.EncodeNil()
					} else {
						yy1857 := *x.FptrMapInt16Uintptr
						if false {
						} else {
							h.encMapint16uintptr((map[int16]uintptr)(yy1857), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt16Int == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16int((map[int16]int)(x.FMapInt16Int), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt16Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt16Int`)
				}
				r.WriteMapElemValue()
				if x.FMapInt16Int == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16int((map[int16]int)(x.FMapInt16Int), e)
					}
				}
			}
			var yyn1862 bool
			if x.FptrMapInt16Int == nil {
				yyn1862 = true
				goto LABEL1862
			}
		LABEL1862:
			if yyr2 || yy2arr2 {
				if yyn1862 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt16Int == nil {
						r.EncodeNil()
					} else {
						yy1863 := *x.FptrMapInt16Int
						if false {
						} else {
							h.encMapint16int((map[int16]int)(yy1863), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt16Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt16Int`)
				}
				r.WriteMapElemValue()
				if yyn1862 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt16Int == nil {
						r.EncodeNil()
					} else {
						yy1865 := *x.FptrMapInt16Int
						if false {
						} else {
							h.encMapint16int((map[int16]int)(yy1865), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt16Int8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16int8((map[int16]int8)(x.FMapInt16Int8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt16Int8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt16Int8`)
				}
				r.WriteMapElemValue()
				if x.FMapInt16Int8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16int8((map[int16]int8)(x.FMapInt16Int8), e)
					}
				}
			}
			var yyn1870 bool
			if x.FptrMapInt16Int8 == nil {
				yyn1870 = true
				goto LABEL1870
			}
		LABEL1870:
			if yyr2 || yy2arr2 {
				if yyn1870 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt16Int8 == nil {
						r.EncodeNil()
					} else {
						yy1871 := *x.FptrMapInt16Int8
						if false {
						} else {
							h.encMapint16int8((map[int16]int8)(yy1871), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt16Int8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt16Int8`)
				}
				r.WriteMapElemValue()
				if yyn1870 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt16Int8 == nil {
						r.EncodeNil()
					} else {
						yy1873 := *x.FptrMapInt16Int8
						if false {
						} else {
							h.encMapint16int8((map[int16]int8)(yy1873), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt16Int16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16int16((map[int16]int16)(x.FMapInt16Int16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt16Int16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt16Int16`)
				}
				r.WriteMapElemValue()
				if x.FMapInt16Int16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16int16((map[int16]int16)(x.FMapInt16Int16), e)
					}
				}
			}
			var yyn1878 bool
			if x.FptrMapInt16Int16 == nil {
				yyn1878 = true
				goto LABEL1878
			}
		LABEL1878:
			if yyr2 || yy2arr2 {
				if yyn1878 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt16Int16 == nil {
						r.EncodeNil()
					} else {
						yy1879 := *x.FptrMapInt16Int16
						if false {
						} else {
							h.encMapint16int16((map[int16]int16)(yy1879), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt16Int16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt16Int16`)
				}
				r.WriteMapElemValue()
				if yyn1878 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt16Int16 == nil {
						r.EncodeNil()
					} else {
						yy1881 := *x.FptrMapInt16Int16
						if false {
						} else {
							h.encMapint16int16((map[int16]int16)(yy1881), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt16Int32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16int32((map[int16]int32)(x.FMapInt16Int32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt16Int32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt16Int32`)
				}
				r.WriteMapElemValue()
				if x.FMapInt16Int32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16int32((map[int16]int32)(x.FMapInt16Int32), e)
					}
				}
			}
			var yyn1886 bool
			if x.FptrMapInt16Int32 == nil {
				yyn1886 = true
				goto LABEL1886
			}
		LABEL1886:
			if yyr2 || yy2arr2 {
				if yyn1886 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt16Int32 == nil {
						r.EncodeNil()
					} else {
						yy1887 := *x.FptrMapInt16Int32
						if false {
						} else {
							h.encMapint16int32((map[int16]int32)(yy1887), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt16Int32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt16Int32`)
				}
				r.WriteMapElemValue()
				if yyn1886 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt16Int32 == nil {
						r.EncodeNil()
					} else {
						yy1889 := *x.FptrMapInt16Int32
						if false {
						} else {
							h.encMapint16int32((map[int16]int32)(yy1889), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt16Int64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16int64((map[int16]int64)(x.FMapInt16Int64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt16Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt16Int64`)
				}
				r.WriteMapElemValue()
				if x.FMapInt16Int64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16int64((map[int16]int64)(x.FMapInt16Int64), e)
					}
				}
			}
			var yyn1894 bool
			if x.FptrMapInt16Int64 == nil {
				yyn1894 = true
				goto LABEL1894
			}
		LABEL1894:
			if yyr2 || yy2arr2 {
				if yyn1894 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt16Int64 == nil {
						r.EncodeNil()
					} else {
						yy1895 := *x.FptrMapInt16Int64
						if false {
						} else {
							h.encMapint16int64((map[int16]int64)(yy1895), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt16Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt16Int64`)
				}
				r.WriteMapElemValue()
				if yyn1894 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt16Int64 == nil {
						r.EncodeNil()
					} else {
						yy1897 := *x.FptrMapInt16Int64
						if false {
						} else {
							h.encMapint16int64((map[int16]int64)(yy1897), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt16Float32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16float32((map[int16]float32)(x.FMapInt16Float32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt16Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt16Float32`)
				}
				r.WriteMapElemValue()
				if x.FMapInt16Float32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16float32((map[int16]float32)(x.FMapInt16Float32), e)
					}
				}
			}
			var yyn1902 bool
			if x.FptrMapInt16Float32 == nil {
				yyn1902 = true
				goto LABEL1902
			}
		LABEL1902:
			if yyr2 || yy2arr2 {
				if yyn1902 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt16Float32 == nil {
						r.EncodeNil()
					} else {
						yy1903 := *x.FptrMapInt16Float32
						if false {
						} else {
							h.encMapint16float32((map[int16]float32)(yy1903), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt16Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt16Float32`)
				}
				r.WriteMapElemValue()
				if yyn1902 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt16Float32 == nil {
						r.EncodeNil()
					} else {
						yy1905 := *x.FptrMapInt16Float32
						if false {
						} else {
							h.encMapint16float32((map[int16]float32)(yy1905), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt16Float64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16float64((map[int16]float64)(x.FMapInt16Float64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt16Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt16Float64`)
				}
				r.WriteMapElemValue()
				if x.FMapInt16Float64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16float64((map[int16]float64)(x.FMapInt16Float64), e)
					}
				}
			}
			var yyn1910 bool
			if x.FptrMapInt16Float64 == nil {
				yyn1910 = true
				goto LABEL1910
			}
		LABEL1910:
			if yyr2 || yy2arr2 {
				if yyn1910 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt16Float64 == nil {
						r.EncodeNil()
					} else {
						yy1911 := *x.FptrMapInt16Float64
						if false {
						} else {
							h.encMapint16float64((map[int16]float64)(yy1911), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt16Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt16Float64`)
				}
				r.WriteMapElemValue()
				if yyn1910 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt16Float64 == nil {
						r.EncodeNil()
					} else {
						yy1913 := *x.FptrMapInt16Float64
						if false {
						} else {
							h.encMapint16float64((map[int16]float64)(yy1913), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt16Bool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16bool((map[int16]bool)(x.FMapInt16Bool), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt16Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt16Bool`)
				}
				r.WriteMapElemValue()
				if x.FMapInt16Bool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint16bool((map[int16]bool)(x.FMapInt16Bool), e)
					}
				}
			}
			var yyn1918 bool
			if x.FptrMapInt16Bool == nil {
				yyn1918 = true
				goto LABEL1918
			}
		LABEL1918:
			if yyr2 || yy2arr2 {
				if yyn1918 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt16Bool == nil {
						r.EncodeNil()
					} else {
						yy1919 := *x.FptrMapInt16Bool
						if false {
						} else {
							h.encMapint16bool((map[int16]bool)(yy1919), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt16Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt16Bool`)
				}
				r.WriteMapElemValue()
				if yyn1918 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt16Bool == nil {
						r.EncodeNil()
					} else {
						yy1921 := *x.FptrMapInt16Bool
						if false {
						} else {
							h.encMapint16bool((map[int16]bool)(yy1921), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt32Intf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32Interface((map[int32]interface{})(x.FMapInt32Intf), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt32Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt32Intf`)
				}
				r.WriteMapElemValue()
				if x.FMapInt32Intf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32Interface((map[int32]interface{})(x.FMapInt32Intf), e)
					}
				}
			}
			var yyn1926 bool
			if x.FptrMapInt32Intf == nil {
				yyn1926 = true
				goto LABEL1926
			}
		LABEL1926:
			if yyr2 || yy2arr2 {
				if yyn1926 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt32Intf == nil {
						r.EncodeNil()
					} else {
						yy1927 := *x.FptrMapInt32Intf
						if false {
						} else {
							h.encMapint32Interface((map[int32]interface{})(yy1927), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt32Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt32Intf`)
				}
				r.WriteMapElemValue()
				if yyn1926 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt32Intf == nil {
						r.EncodeNil()
					} else {
						yy1929 := *x.FptrMapInt32Intf
						if false {
						} else {
							h.encMapint32Interface((map[int32]interface{})(yy1929), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt32String == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32string((map[int32]string)(x.FMapInt32String), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt32String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt32String`)
				}
				r.WriteMapElemValue()
				if x.FMapInt32String == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32string((map[int32]string)(x.FMapInt32String), e)
					}
				}
			}
			var yyn1934 bool
			if x.FptrMapInt32String == nil {
				yyn1934 = true
				goto LABEL1934
			}
		LABEL1934:
			if yyr2 || yy2arr2 {
				if yyn1934 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt32String == nil {
						r.EncodeNil()
					} else {
						yy1935 := *x.FptrMapInt32String
						if false {
						} else {
							h.encMapint32string((map[int32]string)(yy1935), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt32String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt32String`)
				}
				r.WriteMapElemValue()
				if yyn1934 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt32String == nil {
						r.EncodeNil()
					} else {
						yy1937 := *x.FptrMapInt32String
						if false {
						} else {
							h.encMapint32string((map[int32]string)(yy1937), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt32Uint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32uint((map[int32]uint)(x.FMapInt32Uint), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt32Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt32Uint`)
				}
				r.WriteMapElemValue()
				if x.FMapInt32Uint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32uint((map[int32]uint)(x.FMapInt32Uint), e)
					}
				}
			}
			var yyn1942 bool
			if x.FptrMapInt32Uint == nil {
				yyn1942 = true
				goto LABEL1942
			}
		LABEL1942:
			if yyr2 || yy2arr2 {
				if yyn1942 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt32Uint == nil {
						r.EncodeNil()
					} else {
						yy1943 := *x.FptrMapInt32Uint
						if false {
						} else {
							h.encMapint32uint((map[int32]uint)(yy1943), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt32Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt32Uint`)
				}
				r.WriteMapElemValue()
				if yyn1942 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt32Uint == nil {
						r.EncodeNil()
					} else {
						yy1945 := *x.FptrMapInt32Uint
						if false {
						} else {
							h.encMapint32uint((map[int32]uint)(yy1945), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt32Uint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32uint8((map[int32]uint8)(x.FMapInt32Uint8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt32Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt32Uint8`)
				}
				r.WriteMapElemValue()
				if x.FMapInt32Uint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32uint8((map[int32]uint8)(x.FMapInt32Uint8), e)
					}
				}
			}
			var yyn1950 bool
			if x.FptrMapInt32Uint8 == nil {
				yyn1950 = true
				goto LABEL1950
			}
		LABEL1950:
			if yyr2 || yy2arr2 {
				if yyn1950 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt32Uint8 == nil {
						r.EncodeNil()
					} else {
						yy1951 := *x.FptrMapInt32Uint8
						if false {
						} else {
							h.encMapint32uint8((map[int32]uint8)(yy1951), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt32Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt32Uint8`)
				}
				r.WriteMapElemValue()
				if yyn1950 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt32Uint8 == nil {
						r.EncodeNil()
					} else {
						yy1953 := *x.FptrMapInt32Uint8
						if false {
						} else {
							h.encMapint32uint8((map[int32]uint8)(yy1953), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt32Uint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32uint16((map[int32]uint16)(x.FMapInt32Uint16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt32Uint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt32Uint16`)
				}
				r.WriteMapElemValue()
				if x.FMapInt32Uint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32uint16((map[int32]uint16)(x.FMapInt32Uint16), e)
					}
				}
			}
			var yyn1958 bool
			if x.FptrMapInt32Uint16 == nil {
				yyn1958 = true
				goto LABEL1958
			}
		LABEL1958:
			if yyr2 || yy2arr2 {
				if yyn1958 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt32Uint16 == nil {
						r.EncodeNil()
					} else {
						yy1959 := *x.FptrMapInt32Uint16
						if false {
						} else {
							h.encMapint32uint16((map[int32]uint16)(yy1959), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt32Uint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt32Uint16`)
				}
				r.WriteMapElemValue()
				if yyn1958 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt32Uint16 == nil {
						r.EncodeNil()
					} else {
						yy1961 := *x.FptrMapInt32Uint16
						if false {
						} else {
							h.encMapint32uint16((map[int32]uint16)(yy1961), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt32Uint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32uint32((map[int32]uint32)(x.FMapInt32Uint32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt32Uint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt32Uint32`)
				}
				r.WriteMapElemValue()
				if x.FMapInt32Uint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32uint32((map[int32]uint32)(x.FMapInt32Uint32), e)
					}
				}
			}
			var yyn1966 bool
			if x.FptrMapInt32Uint32 == nil {
				yyn1966 = true
				goto LABEL1966
			}
		LABEL1966:
			if yyr2 || yy2arr2 {
				if yyn1966 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt32Uint32 == nil {
						r.EncodeNil()
					} else {
						yy1967 := *x.FptrMapInt32Uint32
						if false {
						} else {
							h.encMapint32uint32((map[int32]uint32)(yy1967), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt32Uint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt32Uint32`)
				}
				r.WriteMapElemValue()
				if yyn1966 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt32Uint32 == nil {
						r.EncodeNil()
					} else {
						yy1969 := *x.FptrMapInt32Uint32
						if false {
						} else {
							h.encMapint32uint32((map[int32]uint32)(yy1969), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt32Uint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32uint64((map[int32]uint64)(x.FMapInt32Uint64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt32Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt32Uint64`)
				}
				r.WriteMapElemValue()
				if x.FMapInt32Uint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32uint64((map[int32]uint64)(x.FMapInt32Uint64), e)
					}
				}
			}
			var yyn1974 bool
			if x.FptrMapInt32Uint64 == nil {
				yyn1974 = true
				goto LABEL1974
			}
		LABEL1974:
			if yyr2 || yy2arr2 {
				if yyn1974 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt32Uint64 == nil {
						r.EncodeNil()
					} else {
						yy1975 := *x.FptrMapInt32Uint64
						if false {
						} else {
							h.encMapint32uint64((map[int32]uint64)(yy1975), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt32Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt32Uint64`)
				}
				r.WriteMapElemValue()
				if yyn1974 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt32Uint64 == nil {
						r.EncodeNil()
					} else {
						yy1977 := *x.FptrMapInt32Uint64
						if false {
						} else {
							h.encMapint32uint64((map[int32]uint64)(yy1977), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt32Uintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32uintptr((map[int32]uintptr)(x.FMapInt32Uintptr), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt32Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt32Uintptr`)
				}
				r.WriteMapElemValue()
				if x.FMapInt32Uintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32uintptr((map[int32]uintptr)(x.FMapInt32Uintptr), e)
					}
				}
			}
			var yyn1982 bool
			if x.FptrMapInt32Uintptr == nil {
				yyn1982 = true
				goto LABEL1982
			}
		LABEL1982:
			if yyr2 || yy2arr2 {
				if yyn1982 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt32Uintptr == nil {
						r.EncodeNil()
					} else {
						yy1983 := *x.FptrMapInt32Uintptr
						if false {
						} else {
							h.encMapint32uintptr((map[int32]uintptr)(yy1983), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt32Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt32Uintptr`)
				}
				r.WriteMapElemValue()
				if yyn1982 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt32Uintptr == nil {
						r.EncodeNil()
					} else {
						yy1985 := *x.FptrMapInt32Uintptr
						if false {
						} else {
							h.encMapint32uintptr((map[int32]uintptr)(yy1985), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt32Int == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32int((map[int32]int)(x.FMapInt32Int), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt32Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt32Int`)
				}
				r.WriteMapElemValue()
				if x.FMapInt32Int == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32int((map[int32]int)(x.FMapInt32Int), e)
					}
				}
			}
			var yyn1990 bool
			if x.FptrMapInt32Int == nil {
				yyn1990 = true
				goto LABEL1990
			}
		LABEL1990:
			if yyr2 || yy2arr2 {
				if yyn1990 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt32Int == nil {
						r.EncodeNil()
					} else {
						yy1991 := *x.FptrMapInt32Int
						if false {
						} else {
							h.encMapint32int((map[int32]int)(yy1991), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt32Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt32Int`)
				}
				r.WriteMapElemValue()
				if yyn1990 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt32Int == nil {
						r.EncodeNil()
					} else {
						yy1993 := *x.FptrMapInt32Int
						if false {
						} else {
							h.encMapint32int((map[int32]int)(yy1993), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt32Int8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32int8((map[int32]int8)(x.FMapInt32Int8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt32Int8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt32Int8`)
				}
				r.WriteMapElemValue()
				if x.FMapInt32Int8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32int8((map[int32]int8)(x.FMapInt32Int8), e)
					}
				}
			}
			var yyn1998 bool
			if x.FptrMapInt32Int8 == nil {
				yyn1998 = true
				goto LABEL1998
			}
		LABEL1998:
			if yyr2 || yy2arr2 {
				if yyn1998 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt32Int8 == nil {
						r.EncodeNil()
					} else {
						yy1999 := *x.FptrMapInt32Int8
						if false {
						} else {
							h.encMapint32int8((map[int32]int8)(yy1999), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt32Int8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt32Int8`)
				}
				r.WriteMapElemValue()
				if yyn1998 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt32Int8 == nil {
						r.EncodeNil()
					} else {
						yy2001 := *x.FptrMapInt32Int8
						if false {
						} else {
							h.encMapint32int8((map[int32]int8)(yy2001), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt32Int16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32int16((map[int32]int16)(x.FMapInt32Int16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt32Int16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt32Int16`)
				}
				r.WriteMapElemValue()
				if x.FMapInt32Int16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32int16((map[int32]int16)(x.FMapInt32Int16), e)
					}
				}
			}
			var yyn2006 bool
			if x.FptrMapInt32Int16 == nil {
				yyn2006 = true
				goto LABEL2006
			}
		LABEL2006:
			if yyr2 || yy2arr2 {
				if yyn2006 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt32Int16 == nil {
						r.EncodeNil()
					} else {
						yy2007 := *x.FptrMapInt32Int16
						if false {
						} else {
							h.encMapint32int16((map[int32]int16)(yy2007), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt32Int16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt32Int16`)
				}
				r.WriteMapElemValue()
				if yyn2006 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt32Int16 == nil {
						r.EncodeNil()
					} else {
						yy2009 := *x.FptrMapInt32Int16
						if false {
						} else {
							h.encMapint32int16((map[int32]int16)(yy2009), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt32Int32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32int32((map[int32]int32)(x.FMapInt32Int32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt32Int32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt32Int32`)
				}
				r.WriteMapElemValue()
				if x.FMapInt32Int32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32int32((map[int32]int32)(x.FMapInt32Int32), e)
					}
				}
			}
			var yyn2014 bool
			if x.FptrMapInt32Int32 == nil {
				yyn2014 = true
				goto LABEL2014
			}
		LABEL2014:
			if yyr2 || yy2arr2 {
				if yyn2014 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt32Int32 == nil {
						r.EncodeNil()
					} else {
						yy2015 := *x.FptrMapInt32Int32
						if false {
						} else {
							h.encMapint32int32((map[int32]int32)(yy2015), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt32Int32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt32Int32`)
				}
				r.WriteMapElemValue()
				if yyn2014 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt32Int32 == nil {
						r.EncodeNil()
					} else {
						yy2017 := *x.FptrMapInt32Int32
						if false {
						} else {
							h.encMapint32int32((map[int32]int32)(yy2017), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt32Int64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32int64((map[int32]int64)(x.FMapInt32Int64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt32Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt32Int64`)
				}
				r.WriteMapElemValue()
				if x.FMapInt32Int64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32int64((map[int32]int64)(x.FMapInt32Int64), e)
					}
				}
			}
			var yyn2022 bool
			if x.FptrMapInt32Int64 == nil {
				yyn2022 = true
				goto LABEL2022
			}
		LABEL2022:
			if yyr2 || yy2arr2 {
				if yyn2022 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt32Int64 == nil {
						r.EncodeNil()
					} else {
						yy2023 := *x.FptrMapInt32Int64
						if false {
						} else {
							h.encMapint32int64((map[int32]int64)(yy2023), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt32Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt32Int64`)
				}
				r.WriteMapElemValue()
				if yyn2022 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt32Int64 == nil {
						r.EncodeNil()
					} else {
						yy2025 := *x.FptrMapInt32Int64
						if false {
						} else {
							h.encMapint32int64((map[int32]int64)(yy2025), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt32Float32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32float32((map[int32]float32)(x.FMapInt32Float32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt32Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt32Float32`)
				}
				r.WriteMapElemValue()
				if x.FMapInt32Float32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32float32((map[int32]float32)(x.FMapInt32Float32), e)
					}
				}
			}
			var yyn2030 bool
			if x.FptrMapInt32Float32 == nil {
				yyn2030 = true
				goto LABEL2030
			}
		LABEL2030:
			if yyr2 || yy2arr2 {
				if yyn2030 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt32Float32 == nil {
						r.EncodeNil()
					} else {
						yy2031 := *x.FptrMapInt32Float32
						if false {
						} else {
							h.encMapint32float32((map[int32]float32)(yy2031), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt32Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt32Float32`)
				}
				r.WriteMapElemValue()
				if yyn2030 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt32Float32 == nil {
						r.EncodeNil()
					} else {
						yy2033 := *x.FptrMapInt32Float32
						if false {
						} else {
							h.encMapint32float32((map[int32]float32)(yy2033), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt32Float64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32float64((map[int32]float64)(x.FMapInt32Float64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt32Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt32Float64`)
				}
				r.WriteMapElemValue()
				if x.FMapInt32Float64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32float64((map[int32]float64)(x.FMapInt32Float64), e)
					}
				}
			}
			var yyn2038 bool
			if x.FptrMapInt32Float64 == nil {
				yyn2038 = true
				goto LABEL2038
			}
		LABEL2038:
			if yyr2 || yy2arr2 {
				if yyn2038 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt32Float64 == nil {
						r.EncodeNil()
					} else {
						yy2039 := *x.FptrMapInt32Float64
						if false {
						} else {
							h.encMapint32float64((map[int32]float64)(yy2039), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt32Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt32Float64`)
				}
				r.WriteMapElemValue()
				if yyn2038 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt32Float64 == nil {
						r.EncodeNil()
					} else {
						yy2041 := *x.FptrMapInt32Float64
						if false {
						} else {
							h.encMapint32float64((map[int32]float64)(yy2041), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt32Bool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32bool((map[int32]bool)(x.FMapInt32Bool), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt32Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt32Bool`)
				}
				r.WriteMapElemValue()
				if x.FMapInt32Bool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint32bool((map[int32]bool)(x.FMapInt32Bool), e)
					}
				}
			}
			var yyn2046 bool
			if x.FptrMapInt32Bool == nil {
				yyn2046 = true
				goto LABEL2046
			}
		LABEL2046:
			if yyr2 || yy2arr2 {
				if yyn2046 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt32Bool == nil {
						r.EncodeNil()
					} else {
						yy2047 := *x.FptrMapInt32Bool
						if false {
						} else {
							h.encMapint32bool((map[int32]bool)(yy2047), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt32Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt32Bool`)
				}
				r.WriteMapElemValue()
				if yyn2046 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt32Bool == nil {
						r.EncodeNil()
					} else {
						yy2049 := *x.FptrMapInt32Bool
						if false {
						} else {
							h.encMapint32bool((map[int32]bool)(yy2049), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt64Intf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64Interface((map[int64]interface{})(x.FMapInt64Intf), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Intf`)
				}
				r.WriteMapElemValue()
				if x.FMapInt64Intf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64Interface((map[int64]interface{})(x.FMapInt64Intf), e)
					}
				}
			}
			var yyn2054 bool
			if x.FptrMapInt64Intf == nil {
				yyn2054 = true
				goto LABEL2054
			}
		LABEL2054:
			if yyr2 || yy2arr2 {
				if yyn2054 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt64Intf == nil {
						r.EncodeNil()
					} else {
						yy2055 := *x.FptrMapInt64Intf
						if false {
						} else {
							h.encMapint64Interface((map[int64]interface{})(yy2055), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Intf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Intf`)
				}
				r.WriteMapElemValue()
				if yyn2054 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt64Intf == nil {
						r.EncodeNil()
					} else {
						yy2057 := *x.FptrMapInt64Intf
						if false {
						} else {
							h.encMapint64Interface((map[int64]interface{})(yy2057), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt64String == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64string((map[int64]string)(x.FMapInt64String), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64String`)
				}
				r.WriteMapElemValue()
				if x.FMapInt64String == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64string((map[int64]string)(x.FMapInt64String), e)
					}
				}
			}
			var yyn2062 bool
			if x.FptrMapInt64String == nil {
				yyn2062 = true
				goto LABEL2062
			}
		LABEL2062:
			if yyr2 || yy2arr2 {
				if yyn2062 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt64String == nil {
						r.EncodeNil()
					} else {
						yy2063 := *x.FptrMapInt64String
						if false {
						} else {
							h.encMapint64string((map[int64]string)(yy2063), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64String\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64String`)
				}
				r.WriteMapElemValue()
				if yyn2062 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt64String == nil {
						r.EncodeNil()
					} else {
						yy2065 := *x.FptrMapInt64String
						if false {
						} else {
							h.encMapint64string((map[int64]string)(yy2065), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt64Uint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64uint((map[int64]uint)(x.FMapInt64Uint), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Uint`)
				}
				r.WriteMapElemValue()
				if x.FMapInt64Uint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64uint((map[int64]uint)(x.FMapInt64Uint), e)
					}
				}
			}
			var yyn2070 bool
			if x.FptrMapInt64Uint == nil {
				yyn2070 = true
				goto LABEL2070
			}
		LABEL2070:
			if yyr2 || yy2arr2 {
				if yyn2070 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt64Uint == nil {
						r.EncodeNil()
					} else {
						yy2071 := *x.FptrMapInt64Uint
						if false {
						} else {
							h.encMapint64uint((map[int64]uint)(yy2071), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Uint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Uint`)
				}
				r.WriteMapElemValue()
				if yyn2070 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt64Uint == nil {
						r.EncodeNil()
					} else {
						yy2073 := *x.FptrMapInt64Uint
						if false {
						} else {
							h.encMapint64uint((map[int64]uint)(yy2073), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt64Uint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64uint8((map[int64]uint8)(x.FMapInt64Uint8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Uint8`)
				}
				r.WriteMapElemValue()
				if x.FMapInt64Uint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64uint8((map[int64]uint8)(x.FMapInt64Uint8), e)
					}
				}
			}
			var yyn2078 bool
			if x.FptrMapInt64Uint8 == nil {
				yyn2078 = true
				goto LABEL2078
			}
		LABEL2078:
			if yyr2 || yy2arr2 {
				if yyn2078 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt64Uint8 == nil {
						r.EncodeNil()
					} else {
						yy2079 := *x.FptrMapInt64Uint8
						if false {
						} else {
							h.encMapint64uint8((map[int64]uint8)(yy2079), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Uint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Uint8`)
				}
				r.WriteMapElemValue()
				if yyn2078 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt64Uint8 == nil {
						r.EncodeNil()
					} else {
						yy2081 := *x.FptrMapInt64Uint8
						if false {
						} else {
							h.encMapint64uint8((map[int64]uint8)(yy2081), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt64Uint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64uint16((map[int64]uint16)(x.FMapInt64Uint16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Uint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Uint16`)
				}
				r.WriteMapElemValue()
				if x.FMapInt64Uint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64uint16((map[int64]uint16)(x.FMapInt64Uint16), e)
					}
				}
			}
			var yyn2086 bool
			if x.FptrMapInt64Uint16 == nil {
				yyn2086 = true
				goto LABEL2086
			}
		LABEL2086:
			if yyr2 || yy2arr2 {
				if yyn2086 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt64Uint16 == nil {
						r.EncodeNil()
					} else {
						yy2087 := *x.FptrMapInt64Uint16
						if false {
						} else {
							h.encMapint64uint16((map[int64]uint16)(yy2087), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Uint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Uint16`)
				}
				r.WriteMapElemValue()
				if yyn2086 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt64Uint16 == nil {
						r.EncodeNil()
					} else {
						yy2089 := *x.FptrMapInt64Uint16
						if false {
						} else {
							h.encMapint64uint16((map[int64]uint16)(yy2089), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt64Uint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64uint32((map[int64]uint32)(x.FMapInt64Uint32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Uint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Uint32`)
				}
				r.WriteMapElemValue()
				if x.FMapInt64Uint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64uint32((map[int64]uint32)(x.FMapInt64Uint32), e)
					}
				}
			}
			var yyn2094 bool
			if x.FptrMapInt64Uint32 == nil {
				yyn2094 = true
				goto LABEL2094
			}
		LABEL2094:
			if yyr2 || yy2arr2 {
				if yyn2094 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt64Uint32 == nil {
						r.EncodeNil()
					} else {
						yy2095 := *x.FptrMapInt64Uint32
						if false {
						} else {
							h.encMapint64uint32((map[int64]uint32)(yy2095), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Uint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Uint32`)
				}
				r.WriteMapElemValue()
				if yyn2094 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt64Uint32 == nil {
						r.EncodeNil()
					} else {
						yy2097 := *x.FptrMapInt64Uint32
						if false {
						} else {
							h.encMapint64uint32((map[int64]uint32)(yy2097), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt64Uint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64uint64((map[int64]uint64)(x.FMapInt64Uint64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Uint64`)
				}
				r.WriteMapElemValue()
				if x.FMapInt64Uint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64uint64((map[int64]uint64)(x.FMapInt64Uint64), e)
					}
				}
			}
			var yyn2102 bool
			if x.FptrMapInt64Uint64 == nil {
				yyn2102 = true
				goto LABEL2102
			}
		LABEL2102:
			if yyr2 || yy2arr2 {
				if yyn2102 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt64Uint64 == nil {
						r.EncodeNil()
					} else {
						yy2103 := *x.FptrMapInt64Uint64
						if false {
						} else {
							h.encMapint64uint64((map[int64]uint64)(yy2103), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Uint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Uint64`)
				}
				r.WriteMapElemValue()
				if yyn2102 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt64Uint64 == nil {
						r.EncodeNil()
					} else {
						yy2105 := *x.FptrMapInt64Uint64
						if false {
						} else {
							h.encMapint64uint64((map[int64]uint64)(yy2105), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt64Uintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64uintptr((map[int64]uintptr)(x.FMapInt64Uintptr), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Uintptr`)
				}
				r.WriteMapElemValue()
				if x.FMapInt64Uintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64uintptr((map[int64]uintptr)(x.FMapInt64Uintptr), e)
					}
				}
			}
			var yyn2110 bool
			if x.FptrMapInt64Uintptr == nil {
				yyn2110 = true
				goto LABEL2110
			}
		LABEL2110:
			if yyr2 || yy2arr2 {
				if yyn2110 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt64Uintptr == nil {
						r.EncodeNil()
					} else {
						yy2111 := *x.FptrMapInt64Uintptr
						if false {
						} else {
							h.encMapint64uintptr((map[int64]uintptr)(yy2111), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Uintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Uintptr`)
				}
				r.WriteMapElemValue()
				if yyn2110 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt64Uintptr == nil {
						r.EncodeNil()
					} else {
						yy2113 := *x.FptrMapInt64Uintptr
						if false {
						} else {
							h.encMapint64uintptr((map[int64]uintptr)(yy2113), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt64Int == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64int((map[int64]int)(x.FMapInt64Int), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Int`)
				}
				r.WriteMapElemValue()
				if x.FMapInt64Int == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64int((map[int64]int)(x.FMapInt64Int), e)
					}
				}
			}
			var yyn2118 bool
			if x.FptrMapInt64Int == nil {
				yyn2118 = true
				goto LABEL2118
			}
		LABEL2118:
			if yyr2 || yy2arr2 {
				if yyn2118 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt64Int == nil {
						r.EncodeNil()
					} else {
						yy2119 := *x.FptrMapInt64Int
						if false {
						} else {
							h.encMapint64int((map[int64]int)(yy2119), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Int\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Int`)
				}
				r.WriteMapElemValue()
				if yyn2118 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt64Int == nil {
						r.EncodeNil()
					} else {
						yy2121 := *x.FptrMapInt64Int
						if false {
						} else {
							h.encMapint64int((map[int64]int)(yy2121), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt64Int8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64int8((map[int64]int8)(x.FMapInt64Int8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Int8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Int8`)
				}
				r.WriteMapElemValue()
				if x.FMapInt64Int8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64int8((map[int64]int8)(x.FMapInt64Int8), e)
					}
				}
			}
			var yyn2126 bool
			if x.FptrMapInt64Int8 == nil {
				yyn2126 = true
				goto LABEL2126
			}
		LABEL2126:
			if yyr2 || yy2arr2 {
				if yyn2126 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt64Int8 == nil {
						r.EncodeNil()
					} else {
						yy2127 := *x.FptrMapInt64Int8
						if false {
						} else {
							h.encMapint64int8((map[int64]int8)(yy2127), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Int8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Int8`)
				}
				r.WriteMapElemValue()
				if yyn2126 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt64Int8 == nil {
						r.EncodeNil()
					} else {
						yy2129 := *x.FptrMapInt64Int8
						if false {
						} else {
							h.encMapint64int8((map[int64]int8)(yy2129), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt64Int16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64int16((map[int64]int16)(x.FMapInt64Int16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Int16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Int16`)
				}
				r.WriteMapElemValue()
				if x.FMapInt64Int16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64int16((map[int64]int16)(x.FMapInt64Int16), e)
					}
				}
			}
			var yyn2134 bool
			if x.FptrMapInt64Int16 == nil {
				yyn2134 = true
				goto LABEL2134
			}
		LABEL2134:
			if yyr2 || yy2arr2 {
				if yyn2134 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt64Int16 == nil {
						r.EncodeNil()
					} else {
						yy2135 := *x.FptrMapInt64Int16
						if false {
						} else {
							h.encMapint64int16((map[int64]int16)(yy2135), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Int16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Int16`)
				}
				r.WriteMapElemValue()
				if yyn2134 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt64Int16 == nil {
						r.EncodeNil()
					} else {
						yy2137 := *x.FptrMapInt64Int16
						if false {
						} else {
							h.encMapint64int16((map[int64]int16)(yy2137), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt64Int32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64int32((map[int64]int32)(x.FMapInt64Int32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Int32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Int32`)
				}
				r.WriteMapElemValue()
				if x.FMapInt64Int32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64int32((map[int64]int32)(x.FMapInt64Int32), e)
					}
				}
			}
			var yyn2142 bool
			if x.FptrMapInt64Int32 == nil {
				yyn2142 = true
				goto LABEL2142
			}
		LABEL2142:
			if yyr2 || yy2arr2 {
				if yyn2142 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt64Int32 == nil {
						r.EncodeNil()
					} else {
						yy2143 := *x.FptrMapInt64Int32
						if false {
						} else {
							h.encMapint64int32((map[int64]int32)(yy2143), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Int32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Int32`)
				}
				r.WriteMapElemValue()
				if yyn2142 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt64Int32 == nil {
						r.EncodeNil()
					} else {
						yy2145 := *x.FptrMapInt64Int32
						if false {
						} else {
							h.encMapint64int32((map[int64]int32)(yy2145), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt64Int64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64int64((map[int64]int64)(x.FMapInt64Int64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Int64`)
				}
				r.WriteMapElemValue()
				if x.FMapInt64Int64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64int64((map[int64]int64)(x.FMapInt64Int64), e)
					}
				}
			}
			var yyn2150 bool
			if x.FptrMapInt64Int64 == nil {
				yyn2150 = true
				goto LABEL2150
			}
		LABEL2150:
			if yyr2 || yy2arr2 {
				if yyn2150 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt64Int64 == nil {
						r.EncodeNil()
					} else {
						yy2151 := *x.FptrMapInt64Int64
						if false {
						} else {
							h.encMapint64int64((map[int64]int64)(yy2151), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Int64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Int64`)
				}
				r.WriteMapElemValue()
				if yyn2150 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt64Int64 == nil {
						r.EncodeNil()
					} else {
						yy2153 := *x.FptrMapInt64Int64
						if false {
						} else {
							h.encMapint64int64((map[int64]int64)(yy2153), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt64Float32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64float32((map[int64]float32)(x.FMapInt64Float32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Float32`)
				}
				r.WriteMapElemValue()
				if x.FMapInt64Float32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64float32((map[int64]float32)(x.FMapInt64Float32), e)
					}
				}
			}
			var yyn2158 bool
			if x.FptrMapInt64Float32 == nil {
				yyn2158 = true
				goto LABEL2158
			}
		LABEL2158:
			if yyr2 || yy2arr2 {
				if yyn2158 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt64Float32 == nil {
						r.EncodeNil()
					} else {
						yy2159 := *x.FptrMapInt64Float32
						if false {
						} else {
							h.encMapint64float32((map[int64]float32)(yy2159), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Float32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Float32`)
				}
				r.WriteMapElemValue()
				if yyn2158 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt64Float32 == nil {
						r.EncodeNil()
					} else {
						yy2161 := *x.FptrMapInt64Float32
						if false {
						} else {
							h.encMapint64float32((map[int64]float32)(yy2161), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt64Float64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64float64((map[int64]float64)(x.FMapInt64Float64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Float64`)
				}
				r.WriteMapElemValue()
				if x.FMapInt64Float64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64float64((map[int64]float64)(x.FMapInt64Float64), e)
					}
				}
			}
			var yyn2166 bool
			if x.FptrMapInt64Float64 == nil {
				yyn2166 = true
				goto LABEL2166
			}
		LABEL2166:
			if yyr2 || yy2arr2 {
				if yyn2166 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt64Float64 == nil {
						r.EncodeNil()
					} else {
						yy2167 := *x.FptrMapInt64Float64
						if false {
						} else {
							h.encMapint64float64((map[int64]float64)(yy2167), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Float64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Float64`)
				}
				r.WriteMapElemValue()
				if yyn2166 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt64Float64 == nil {
						r.EncodeNil()
					} else {
						yy2169 := *x.FptrMapInt64Float64
						if false {
						} else {
							h.encMapint64float64((map[int64]float64)(yy2169), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapInt64Bool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64bool((map[int64]bool)(x.FMapInt64Bool), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapInt64Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapInt64Bool`)
				}
				r.WriteMapElemValue()
				if x.FMapInt64Bool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapint64bool((map[int64]bool)(x.FMapInt64Bool), e)
					}
				}
			}
			var yyn2174 bool
			if x.FptrMapInt64Bool == nil {
				yyn2174 = true
				goto LABEL2174
			}
		LABEL2174:
			if yyr2 || yy2arr2 {
				if yyn2174 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapInt64Bool == nil {
						r.EncodeNil()
					} else {
						yy2175 := *x.FptrMapInt64Bool
						if false {
						} else {
							h.encMapint64bool((map[int64]bool)(yy2175), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapInt64Bool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapInt64Bool`)
				}
				r.WriteMapElemValue()
				if yyn2174 {
					r.EncodeNil()
				} else {
					if x.FptrMapInt64Bool == nil {
						r.EncodeNil()
					} else {
						yy2177 := *x.FptrMapInt64Bool
						if false {
						} else {
							h.encMapint64bool((map[int64]bool)(yy2177), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapBoolIntf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapboolInterface((map[bool]interface{})(x.FMapBoolIntf), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapBoolIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapBoolIntf`)
				}
				r.WriteMapElemValue()
				if x.FMapBoolIntf == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapboolInterface((map[bool]interface{})(x.FMapBoolIntf), e)
					}
				}
			}
			var yyn2182 bool
			if x.FptrMapBoolIntf == nil {
				yyn2182 = true
				goto LABEL2182
			}
		LABEL2182:
			if yyr2 || yy2arr2 {
				if yyn2182 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapBoolIntf == nil {
						r.EncodeNil()
					} else {
						yy2183 := *x.FptrMapBoolIntf
						if false {
						} else {
							h.encMapboolInterface((map[bool]interface{})(yy2183), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapBoolIntf\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapBoolIntf`)
				}
				r.WriteMapElemValue()
				if yyn2182 {
					r.EncodeNil()
				} else {
					if x.FptrMapBoolIntf == nil {
						r.EncodeNil()
					} else {
						yy2185 := *x.FptrMapBoolIntf
						if false {
						} else {
							h.encMapboolInterface((map[bool]interface{})(yy2185), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapBoolString == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapboolstring((map[bool]string)(x.FMapBoolString), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapBoolString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapBoolString`)
				}
				r.WriteMapElemValue()
				if x.FMapBoolString == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapboolstring((map[bool]string)(x.FMapBoolString), e)
					}
				}
			}
			var yyn2190 bool
			if x.FptrMapBoolString == nil {
				yyn2190 = true
				goto LABEL2190
			}
		LABEL2190:
			if yyr2 || yy2arr2 {
				if yyn2190 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapBoolString == nil {
						r.EncodeNil()
					} else {
						yy2191 := *x.FptrMapBoolString
						if false {
						} else {
							h.encMapboolstring((map[bool]string)(yy2191), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapBoolString\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapBoolString`)
				}
				r.WriteMapElemValue()
				if yyn2190 {
					r.EncodeNil()
				} else {
					if x.FptrMapBoolString == nil {
						r.EncodeNil()
					} else {
						yy2193 := *x.FptrMapBoolString
						if false {
						} else {
							h.encMapboolstring((map[bool]string)(yy2193), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapBoolUint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapbooluint((map[bool]uint)(x.FMapBoolUint), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapBoolUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapBoolUint`)
				}
				r.WriteMapElemValue()
				if x.FMapBoolUint == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapbooluint((map[bool]uint)(x.FMapBoolUint), e)
					}
				}
			}
			var yyn2198 bool
			if x.FptrMapBoolUint == nil {
				yyn2198 = true
				goto LABEL2198
			}
		LABEL2198:
			if yyr2 || yy2arr2 {
				if yyn2198 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapBoolUint == nil {
						r.EncodeNil()
					} else {
						yy2199 := *x.FptrMapBoolUint
						if false {
						} else {
							h.encMapbooluint((map[bool]uint)(yy2199), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapBoolUint\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapBoolUint`)
				}
				r.WriteMapElemValue()
				if yyn2198 {
					r.EncodeNil()
				} else {
					if x.FptrMapBoolUint == nil {
						r.EncodeNil()
					} else {
						yy2201 := *x.FptrMapBoolUint
						if false {
						} else {
							h.encMapbooluint((map[bool]uint)(yy2201), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapBoolUint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapbooluint8((map[bool]uint8)(x.FMapBoolUint8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapBoolUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapBoolUint8`)
				}
				r.WriteMapElemValue()
				if x.FMapBoolUint8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapbooluint8((map[bool]uint8)(x.FMapBoolUint8), e)
					}
				}
			}
			var yyn2206 bool
			if x.FptrMapBoolUint8 == nil {
				yyn2206 = true
				goto LABEL2206
			}
		LABEL2206:
			if yyr2 || yy2arr2 {
				if yyn2206 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapBoolUint8 == nil {
						r.EncodeNil()
					} else {
						yy2207 := *x.FptrMapBoolUint8
						if false {
						} else {
							h.encMapbooluint8((map[bool]uint8)(yy2207), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapBoolUint8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapBoolUint8`)
				}
				r.WriteMapElemValue()
				if yyn2206 {
					r.EncodeNil()
				} else {
					if x.FptrMapBoolUint8 == nil {
						r.EncodeNil()
					} else {
						yy2209 := *x.FptrMapBoolUint8
						if false {
						} else {
							h.encMapbooluint8((map[bool]uint8)(yy2209), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapBoolUint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapbooluint16((map[bool]uint16)(x.FMapBoolUint16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapBoolUint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapBoolUint16`)
				}
				r.WriteMapElemValue()
				if x.FMapBoolUint16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapbooluint16((map[bool]uint16)(x.FMapBoolUint16), e)
					}
				}
			}
			var yyn2214 bool
			if x.FptrMapBoolUint16 == nil {
				yyn2214 = true
				goto LABEL2214
			}
		LABEL2214:
			if yyr2 || yy2arr2 {
				if yyn2214 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapBoolUint16 == nil {
						r.EncodeNil()
					} else {
						yy2215 := *x.FptrMapBoolUint16
						if false {
						} else {
							h.encMapbooluint16((map[bool]uint16)(yy2215), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapBoolUint16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapBoolUint16`)
				}
				r.WriteMapElemValue()
				if yyn2214 {
					r.EncodeNil()
				} else {
					if x.FptrMapBoolUint16 == nil {
						r.EncodeNil()
					} else {
						yy2217 := *x.FptrMapBoolUint16
						if false {
						} else {
							h.encMapbooluint16((map[bool]uint16)(yy2217), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapBoolUint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapbooluint32((map[bool]uint32)(x.FMapBoolUint32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapBoolUint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapBoolUint32`)
				}
				r.WriteMapElemValue()
				if x.FMapBoolUint32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapbooluint32((map[bool]uint32)(x.FMapBoolUint32), e)
					}
				}
			}
			var yyn2222 bool
			if x.FptrMapBoolUint32 == nil {
				yyn2222 = true
				goto LABEL2222
			}
		LABEL2222:
			if yyr2 || yy2arr2 {
				if yyn2222 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapBoolUint32 == nil {
						r.EncodeNil()
					} else {
						yy2223 := *x.FptrMapBoolUint32
						if false {
						} else {
							h.encMapbooluint32((map[bool]uint32)(yy2223), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapBoolUint32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapBoolUint32`)
				}
				r.WriteMapElemValue()
				if yyn2222 {
					r.EncodeNil()
				} else {
					if x.FptrMapBoolUint32 == nil {
						r.EncodeNil()
					} else {
						yy2225 := *x.FptrMapBoolUint32
						if false {
						} else {
							h.encMapbooluint32((map[bool]uint32)(yy2225), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapBoolUint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapbooluint64((map[bool]uint64)(x.FMapBoolUint64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapBoolUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapBoolUint64`)
				}
				r.WriteMapElemValue()
				if x.FMapBoolUint64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapbooluint64((map[bool]uint64)(x.FMapBoolUint64), e)
					}
				}
			}
			var yyn2230 bool
			if x.FptrMapBoolUint64 == nil {
				yyn2230 = true
				goto LABEL2230
			}
		LABEL2230:
			if yyr2 || yy2arr2 {
				if yyn2230 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapBoolUint64 == nil {
						r.EncodeNil()
					} else {
						yy2231 := *x.FptrMapBoolUint64
						if false {
						} else {
							h.encMapbooluint64((map[bool]uint64)(yy2231), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapBoolUint64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapBoolUint64`)
				}
				r.WriteMapElemValue()
				if yyn2230 {
					r.EncodeNil()
				} else {
					if x.FptrMapBoolUint64 == nil {
						r.EncodeNil()
					} else {
						yy2233 := *x.FptrMapBoolUint64
						if false {
						} else {
							h.encMapbooluint64((map[bool]uint64)(yy2233), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapBoolUintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapbooluintptr((map[bool]uintptr)(x.FMapBoolUintptr), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapBoolUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapBoolUintptr`)
				}
				r.WriteMapElemValue()
				if x.FMapBoolUintptr == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapbooluintptr((map[bool]uintptr)(x.FMapBoolUintptr), e)
					}
				}
			}
			var yyn2238 bool
			if x.FptrMapBoolUintptr == nil {
				yyn2238 = true
				goto LABEL2238
			}
		LABEL2238:
			if yyr2 || yy2arr2 {
				if yyn2238 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapBoolUintptr == nil {
						r.EncodeNil()
					} else {
						yy2239 := *x.FptrMapBoolUintptr
						if false {
						} else {
							h.encMapbooluintptr((map[bool]uintptr)(yy2239), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapBoolUintptr\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapBoolUintptr`)
				}
				r.WriteMapElemValue()
				if yyn2238 {
					r.EncodeNil()
				} else {
					if x.FptrMapBoolUintptr == nil {
						r.EncodeNil()
					} else {
						yy2241 := *x.FptrMapBoolUintptr
						if false {
						} else {
							h.encMapbooluintptr((map[bool]uintptr)(yy2241), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapBoolInt == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapboolint((map[bool]int)(x.FMapBoolInt), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapBoolInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapBoolInt`)
				}
				r.WriteMapElemValue()
				if x.FMapBoolInt == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapboolint((map[bool]int)(x.FMapBoolInt), e)
					}
				}
			}
			var yyn2246 bool
			if x.FptrMapBoolInt == nil {
				yyn2246 = true
				goto LABEL2246
			}
		LABEL2246:
			if yyr2 || yy2arr2 {
				if yyn2246 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapBoolInt == nil {
						r.EncodeNil()
					} else {
						yy2247 := *x.FptrMapBoolInt
						if false {
						} else {
							h.encMapboolint((map[bool]int)(yy2247), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapBoolInt\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapBoolInt`)
				}
				r.WriteMapElemValue()
				if yyn2246 {
					r.EncodeNil()
				} else {
					if x.FptrMapBoolInt == nil {
						r.EncodeNil()
					} else {
						yy2249 := *x.FptrMapBoolInt
						if false {
						} else {
							h.encMapboolint((map[bool]int)(yy2249), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapBoolInt8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapboolint8((map[bool]int8)(x.FMapBoolInt8), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapBoolInt8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapBoolInt8`)
				}
				r.WriteMapElemValue()
				if x.FMapBoolInt8 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapboolint8((map[bool]int8)(x.FMapBoolInt8), e)
					}
				}
			}
			var yyn2254 bool
			if x.FptrMapBoolInt8 == nil {
				yyn2254 = true
				goto LABEL2254
			}
		LABEL2254:
			if yyr2 || yy2arr2 {
				if yyn2254 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapBoolInt8 == nil {
						r.EncodeNil()
					} else {
						yy2255 := *x.FptrMapBoolInt8
						if false {
						} else {
							h.encMapboolint8((map[bool]int8)(yy2255), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapBoolInt8\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapBoolInt8`)
				}
				r.WriteMapElemValue()
				if yyn2254 {
					r.EncodeNil()
				} else {
					if x.FptrMapBoolInt8 == nil {
						r.EncodeNil()
					} else {
						yy2257 := *x.FptrMapBoolInt8
						if false {
						} else {
							h.encMapboolint8((map[bool]int8)(yy2257), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapBoolInt16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapboolint16((map[bool]int16)(x.FMapBoolInt16), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapBoolInt16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapBoolInt16`)
				}
				r.WriteMapElemValue()
				if x.FMapBoolInt16 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapboolint16((map[bool]int16)(x.FMapBoolInt16), e)
					}
				}
			}
			var yyn2262 bool
			if x.FptrMapBoolInt16 == nil {
				yyn2262 = true
				goto LABEL2262
			}
		LABEL2262:
			if yyr2 || yy2arr2 {
				if yyn2262 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapBoolInt16 == nil {
						r.EncodeNil()
					} else {
						yy2263 := *x.FptrMapBoolInt16
						if false {
						} else {
							h.encMapboolint16((map[bool]int16)(yy2263), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapBoolInt16\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapBoolInt16`)
				}
				r.WriteMapElemValue()
				if yyn2262 {
					r.EncodeNil()
				} else {
					if x.FptrMapBoolInt16 == nil {
						r.EncodeNil()
					} else {
						yy2265 := *x.FptrMapBoolInt16
						if false {
						} else {
							h.encMapboolint16((map[bool]int16)(yy2265), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapBoolInt32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapboolint32((map[bool]int32)(x.FMapBoolInt32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapBoolInt32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapBoolInt32`)
				}
				r.WriteMapElemValue()
				if x.FMapBoolInt32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapboolint32((map[bool]int32)(x.FMapBoolInt32), e)
					}
				}
			}
			var yyn2270 bool
			if x.FptrMapBoolInt32 == nil {
				yyn2270 = true
				goto LABEL2270
			}
		LABEL2270:
			if yyr2 || yy2arr2 {
				if yyn2270 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapBoolInt32 == nil {
						r.EncodeNil()
					} else {
						yy2271 := *x.FptrMapBoolInt32
						if false {
						} else {
							h.encMapboolint32((map[bool]int32)(yy2271), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapBoolInt32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapBoolInt32`)
				}
				r.WriteMapElemValue()
				if yyn2270 {
					r.EncodeNil()
				} else {
					if x.FptrMapBoolInt32 == nil {
						r.EncodeNil()
					} else {
						yy2273 := *x.FptrMapBoolInt32
						if false {
						} else {
							h.encMapboolint32((map[bool]int32)(yy2273), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapBoolInt64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapboolint64((map[bool]int64)(x.FMapBoolInt64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapBoolInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapBoolInt64`)
				}
				r.WriteMapElemValue()
				if x.FMapBoolInt64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapboolint64((map[bool]int64)(x.FMapBoolInt64), e)
					}
				}
			}
			var yyn2278 bool
			if x.FptrMapBoolInt64 == nil {
				yyn2278 = true
				goto LABEL2278
			}
		LABEL2278:
			if yyr2 || yy2arr2 {
				if yyn2278 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapBoolInt64 == nil {
						r.EncodeNil()
					} else {
						yy2279 := *x.FptrMapBoolInt64
						if false {
						} else {
							h.encMapboolint64((map[bool]int64)(yy2279), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapBoolInt64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapBoolInt64`)
				}
				r.WriteMapElemValue()
				if yyn2278 {
					r.EncodeNil()
				} else {
					if x.FptrMapBoolInt64 == nil {
						r.EncodeNil()
					} else {
						yy2281 := *x.FptrMapBoolInt64
						if false {
						} else {
							h.encMapboolint64((map[bool]int64)(yy2281), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapBoolFloat32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapboolfloat32((map[bool]float32)(x.FMapBoolFloat32), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapBoolFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapBoolFloat32`)
				}
				r.WriteMapElemValue()
				if x.FMapBoolFloat32 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapboolfloat32((map[bool]float32)(x.FMapBoolFloat32), e)
					}
				}
			}
			var yyn2286 bool
			if x.FptrMapBoolFloat32 == nil {
				yyn2286 = true
				goto LABEL2286
			}
		LABEL2286:
			if yyr2 || yy2arr2 {
				if yyn2286 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapBoolFloat32 == nil {
						r.EncodeNil()
					} else {
						yy2287 := *x.FptrMapBoolFloat32
						if false {
						} else {
							h.encMapboolfloat32((map[bool]float32)(yy2287), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapBoolFloat32\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapBoolFloat32`)
				}
				r.WriteMapElemValue()
				if yyn2286 {
					r.EncodeNil()
				} else {
					if x.FptrMapBoolFloat32 == nil {
						r.EncodeNil()
					} else {
						yy2289 := *x.FptrMapBoolFloat32
						if false {
						} else {
							h.encMapboolfloat32((map[bool]float32)(yy2289), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapBoolFloat64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapboolfloat64((map[bool]float64)(x.FMapBoolFloat64), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapBoolFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapBoolFloat64`)
				}
				r.WriteMapElemValue()
				if x.FMapBoolFloat64 == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapboolfloat64((map[bool]float64)(x.FMapBoolFloat64), e)
					}
				}
			}
			var yyn2294 bool
			if x.FptrMapBoolFloat64 == nil {
				yyn2294 = true
				goto LABEL2294
			}
		LABEL2294:
			if yyr2 || yy2arr2 {
				if yyn2294 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapBoolFloat64 == nil {
						r.EncodeNil()
					} else {
						yy2295 := *x.FptrMapBoolFloat64
						if false {
						} else {
							h.encMapboolfloat64((map[bool]float64)(yy2295), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapBoolFloat64\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapBoolFloat64`)
				}
				r.WriteMapElemValue()
				if yyn2294 {
					r.EncodeNil()
				} else {
					if x.FptrMapBoolFloat64 == nil {
						r.EncodeNil()
					} else {
						yy2297 := *x.FptrMapBoolFloat64
						if false {
						} else {
							h.encMapboolfloat64((map[bool]float64)(yy2297), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.FMapBoolBool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapboolbool((map[bool]bool)(x.FMapBoolBool), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FMapBoolBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FMapBoolBool`)
				}
				r.WriteMapElemValue()
				if x.FMapBoolBool == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapboolbool((map[bool]bool)(x.FMapBoolBool), e)
					}
				}
			}
			var yyn2302 bool
			if x.FptrMapBoolBool == nil {
				yyn2302 = true
				goto LABEL2302
			}
		LABEL2302:
			if yyr2 || yy2arr2 {
				if yyn2302 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.FptrMapBoolBool == nil {
						r.EncodeNil()
					} else {
						yy2303 := *x.FptrMapBoolBool
						if false {
						} else {
							h.encMapboolbool((map[bool]bool)(yy2303), e)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FptrMapBoolBool\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `FptrMapBoolBool`)
				}
				r.WriteMapElemValue()
				if yyn2302 {
					r.EncodeNil()
				} else {
					if x.FptrMapBoolBool == nil {
						r.EncodeNil()
					} else {
						yy2305 := *x.FptrMapBoolBool
						if false {
						} else {
							h.encMapboolbool((map[bool]bool)(yy2305), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *TestMammoth2) CodecDecodeSelf(d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap19781 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray19781 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct19781)
		}
	}
}

func (x *TestMammoth2) codecDecodeSelfFromMap(l int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "FIntf":
			if r.TryDecodeAsNil() {
				x.FIntf = nil
			} else {
				if false {
				} else {
					z.DecFallback(&x.FIntf, true)
				}
			}
		case "FptrIntf":
			if r.TryDecodeAsNil() {
				if true && x.FptrIntf != nil {
					x.FptrIntf = nil
				}
			} else {
				if x.FptrIntf == nil {
					x.FptrIntf = new(interface{})
				}

				if false {
				} else {
					z.DecFallback(x.FptrIntf, true)
				}
			}
		case "FString":
			if r.TryDecodeAsNil() {
				x.FString = ""
			} else {
				x.FString = (string)(r.DecodeString())
			}
		case "FptrString":
			if r.TryDecodeAsNil() {
				if true && x.FptrString != nil {
					x.FptrString = nil
				}
			} else {
				if x.FptrString == nil {
					x.FptrString = new(string)
				}

				if false {
				} else {
					*x.FptrString = (string)(r.DecodeString())
				}
			}
		case "FFloat32":
			if r.TryDecodeAsNil() {
				x.FFloat32 = 0
			} else {
				x.FFloat32 = (float32)(r.DecodeFloat32As64())
			}
		case "FptrFloat32":
			if r.TryDecodeAsNil() {
				if true && x.FptrFloat32 != nil {
					x.FptrFloat32 = nil
				}
			} else {
				if x.FptrFloat32 == nil {
					x.FptrFloat32 = new(float32)
				}

				if false {
				} else {
					*x.FptrFloat32 = (float32)(r.DecodeFloat32As64())
				}
			}
		case "FFloat64":
			if r.TryDecodeAsNil() {
				x.FFloat64 = 0
			} else {
				x.FFloat64 = (float64)(r.DecodeFloat64())
			}
		case "FptrFloat64":
			if r.TryDecodeAsNil() {
				if true && x.FptrFloat64 != nil {
					x.FptrFloat64 = nil
				}
			} else {
				if x.FptrFloat64 == nil {
					x.FptrFloat64 = new(float64)
				}

				if false {
				} else {
					*x.FptrFloat64 = (float64)(r.DecodeFloat64())
				}
			}
		case "FUint":
			if r.TryDecodeAsNil() {
				x.FUint = 0
			} else {
				x.FUint = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}
		case "FptrUint":
			if r.TryDecodeAsNil() {
				if true && x.FptrUint != nil {
					x.FptrUint = nil
				}
			} else {
				if x.FptrUint == nil {
					x.FptrUint = new(uint)
				}

				if false {
				} else {
					*x.FptrUint = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
				}
			}
		case "FUint8":
			if r.TryDecodeAsNil() {
				x.FUint8 = 0
			} else {
				x.FUint8 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}
		case "FptrUint8":
			if r.TryDecodeAsNil() {
				if true && x.FptrUint8 != nil {
					x.FptrUint8 = nil
				}
			} else {
				if x.FptrUint8 == nil {
					x.FptrUint8 = new(uint8)
				}

				if false {
				} else {
					*x.FptrUint8 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
				}
			}
		case "FUint16":
			if r.TryDecodeAsNil() {
				x.FUint16 = 0
			} else {
				x.FUint16 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}
		case "FptrUint16":
			if r.TryDecodeAsNil() {
				if true && x.FptrUint16 != nil {
					x.FptrUint16 = nil
				}
			} else {
				if x.FptrUint16 == nil {
					x.FptrUint16 = new(uint16)
				}

				if false {
				} else {
					*x.FptrUint16 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
				}
			}
		case "FUint32":
			if r.TryDecodeAsNil() {
				x.FUint32 = 0
			} else {
				x.FUint32 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}
		case "FptrUint32":
			if r.TryDecodeAsNil() {
				if true && x.FptrUint32 != nil {
					x.FptrUint32 = nil
				}
			} else {
				if x.FptrUint32 == nil {
					x.FptrUint32 = new(uint32)
				}

				if false {
				} else {
					*x.FptrUint32 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
				}
			}
		case "FUint64":
			if r.TryDecodeAsNil() {
				x.FUint64 = 0
			} else {
				x.FUint64 = (uint64)(r.DecodeUint64())
			}
		case "FptrUint64":
			if r.TryDecodeAsNil() {
				if true && x.FptrUint64 != nil {
					x.FptrUint64 = nil
				}
			} else {
				if x.FptrUint64 == nil {
					x.FptrUint64 = new(uint64)
				}

				if false {
				} else {
					*x.FptrUint64 = (uint64)(r.DecodeUint64())
				}
			}
		case "FUintptr":
			if r.TryDecodeAsNil() {
				x.FUintptr = 0
			} else {
				x.FUintptr = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}
		case "FptrUintptr":
			if r.TryDecodeAsNil() {
				if true && x.FptrUintptr != nil {
					x.FptrUintptr = nil
				}
			} else {
				if x.FptrUintptr == nil {
					x.FptrUintptr = new(uintptr)
				}

				if false {
				} else {
					*x.FptrUintptr = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
				}
			}
		case "FInt":
			if r.TryDecodeAsNil() {
				x.FInt = 0
			} else {
				x.FInt = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}
		case "FptrInt":
			if r.TryDecodeAsNil() {
				if true && x.FptrInt != nil {
					x.FptrInt = nil
				}
			} else {
				if x.FptrInt == nil {
					x.FptrInt = new(int)
				}

				if false {
				} else {
					*x.FptrInt = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
				}
			}
		case "FInt8":
			if r.TryDecodeAsNil() {
				x.FInt8 = 0
			} else {
				x.FInt8 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}
		case "FptrInt8":
			if r.TryDecodeAsNil() {
				if true && x.FptrInt8 != nil {
					x.FptrInt8 = nil
				}
			} else {
				if x.FptrInt8 == nil {
					x.FptrInt8 = new(int8)
				}

				if false {
				} else {
					*x.FptrInt8 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
				}
			}
		case "FInt16":
			if r.TryDecodeAsNil() {
				x.FInt16 = 0
			} else {
				x.FInt16 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}
		case "FptrInt16":
			if r.TryDecodeAsNil() {
				if true && x.FptrInt16 != nil {
					x.FptrInt16 = nil
				}
			} else {
				if x.FptrInt16 == nil {
					x.FptrInt16 = new(int16)
				}

				if false {
				} else {
					*x.FptrInt16 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
				}
			}
		case "FInt32":
			if r.TryDecodeAsNil() {
				x.FInt32 = 0
			} else {
				x.FInt32 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}
		case "FptrInt32":
			if r.TryDecodeAsNil() {
				if true && x.FptrInt32 != nil {
					x.FptrInt32 = nil
				}
			} else {
				if x.FptrInt32 == nil {
					x.FptrInt32 = new(int32)
				}

				if false {
				} else {
					*x.FptrInt32 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
				}
			}
		case "FInt64":
			if r.TryDecodeAsNil() {
				x.FInt64 = 0
			} else {
				x.FInt64 = (int64)(r.DecodeInt64())
			}
		case "FptrInt64":
			if r.TryDecodeAsNil() {
				if true && x.FptrInt64 != nil {
					x.FptrInt64 = nil
				}
			} else {
				if x.FptrInt64 == nil {
					x.FptrInt64 = new(int64)
				}

				if false {
				} else {
					*x.FptrInt64 = (int64)(r.DecodeInt64())
				}
			}
		case "FBool":
			if r.TryDecodeAsNil() {
				x.FBool = false
			} else {
				x.FBool = (bool)(r.DecodeBool())
			}
		case "FptrBool":
			if r.TryDecodeAsNil() {
				if true && x.FptrBool != nil {
					x.FptrBool = nil
				}
			} else {
				if x.FptrBool == nil {
					x.FptrBool = new(bool)
				}

				if false {
				} else {
					*x.FptrBool = (bool)(r.DecodeBool())
				}
			}
		case "FSliceIntf":
			if r.TryDecodeAsNil() {
				x.FSliceIntf = nil
			} else {
				if false {
				} else {
					h.decSliceInterface((*[]interface{})(&x.FSliceIntf), d)
				}
			}
		case "FptrSliceIntf":
			if r.TryDecodeAsNil() {
				if true && x.FptrSliceIntf != nil {
					x.FptrSliceIntf = nil
				}
			} else {
				if x.FptrSliceIntf == nil {
					x.FptrSliceIntf = new([]interface{})
				}

				if false {
				} else {
					h.decSliceInterface((*[]interface{})(x.FptrSliceIntf), d)
				}
			}
		case "FSliceString":
			if r.TryDecodeAsNil() {
				x.FSliceString = nil
			} else {
				if false {
				} else {
					h.decSlicestring((*[]string)(&x.FSliceString), d)
				}
			}
		case "FptrSliceString":
			if r.TryDecodeAsNil() {
				if true && x.FptrSliceString != nil {
					x.FptrSliceString = nil
				}
			} else {
				if x.FptrSliceString == nil {
					x.FptrSliceString = new([]string)
				}

				if false {
				} else {
					h.decSlicestring((*[]string)(x.FptrSliceString), d)
				}
			}
		case "FSliceFloat32":
			if r.TryDecodeAsNil() {
				x.FSliceFloat32 = nil
			} else {
				if false {
				} else {
					h.decSlicefloat32((*[]float32)(&x.FSliceFloat32), d)
				}
			}
		case "FptrSliceFloat32":
			if r.TryDecodeAsNil() {
				if true && x.FptrSliceFloat32 != nil {
					x.FptrSliceFloat32 = nil
				}
			} else {
				if x.FptrSliceFloat32 == nil {
					x.FptrSliceFloat32 = new([]float32)
				}

				if false {
				} else {
					h.decSlicefloat32((*[]float32)(x.FptrSliceFloat32), d)
				}
			}
		case "FSliceFloat64":
			if r.TryDecodeAsNil() {
				x.FSliceFloat64 = nil
			} else {
				if false {
				} else {
					h.decSlicefloat64((*[]float64)(&x.FSliceFloat64), d)
				}
			}
		case "FptrSliceFloat64":
			if r.TryDecodeAsNil() {
				if true && x.FptrSliceFloat64 != nil {
					x.FptrSliceFloat64 = nil
				}
			} else {
				if x.FptrSliceFloat64 == nil {
					x.FptrSliceFloat64 = new([]float64)
				}

				if false {
				} else {
					h.decSlicefloat64((*[]float64)(x.FptrSliceFloat64), d)
				}
			}
		case "FSliceUint":
			if r.TryDecodeAsNil() {
				x.FSliceUint = nil
			} else {
				if false {
				} else {
					h.decSliceuint((*[]uint)(&x.FSliceUint), d)
				}
			}
		case "FptrSliceUint":
			if r.TryDecodeAsNil() {
				if true && x.FptrSliceUint != nil {
					x.FptrSliceUint = nil
				}
			} else {
				if x.FptrSliceUint == nil {
					x.FptrSliceUint = new([]uint)
				}

				if false {
				} else {
					h.decSliceuint((*[]uint)(x.FptrSliceUint), d)
				}
			}
		case "FSliceUint8":
			if r.TryDecodeAsNil() {
				x.FSliceUint8 = nil
			} else {
				if false {
				} else {
					x.FSliceUint8 = r.DecodeBytes(([]byte)(x.FSliceUint8), false)
				}
			}
		case "FptrSliceUint8":
			if r.TryDecodeAsNil() {
				if true && x.FptrSliceUint8 != nil {
					x.FptrSliceUint8 = nil
				}
			} else {
				if x.FptrSliceUint8 == nil {
					x.FptrSliceUint8 = new([]uint8)
				}

				if false {
				} else {
					*x.FptrSliceUint8 = r.DecodeBytes(*(*[]byte)(x.FptrSliceUint8), false)
				}
			}
		case "FSliceUint16":
			if r.TryDecodeAsNil() {
				x.FSliceUint16 = nil
			} else {
				if false {
				} else {
					h.decSliceuint16((*[]uint16)(&x.FSliceUint16), d)
				}
			}
		case "FptrSliceUint16":
			if r.TryDecodeAsNil() {
				if true && x.FptrSliceUint16 != nil {
					x.FptrSliceUint16 = nil
				}
			} else {
				if x.FptrSliceUint16 == nil {
					x.FptrSliceUint16 = new([]uint16)
				}

				if false {
				} else {
					h.decSliceuint16((*[]uint16)(x.FptrSliceUint16), d)
				}
			}
		case "FSliceUint32":
			if r.TryDecodeAsNil() {
				x.FSliceUint32 = nil
			} else {
				if false {
				} else {
					h.decSliceuint32((*[]uint32)(&x.FSliceUint32), d)
				}
			}
		case "FptrSliceUint32":
			if r.TryDecodeAsNil() {
				if true && x.FptrSliceUint32 != nil {
					x.FptrSliceUint32 = nil
				}
			} else {
				if x.FptrSliceUint32 == nil {
					x.FptrSliceUint32 = new([]uint32)
				}

				if false {
				} else {
					h.decSliceuint32((*[]uint32)(x.FptrSliceUint32), d)
				}
			}
		case "FSliceUint64":
			if r.TryDecodeAsNil() {
				x.FSliceUint64 = nil
			} else {
				if false {
				} else {
					h.decSliceuint64((*[]uint64)(&x.FSliceUint64), d)
				}
			}
		case "FptrSliceUint64":
			if r.TryDecodeAsNil() {
				if true && x.FptrSliceUint64 != nil {
					x.FptrSliceUint64 = nil
				}
			} else {
				if x.FptrSliceUint64 == nil {
					x.FptrSliceUint64 = new([]uint64)
				}

				if false {
				} else {
					h.decSliceuint64((*[]uint64)(x.FptrSliceUint64), d)
				}
			}
		case "FSliceUintptr":
			if r.TryDecodeAsNil() {
				x.FSliceUintptr = nil
			} else {
				if false {
				} else {
					h.decSliceuintptr((*[]uintptr)(&x.FSliceUintptr), d)
				}
			}
		case "FptrSliceUintptr":
			if r.TryDecodeAsNil() {
				if true && x.FptrSliceUintptr != nil {
					x.FptrSliceUintptr = nil
				}
			} else {
				if x.FptrSliceUintptr == nil {
					x.FptrSliceUintptr = new([]uintptr)
				}

				if false {
				} else {
					h.decSliceuintptr((*[]uintptr)(x.FptrSliceUintptr), d)
				}
			}
		case "FSliceInt":
			if r.TryDecodeAsNil() {
				x.FSliceInt = nil
			} else {
				if false {
				} else {
					h.decSliceint((*[]int)(&x.FSliceInt), d)
				}
			}
		case "FptrSliceInt":
			if r.TryDecodeAsNil() {
				if true && x.FptrSliceInt != nil {
					x.FptrSliceInt = nil
				}
			} else {
				if x.FptrSliceInt == nil {
					x.FptrSliceInt = new([]int)
				}

				if false {
				} else {
					h.decSliceint((*[]int)(x.FptrSliceInt), d)
				}
			}
		case "FSliceInt8":
			if r.TryDecodeAsNil() {
				x.FSliceInt8 = nil
			} else {
				if false {
				} else {
					h.decSliceint8((*[]int8)(&x.FSliceInt8), d)
				}
			}
		case "FptrSliceInt8":
			if r.TryDecodeAsNil() {
				if true && x.FptrSliceInt8 != nil {
					x.FptrSliceInt8 = nil
				}
			} else {
				if x.FptrSliceInt8 == nil {
					x.FptrSliceInt8 = new([]int8)
				}

				if false {
				} else {
					h.decSliceint8((*[]int8)(x.FptrSliceInt8), d)
				}
			}
		case "FSliceInt16":
			if r.TryDecodeAsNil() {
				x.FSliceInt16 = nil
			} else {
				if false {
				} else {
					h.decSliceint16((*[]int16)(&x.FSliceInt16), d)
				}
			}
		case "FptrSliceInt16":
			if r.TryDecodeAsNil() {
				if true && x.FptrSliceInt16 != nil {
					x.FptrSliceInt16 = nil
				}
			} else {
				if x.FptrSliceInt16 == nil {
					x.FptrSliceInt16 = new([]int16)
				}

				if false {
				} else {
					h.decSliceint16((*[]int16)(x.FptrSliceInt16), d)
				}
			}
		case "FSliceInt32":
			if r.TryDecodeAsNil() {
				x.FSliceInt32 = nil
			} else {
				if false {
				} else {
					h.decSliceint32((*[]int32)(&x.FSliceInt32), d)
				}
			}
		case "FptrSliceInt32":
			if r.TryDecodeAsNil() {
				if true && x.FptrSliceInt32 != nil {
					x.FptrSliceInt32 = nil
				}
			} else {
				if x.FptrSliceInt32 == nil {
					x.FptrSliceInt32 = new([]int32)
				}

				if false {
				} else {
					h.decSliceint32((*[]int32)(x.FptrSliceInt32), d)
				}
			}
		case "FSliceInt64":
			if r.TryDecodeAsNil() {
				x.FSliceInt64 = nil
			} else {
				if false {
				} else {
					h.decSliceint64((*[]int64)(&x.FSliceInt64), d)
				}
			}
		case "FptrSliceInt64":
			if r.TryDecodeAsNil() {
				if true && x.FptrSliceInt64 != nil {
					x.FptrSliceInt64 = nil
				}
			} else {
				if x.FptrSliceInt64 == nil {
					x.FptrSliceInt64 = new([]int64)
				}

				if false {
				} else {
					h.decSliceint64((*[]int64)(x.FptrSliceInt64), d)
				}
			}
		case "FSliceBool":
			if r.TryDecodeAsNil() {
				x.FSliceBool = nil
			} else {
				if false {
				} else {
					h.decSlicebool((*[]bool)(&x.FSliceBool), d)
				}
			}
		case "FptrSliceBool":
			if r.TryDecodeAsNil() {
				if true && x.FptrSliceBool != nil {
					x.FptrSliceBool = nil
				}
			} else {
				if x.FptrSliceBool == nil {
					x.FptrSliceBool = new([]bool)
				}

				if false {
				} else {
					h.decSlicebool((*[]bool)(x.FptrSliceBool), d)
				}
			}
		case "FMapIntfIntf":
			if r.TryDecodeAsNil() {
				x.FMapIntfIntf = nil
			} else {
				if false {
				} else {
					h.decMapInterfaceInterface((*map[interface{}]interface{})(&x.FMapIntfIntf), d)
				}
			}
		case "FptrMapIntfIntf":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntfIntf != nil {
					x.FptrMapIntfIntf = nil
				}
			} else {
				if x.FptrMapIntfIntf == nil {
					x.FptrMapIntfIntf = new(map[interface{}]interface{})
				}

				if false {
				} else {
					h.decMapInterfaceInterface((*map[interface{}]interface{})(x.FptrMapIntfIntf), d)
				}
			}
		case "FMapIntfString":
			if r.TryDecodeAsNil() {
				x.FMapIntfString = nil
			} else {
				if false {
				} else {
					h.decMapInterfacestring((*map[interface{}]string)(&x.FMapIntfString), d)
				}
			}
		case "FptrMapIntfString":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntfString != nil {
					x.FptrMapIntfString = nil
				}
			} else {
				if x.FptrMapIntfString == nil {
					x.FptrMapIntfString = new(map[interface{}]string)
				}

				if false {
				} else {
					h.decMapInterfacestring((*map[interface{}]string)(x.FptrMapIntfString), d)
				}
			}
		case "FMapIntfUint":
			if r.TryDecodeAsNil() {
				x.FMapIntfUint = nil
			} else {
				if false {
				} else {
					h.decMapInterfaceuint((*map[interface{}]uint)(&x.FMapIntfUint), d)
				}
			}
		case "FptrMapIntfUint":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntfUint != nil {
					x.FptrMapIntfUint = nil
				}
			} else {
				if x.FptrMapIntfUint == nil {
					x.FptrMapIntfUint = new(map[interface{}]uint)
				}

				if false {
				} else {
					h.decMapInterfaceuint((*map[interface{}]uint)(x.FptrMapIntfUint), d)
				}
			}
		case "FMapIntfUint8":
			if r.TryDecodeAsNil() {
				x.FMapIntfUint8 = nil
			} else {
				if false {
				} else {
					h.decMapInterfaceuint8((*map[interface{}]uint8)(&x.FMapIntfUint8), d)
				}
			}
		case "FptrMapIntfUint8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntfUint8 != nil {
					x.FptrMapIntfUint8 = nil
				}
			} else {
				if x.FptrMapIntfUint8 == nil {
					x.FptrMapIntfUint8 = new(map[interface{}]uint8)
				}

				if false {
				} else {
					h.decMapInterfaceuint8((*map[interface{}]uint8)(x.FptrMapIntfUint8), d)
				}
			}
		case "FMapIntfUint16":
			if r.TryDecodeAsNil() {
				x.FMapIntfUint16 = nil
			} else {
				if false {
				} else {
					h.decMapInterfaceuint16((*map[interface{}]uint16)(&x.FMapIntfUint16), d)
				}
			}
		case "FptrMapIntfUint16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntfUint16 != nil {
					x.FptrMapIntfUint16 = nil
				}
			} else {
				if x.FptrMapIntfUint16 == nil {
					x.FptrMapIntfUint16 = new(map[interface{}]uint16)
				}

				if false {
				} else {
					h.decMapInterfaceuint16((*map[interface{}]uint16)(x.FptrMapIntfUint16), d)
				}
			}
		case "FMapIntfUint32":
			if r.TryDecodeAsNil() {
				x.FMapIntfUint32 = nil
			} else {
				if false {
				} else {
					h.decMapInterfaceuint32((*map[interface{}]uint32)(&x.FMapIntfUint32), d)
				}
			}
		case "FptrMapIntfUint32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntfUint32 != nil {
					x.FptrMapIntfUint32 = nil
				}
			} else {
				if x.FptrMapIntfUint32 == nil {
					x.FptrMapIntfUint32 = new(map[interface{}]uint32)
				}

				if false {
				} else {
					h.decMapInterfaceuint32((*map[interface{}]uint32)(x.FptrMapIntfUint32), d)
				}
			}
		case "FMapIntfUint64":
			if r.TryDecodeAsNil() {
				x.FMapIntfUint64 = nil
			} else {
				if false {
				} else {
					h.decMapInterfaceuint64((*map[interface{}]uint64)(&x.FMapIntfUint64), d)
				}
			}
		case "FptrMapIntfUint64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntfUint64 != nil {
					x.FptrMapIntfUint64 = nil
				}
			} else {
				if x.FptrMapIntfUint64 == nil {
					x.FptrMapIntfUint64 = new(map[interface{}]uint64)
				}

				if false {
				} else {
					h.decMapInterfaceuint64((*map[interface{}]uint64)(x.FptrMapIntfUint64), d)
				}
			}
		case "FMapIntfUintptr":
			if r.TryDecodeAsNil() {
				x.FMapIntfUintptr = nil
			} else {
				if false {
				} else {
					h.decMapInterfaceuintptr((*map[interface{}]uintptr)(&x.FMapIntfUintptr), d)
				}
			}
		case "FptrMapIntfUintptr":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntfUintptr != nil {
					x.FptrMapIntfUintptr = nil
				}
			} else {
				if x.FptrMapIntfUintptr == nil {
					x.FptrMapIntfUintptr = new(map[interface{}]uintptr)
				}

				if false {
				} else {
					h.decMapInterfaceuintptr((*map[interface{}]uintptr)(x.FptrMapIntfUintptr), d)
				}
			}
		case "FMapIntfInt":
			if r.TryDecodeAsNil() {
				x.FMapIntfInt = nil
			} else {
				if false {
				} else {
					h.decMapInterfaceint((*map[interface{}]int)(&x.FMapIntfInt), d)
				}
			}
		case "FptrMapIntfInt":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntfInt != nil {
					x.FptrMapIntfInt = nil
				}
			} else {
				if x.FptrMapIntfInt == nil {
					x.FptrMapIntfInt = new(map[interface{}]int)
				}

				if false {
				} else {
					h.decMapInterfaceint((*map[interface{}]int)(x.FptrMapIntfInt), d)
				}
			}
		case "FMapIntfInt8":
			if r.TryDecodeAsNil() {
				x.FMapIntfInt8 = nil
			} else {
				if false {
				} else {
					h.decMapInterfaceint8((*map[interface{}]int8)(&x.FMapIntfInt8), d)
				}
			}
		case "FptrMapIntfInt8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntfInt8 != nil {
					x.FptrMapIntfInt8 = nil
				}
			} else {
				if x.FptrMapIntfInt8 == nil {
					x.FptrMapIntfInt8 = new(map[interface{}]int8)
				}

				if false {
				} else {
					h.decMapInterfaceint8((*map[interface{}]int8)(x.FptrMapIntfInt8), d)
				}
			}
		case "FMapIntfInt16":
			if r.TryDecodeAsNil() {
				x.FMapIntfInt16 = nil
			} else {
				if false {
				} else {
					h.decMapInterfaceint16((*map[interface{}]int16)(&x.FMapIntfInt16), d)
				}
			}
		case "FptrMapIntfInt16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntfInt16 != nil {
					x.FptrMapIntfInt16 = nil
				}
			} else {
				if x.FptrMapIntfInt16 == nil {
					x.FptrMapIntfInt16 = new(map[interface{}]int16)
				}

				if false {
				} else {
					h.decMapInterfaceint16((*map[interface{}]int16)(x.FptrMapIntfInt16), d)
				}
			}
		case "FMapIntfInt32":
			if r.TryDecodeAsNil() {
				x.FMapIntfInt32 = nil
			} else {
				if false {
				} else {
					h.decMapInterfaceint32((*map[interface{}]int32)(&x.FMapIntfInt32), d)
				}
			}
		case "FptrMapIntfInt32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntfInt32 != nil {
					x.FptrMapIntfInt32 = nil
				}
			} else {
				if x.FptrMapIntfInt32 == nil {
					x.FptrMapIntfInt32 = new(map[interface{}]int32)
				}

				if false {
				} else {
					h.decMapInterfaceint32((*map[interface{}]int32)(x.FptrMapIntfInt32), d)
				}
			}
		case "FMapIntfInt64":
			if r.TryDecodeAsNil() {
				x.FMapIntfInt64 = nil
			} else {
				if false {
				} else {
					h.decMapInterfaceint64((*map[interface{}]int64)(&x.FMapIntfInt64), d)
				}
			}
		case "FptrMapIntfInt64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntfInt64 != nil {
					x.FptrMapIntfInt64 = nil
				}
			} else {
				if x.FptrMapIntfInt64 == nil {
					x.FptrMapIntfInt64 = new(map[interface{}]int64)
				}

				if false {
				} else {
					h.decMapInterfaceint64((*map[interface{}]int64)(x.FptrMapIntfInt64), d)
				}
			}
		case "FMapIntfFloat32":
			if r.TryDecodeAsNil() {
				x.FMapIntfFloat32 = nil
			} else {
				if false {
				} else {
					h.decMapInterfacefloat32((*map[interface{}]float32)(&x.FMapIntfFloat32), d)
				}
			}
		case "FptrMapIntfFloat32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntfFloat32 != nil {
					x.FptrMapIntfFloat32 = nil
				}
			} else {
				if x.FptrMapIntfFloat32 == nil {
					x.FptrMapIntfFloat32 = new(map[interface{}]float32)
				}

				if false {
				} else {
					h.decMapInterfacefloat32((*map[interface{}]float32)(x.FptrMapIntfFloat32), d)
				}
			}
		case "FMapIntfFloat64":
			if r.TryDecodeAsNil() {
				x.FMapIntfFloat64 = nil
			} else {
				if false {
				} else {
					h.decMapInterfacefloat64((*map[interface{}]float64)(&x.FMapIntfFloat64), d)
				}
			}
		case "FptrMapIntfFloat64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntfFloat64 != nil {
					x.FptrMapIntfFloat64 = nil
				}
			} else {
				if x.FptrMapIntfFloat64 == nil {
					x.FptrMapIntfFloat64 = new(map[interface{}]float64)
				}

				if false {
				} else {
					h.decMapInterfacefloat64((*map[interface{}]float64)(x.FptrMapIntfFloat64), d)
				}
			}
		case "FMapIntfBool":
			if r.TryDecodeAsNil() {
				x.FMapIntfBool = nil
			} else {
				if false {
				} else {
					h.decMapInterfacebool((*map[interface{}]bool)(&x.FMapIntfBool), d)
				}
			}
		case "FptrMapIntfBool":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntfBool != nil {
					x.FptrMapIntfBool = nil
				}
			} else {
				if x.FptrMapIntfBool == nil {
					x.FptrMapIntfBool = new(map[interface{}]bool)
				}

				if false {
				} else {
					h.decMapInterfacebool((*map[interface{}]bool)(x.FptrMapIntfBool), d)
				}
			}
		case "FMapStringIntf":
			if r.TryDecodeAsNil() {
				x.FMapStringIntf = nil
			} else {
				if false {
				} else {
					h.decMapstringInterface((*map[string]interface{})(&x.FMapStringIntf), d)
				}
			}
		case "FptrMapStringIntf":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapStringIntf != nil {
					x.FptrMapStringIntf = nil
				}
			} else {
				if x.FptrMapStringIntf == nil {
					x.FptrMapStringIntf = new(map[string]interface{})
				}

				if false {
				} else {
					h.decMapstringInterface((*map[string]interface{})(x.FptrMapStringIntf), d)
				}
			}
		case "FMapStringString":
			if r.TryDecodeAsNil() {
				x.FMapStringString = nil
			} else {
				if false {
				} else {
					h.decMapstringstring((*map[string]string)(&x.FMapStringString), d)
				}
			}
		case "FptrMapStringString":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapStringString != nil {
					x.FptrMapStringString = nil
				}
			} else {
				if x.FptrMapStringString == nil {
					x.FptrMapStringString = new(map[string]string)
				}

				if false {
				} else {
					h.decMapstringstring((*map[string]string)(x.FptrMapStringString), d)
				}
			}
		case "FMapStringUint":
			if r.TryDecodeAsNil() {
				x.FMapStringUint = nil
			} else {
				if false {
				} else {
					h.decMapstringuint((*map[string]uint)(&x.FMapStringUint), d)
				}
			}
		case "FptrMapStringUint":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapStringUint != nil {
					x.FptrMapStringUint = nil
				}
			} else {
				if x.FptrMapStringUint == nil {
					x.FptrMapStringUint = new(map[string]uint)
				}

				if false {
				} else {
					h.decMapstringuint((*map[string]uint)(x.FptrMapStringUint), d)
				}
			}
		case "FMapStringUint8":
			if r.TryDecodeAsNil() {
				x.FMapStringUint8 = nil
			} else {
				if false {
				} else {
					h.decMapstringuint8((*map[string]uint8)(&x.FMapStringUint8), d)
				}
			}
		case "FptrMapStringUint8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapStringUint8 != nil {
					x.FptrMapStringUint8 = nil
				}
			} else {
				if x.FptrMapStringUint8 == nil {
					x.FptrMapStringUint8 = new(map[string]uint8)
				}

				if false {
				} else {
					h.decMapstringuint8((*map[string]uint8)(x.FptrMapStringUint8), d)
				}
			}
		case "FMapStringUint16":
			if r.TryDecodeAsNil() {
				x.FMapStringUint16 = nil
			} else {
				if false {
				} else {
					h.decMapstringuint16((*map[string]uint16)(&x.FMapStringUint16), d)
				}
			}
		case "FptrMapStringUint16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapStringUint16 != nil {
					x.FptrMapStringUint16 = nil
				}
			} else {
				if x.FptrMapStringUint16 == nil {
					x.FptrMapStringUint16 = new(map[string]uint16)
				}

				if false {
				} else {
					h.decMapstringuint16((*map[string]uint16)(x.FptrMapStringUint16), d)
				}
			}
		case "FMapStringUint32":
			if r.TryDecodeAsNil() {
				x.FMapStringUint32 = nil
			} else {
				if false {
				} else {
					h.decMapstringuint32((*map[string]uint32)(&x.FMapStringUint32), d)
				}
			}
		case "FptrMapStringUint32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapStringUint32 != nil {
					x.FptrMapStringUint32 = nil
				}
			} else {
				if x.FptrMapStringUint32 == nil {
					x.FptrMapStringUint32 = new(map[string]uint32)
				}

				if false {
				} else {
					h.decMapstringuint32((*map[string]uint32)(x.FptrMapStringUint32), d)
				}
			}
		case "FMapStringUint64":
			if r.TryDecodeAsNil() {
				x.FMapStringUint64 = nil
			} else {
				if false {
				} else {
					h.decMapstringuint64((*map[string]uint64)(&x.FMapStringUint64), d)
				}
			}
		case "FptrMapStringUint64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapStringUint64 != nil {
					x.FptrMapStringUint64 = nil
				}
			} else {
				if x.FptrMapStringUint64 == nil {
					x.FptrMapStringUint64 = new(map[string]uint64)
				}

				if false {
				} else {
					h.decMapstringuint64((*map[string]uint64)(x.FptrMapStringUint64), d)
				}
			}
		case "FMapStringUintptr":
			if r.TryDecodeAsNil() {
				x.FMapStringUintptr = nil
			} else {
				if false {
				} else {
					h.decMapstringuintptr((*map[string]uintptr)(&x.FMapStringUintptr), d)
				}
			}
		case "FptrMapStringUintptr":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapStringUintptr != nil {
					x.FptrMapStringUintptr = nil
				}
			} else {
				if x.FptrMapStringUintptr == nil {
					x.FptrMapStringUintptr = new(map[string]uintptr)
				}

				if false {
				} else {
					h.decMapstringuintptr((*map[string]uintptr)(x.FptrMapStringUintptr), d)
				}
			}
		case "FMapStringInt":
			if r.TryDecodeAsNil() {
				x.FMapStringInt = nil
			} else {
				if false {
				} else {
					h.decMapstringint((*map[string]int)(&x.FMapStringInt), d)
				}
			}
		case "FptrMapStringInt":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapStringInt != nil {
					x.FptrMapStringInt = nil
				}
			} else {
				if x.FptrMapStringInt == nil {
					x.FptrMapStringInt = new(map[string]int)
				}

				if false {
				} else {
					h.decMapstringint((*map[string]int)(x.FptrMapStringInt), d)
				}
			}
		case "FMapStringInt8":
			if r.TryDecodeAsNil() {
				x.FMapStringInt8 = nil
			} else {
				if false {
				} else {
					h.decMapstringint8((*map[string]int8)(&x.FMapStringInt8), d)
				}
			}
		case "FptrMapStringInt8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapStringInt8 != nil {
					x.FptrMapStringInt8 = nil
				}
			} else {
				if x.FptrMapStringInt8 == nil {
					x.FptrMapStringInt8 = new(map[string]int8)
				}

				if false {
				} else {
					h.decMapstringint8((*map[string]int8)(x.FptrMapStringInt8), d)
				}
			}
		case "FMapStringInt16":
			if r.TryDecodeAsNil() {
				x.FMapStringInt16 = nil
			} else {
				if false {
				} else {
					h.decMapstringint16((*map[string]int16)(&x.FMapStringInt16), d)
				}
			}
		case "FptrMapStringInt16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapStringInt16 != nil {
					x.FptrMapStringInt16 = nil
				}
			} else {
				if x.FptrMapStringInt16 == nil {
					x.FptrMapStringInt16 = new(map[string]int16)
				}

				if false {
				} else {
					h.decMapstringint16((*map[string]int16)(x.FptrMapStringInt16), d)
				}
			}
		case "FMapStringInt32":
			if r.TryDecodeAsNil() {
				x.FMapStringInt32 = nil
			} else {
				if false {
				} else {
					h.decMapstringint32((*map[string]int32)(&x.FMapStringInt32), d)
				}
			}
		case "FptrMapStringInt32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapStringInt32 != nil {
					x.FptrMapStringInt32 = nil
				}
			} else {
				if x.FptrMapStringInt32 == nil {
					x.FptrMapStringInt32 = new(map[string]int32)
				}

				if false {
				} else {
					h.decMapstringint32((*map[string]int32)(x.FptrMapStringInt32), d)
				}
			}
		case "FMapStringInt64":
			if r.TryDecodeAsNil() {
				x.FMapStringInt64 = nil
			} else {
				if false {
				} else {
					h.decMapstringint64((*map[string]int64)(&x.FMapStringInt64), d)
				}
			}
		case "FptrMapStringInt64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapStringInt64 != nil {
					x.FptrMapStringInt64 = nil
				}
			} else {
				if x.FptrMapStringInt64 == nil {
					x.FptrMapStringInt64 = new(map[string]int64)
				}

				if false {
				} else {
					h.decMapstringint64((*map[string]int64)(x.FptrMapStringInt64), d)
				}
			}
		case "FMapStringFloat32":
			if r.TryDecodeAsNil() {
				x.FMapStringFloat32 = nil
			} else {
				if false {
				} else {
					h.decMapstringfloat32((*map[string]float32)(&x.FMapStringFloat32), d)
				}
			}
		case "FptrMapStringFloat32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapStringFloat32 != nil {
					x.FptrMapStringFloat32 = nil
				}
			} else {
				if x.FptrMapStringFloat32 == nil {
					x.FptrMapStringFloat32 = new(map[string]float32)
				}

				if false {
				} else {
					h.decMapstringfloat32((*map[string]float32)(x.FptrMapStringFloat32), d)
				}
			}
		case "FMapStringFloat64":
			if r.TryDecodeAsNil() {
				x.FMapStringFloat64 = nil
			} else {
				if false {
				} else {
					h.decMapstringfloat64((*map[string]float64)(&x.FMapStringFloat64), d)
				}
			}
		case "FptrMapStringFloat64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapStringFloat64 != nil {
					x.FptrMapStringFloat64 = nil
				}
			} else {
				if x.FptrMapStringFloat64 == nil {
					x.FptrMapStringFloat64 = new(map[string]float64)
				}

				if false {
				} else {
					h.decMapstringfloat64((*map[string]float64)(x.FptrMapStringFloat64), d)
				}
			}
		case "FMapStringBool":
			if r.TryDecodeAsNil() {
				x.FMapStringBool = nil
			} else {
				if false {
				} else {
					h.decMapstringbool((*map[string]bool)(&x.FMapStringBool), d)
				}
			}
		case "FptrMapStringBool":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapStringBool != nil {
					x.FptrMapStringBool = nil
				}
			} else {
				if x.FptrMapStringBool == nil {
					x.FptrMapStringBool = new(map[string]bool)
				}

				if false {
				} else {
					h.decMapstringbool((*map[string]bool)(x.FptrMapStringBool), d)
				}
			}
		case "FMapFloat32Intf":
			if r.TryDecodeAsNil() {
				x.FMapFloat32Intf = nil
			} else {
				if false {
				} else {
					h.decMapfloat32Interface((*map[float32]interface{})(&x.FMapFloat32Intf), d)
				}
			}
		case "FptrMapFloat32Intf":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat32Intf != nil {
					x.FptrMapFloat32Intf = nil
				}
			} else {
				if x.FptrMapFloat32Intf == nil {
					x.FptrMapFloat32Intf = new(map[float32]interface{})
				}

				if false {
				} else {
					h.decMapfloat32Interface((*map[float32]interface{})(x.FptrMapFloat32Intf), d)
				}
			}
		case "FMapFloat32String":
			if r.TryDecodeAsNil() {
				x.FMapFloat32String = nil
			} else {
				if false {
				} else {
					h.decMapfloat32string((*map[float32]string)(&x.FMapFloat32String), d)
				}
			}
		case "FptrMapFloat32String":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat32String != nil {
					x.FptrMapFloat32String = nil
				}
			} else {
				if x.FptrMapFloat32String == nil {
					x.FptrMapFloat32String = new(map[float32]string)
				}

				if false {
				} else {
					h.decMapfloat32string((*map[float32]string)(x.FptrMapFloat32String), d)
				}
			}
		case "FMapFloat32Uint":
			if r.TryDecodeAsNil() {
				x.FMapFloat32Uint = nil
			} else {
				if false {
				} else {
					h.decMapfloat32uint((*map[float32]uint)(&x.FMapFloat32Uint), d)
				}
			}
		case "FptrMapFloat32Uint":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat32Uint != nil {
					x.FptrMapFloat32Uint = nil
				}
			} else {
				if x.FptrMapFloat32Uint == nil {
					x.FptrMapFloat32Uint = new(map[float32]uint)
				}

				if false {
				} else {
					h.decMapfloat32uint((*map[float32]uint)(x.FptrMapFloat32Uint), d)
				}
			}
		case "FMapFloat32Uint8":
			if r.TryDecodeAsNil() {
				x.FMapFloat32Uint8 = nil
			} else {
				if false {
				} else {
					h.decMapfloat32uint8((*map[float32]uint8)(&x.FMapFloat32Uint8), d)
				}
			}
		case "FptrMapFloat32Uint8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat32Uint8 != nil {
					x.FptrMapFloat32Uint8 = nil
				}
			} else {
				if x.FptrMapFloat32Uint8 == nil {
					x.FptrMapFloat32Uint8 = new(map[float32]uint8)
				}

				if false {
				} else {
					h.decMapfloat32uint8((*map[float32]uint8)(x.FptrMapFloat32Uint8), d)
				}
			}
		case "FMapFloat32Uint16":
			if r.TryDecodeAsNil() {
				x.FMapFloat32Uint16 = nil
			} else {
				if false {
				} else {
					h.decMapfloat32uint16((*map[float32]uint16)(&x.FMapFloat32Uint16), d)
				}
			}
		case "FptrMapFloat32Uint16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat32Uint16 != nil {
					x.FptrMapFloat32Uint16 = nil
				}
			} else {
				if x.FptrMapFloat32Uint16 == nil {
					x.FptrMapFloat32Uint16 = new(map[float32]uint16)
				}

				if false {
				} else {
					h.decMapfloat32uint16((*map[float32]uint16)(x.FptrMapFloat32Uint16), d)
				}
			}
		case "FMapFloat32Uint32":
			if r.TryDecodeAsNil() {
				x.FMapFloat32Uint32 = nil
			} else {
				if false {
				} else {
					h.decMapfloat32uint32((*map[float32]uint32)(&x.FMapFloat32Uint32), d)
				}
			}
		case "FptrMapFloat32Uint32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat32Uint32 != nil {
					x.FptrMapFloat32Uint32 = nil
				}
			} else {
				if x.FptrMapFloat32Uint32 == nil {
					x.FptrMapFloat32Uint32 = new(map[float32]uint32)
				}

				if false {
				} else {
					h.decMapfloat32uint32((*map[float32]uint32)(x.FptrMapFloat32Uint32), d)
				}
			}
		case "FMapFloat32Uint64":
			if r.TryDecodeAsNil() {
				x.FMapFloat32Uint64 = nil
			} else {
				if false {
				} else {
					h.decMapfloat32uint64((*map[float32]uint64)(&x.FMapFloat32Uint64), d)
				}
			}
		case "FptrMapFloat32Uint64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat32Uint64 != nil {
					x.FptrMapFloat32Uint64 = nil
				}
			} else {
				if x.FptrMapFloat32Uint64 == nil {
					x.FptrMapFloat32Uint64 = new(map[float32]uint64)
				}

				if false {
				} else {
					h.decMapfloat32uint64((*map[float32]uint64)(x.FptrMapFloat32Uint64), d)
				}
			}
		case "FMapFloat32Uintptr":
			if r.TryDecodeAsNil() {
				x.FMapFloat32Uintptr = nil
			} else {
				if false {
				} else {
					h.decMapfloat32uintptr((*map[float32]uintptr)(&x.FMapFloat32Uintptr), d)
				}
			}
		case "FptrMapFloat32Uintptr":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat32Uintptr != nil {
					x.FptrMapFloat32Uintptr = nil
				}
			} else {
				if x.FptrMapFloat32Uintptr == nil {
					x.FptrMapFloat32Uintptr = new(map[float32]uintptr)
				}

				if false {
				} else {
					h.decMapfloat32uintptr((*map[float32]uintptr)(x.FptrMapFloat32Uintptr), d)
				}
			}
		case "FMapFloat32Int":
			if r.TryDecodeAsNil() {
				x.FMapFloat32Int = nil
			} else {
				if false {
				} else {
					h.decMapfloat32int((*map[float32]int)(&x.FMapFloat32Int), d)
				}
			}
		case "FptrMapFloat32Int":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat32Int != nil {
					x.FptrMapFloat32Int = nil
				}
			} else {
				if x.FptrMapFloat32Int == nil {
					x.FptrMapFloat32Int = new(map[float32]int)
				}

				if false {
				} else {
					h.decMapfloat32int((*map[float32]int)(x.FptrMapFloat32Int), d)
				}
			}
		case "FMapFloat32Int8":
			if r.TryDecodeAsNil() {
				x.FMapFloat32Int8 = nil
			} else {
				if false {
				} else {
					h.decMapfloat32int8((*map[float32]int8)(&x.FMapFloat32Int8), d)
				}
			}
		case "FptrMapFloat32Int8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat32Int8 != nil {
					x.FptrMapFloat32Int8 = nil
				}
			} else {
				if x.FptrMapFloat32Int8 == nil {
					x.FptrMapFloat32Int8 = new(map[float32]int8)
				}

				if false {
				} else {
					h.decMapfloat32int8((*map[float32]int8)(x.FptrMapFloat32Int8), d)
				}
			}
		case "FMapFloat32Int16":
			if r.TryDecodeAsNil() {
				x.FMapFloat32Int16 = nil
			} else {
				if false {
				} else {
					h.decMapfloat32int16((*map[float32]int16)(&x.FMapFloat32Int16), d)
				}
			}
		case "FptrMapFloat32Int16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat32Int16 != nil {
					x.FptrMapFloat32Int16 = nil
				}
			} else {
				if x.FptrMapFloat32Int16 == nil {
					x.FptrMapFloat32Int16 = new(map[float32]int16)
				}

				if false {
				} else {
					h.decMapfloat32int16((*map[float32]int16)(x.FptrMapFloat32Int16), d)
				}
			}
		case "FMapFloat32Int32":
			if r.TryDecodeAsNil() {
				x.FMapFloat32Int32 = nil
			} else {
				if false {
				} else {
					h.decMapfloat32int32((*map[float32]int32)(&x.FMapFloat32Int32), d)
				}
			}
		case "FptrMapFloat32Int32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat32Int32 != nil {
					x.FptrMapFloat32Int32 = nil
				}
			} else {
				if x.FptrMapFloat32Int32 == nil {
					x.FptrMapFloat32Int32 = new(map[float32]int32)
				}

				if false {
				} else {
					h.decMapfloat32int32((*map[float32]int32)(x.FptrMapFloat32Int32), d)
				}
			}
		case "FMapFloat32Int64":
			if r.TryDecodeAsNil() {
				x.FMapFloat32Int64 = nil
			} else {
				if false {
				} else {
					h.decMapfloat32int64((*map[float32]int64)(&x.FMapFloat32Int64), d)
				}
			}
		case "FptrMapFloat32Int64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat32Int64 != nil {
					x.FptrMapFloat32Int64 = nil
				}
			} else {
				if x.FptrMapFloat32Int64 == nil {
					x.FptrMapFloat32Int64 = new(map[float32]int64)
				}

				if false {
				} else {
					h.decMapfloat32int64((*map[float32]int64)(x.FptrMapFloat32Int64), d)
				}
			}
		case "FMapFloat32Float32":
			if r.TryDecodeAsNil() {
				x.FMapFloat32Float32 = nil
			} else {
				if false {
				} else {
					h.decMapfloat32float32((*map[float32]float32)(&x.FMapFloat32Float32), d)
				}
			}
		case "FptrMapFloat32Float32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat32Float32 != nil {
					x.FptrMapFloat32Float32 = nil
				}
			} else {
				if x.FptrMapFloat32Float32 == nil {
					x.FptrMapFloat32Float32 = new(map[float32]float32)
				}

				if false {
				} else {
					h.decMapfloat32float32((*map[float32]float32)(x.FptrMapFloat32Float32), d)
				}
			}
		case "FMapFloat32Float64":
			if r.TryDecodeAsNil() {
				x.FMapFloat32Float64 = nil
			} else {
				if false {
				} else {
					h.decMapfloat32float64((*map[float32]float64)(&x.FMapFloat32Float64), d)
				}
			}
		case "FptrMapFloat32Float64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat32Float64 != nil {
					x.FptrMapFloat32Float64 = nil
				}
			} else {
				if x.FptrMapFloat32Float64 == nil {
					x.FptrMapFloat32Float64 = new(map[float32]float64)
				}

				if false {
				} else {
					h.decMapfloat32float64((*map[float32]float64)(x.FptrMapFloat32Float64), d)
				}
			}
		case "FMapFloat32Bool":
			if r.TryDecodeAsNil() {
				x.FMapFloat32Bool = nil
			} else {
				if false {
				} else {
					h.decMapfloat32bool((*map[float32]bool)(&x.FMapFloat32Bool), d)
				}
			}
		case "FptrMapFloat32Bool":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat32Bool != nil {
					x.FptrMapFloat32Bool = nil
				}
			} else {
				if x.FptrMapFloat32Bool == nil {
					x.FptrMapFloat32Bool = new(map[float32]bool)
				}

				if false {
				} else {
					h.decMapfloat32bool((*map[float32]bool)(x.FptrMapFloat32Bool), d)
				}
			}
		case "FMapFloat64Intf":
			if r.TryDecodeAsNil() {
				x.FMapFloat64Intf = nil
			} else {
				if false {
				} else {
					h.decMapfloat64Interface((*map[float64]interface{})(&x.FMapFloat64Intf), d)
				}
			}
		case "FptrMapFloat64Intf":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat64Intf != nil {
					x.FptrMapFloat64Intf = nil
				}
			} else {
				if x.FptrMapFloat64Intf == nil {
					x.FptrMapFloat64Intf = new(map[float64]interface{})
				}

				if false {
				} else {
					h.decMapfloat64Interface((*map[float64]interface{})(x.FptrMapFloat64Intf), d)
				}
			}
		case "FMapFloat64String":
			if r.TryDecodeAsNil() {
				x.FMapFloat64String = nil
			} else {
				if false {
				} else {
					h.decMapfloat64string((*map[float64]string)(&x.FMapFloat64String), d)
				}
			}
		case "FptrMapFloat64String":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat64String != nil {
					x.FptrMapFloat64String = nil
				}
			} else {
				if x.FptrMapFloat64String == nil {
					x.FptrMapFloat64String = new(map[float64]string)
				}

				if false {
				} else {
					h.decMapfloat64string((*map[float64]string)(x.FptrMapFloat64String), d)
				}
			}
		case "FMapFloat64Uint":
			if r.TryDecodeAsNil() {
				x.FMapFloat64Uint = nil
			} else {
				if false {
				} else {
					h.decMapfloat64uint((*map[float64]uint)(&x.FMapFloat64Uint), d)
				}
			}
		case "FptrMapFloat64Uint":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat64Uint != nil {
					x.FptrMapFloat64Uint = nil
				}
			} else {
				if x.FptrMapFloat64Uint == nil {
					x.FptrMapFloat64Uint = new(map[float64]uint)
				}

				if false {
				} else {
					h.decMapfloat64uint((*map[float64]uint)(x.FptrMapFloat64Uint), d)
				}
			}
		case "FMapFloat64Uint8":
			if r.TryDecodeAsNil() {
				x.FMapFloat64Uint8 = nil
			} else {
				if false {
				} else {
					h.decMapfloat64uint8((*map[float64]uint8)(&x.FMapFloat64Uint8), d)
				}
			}
		case "FptrMapFloat64Uint8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat64Uint8 != nil {
					x.FptrMapFloat64Uint8 = nil
				}
			} else {
				if x.FptrMapFloat64Uint8 == nil {
					x.FptrMapFloat64Uint8 = new(map[float64]uint8)
				}

				if false {
				} else {
					h.decMapfloat64uint8((*map[float64]uint8)(x.FptrMapFloat64Uint8), d)
				}
			}
		case "FMapFloat64Uint16":
			if r.TryDecodeAsNil() {
				x.FMapFloat64Uint16 = nil
			} else {
				if false {
				} else {
					h.decMapfloat64uint16((*map[float64]uint16)(&x.FMapFloat64Uint16), d)
				}
			}
		case "FptrMapFloat64Uint16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat64Uint16 != nil {
					x.FptrMapFloat64Uint16 = nil
				}
			} else {
				if x.FptrMapFloat64Uint16 == nil {
					x.FptrMapFloat64Uint16 = new(map[float64]uint16)
				}

				if false {
				} else {
					h.decMapfloat64uint16((*map[float64]uint16)(x.FptrMapFloat64Uint16), d)
				}
			}
		case "FMapFloat64Uint32":
			if r.TryDecodeAsNil() {
				x.FMapFloat64Uint32 = nil
			} else {
				if false {
				} else {
					h.decMapfloat64uint32((*map[float64]uint32)(&x.FMapFloat64Uint32), d)
				}
			}
		case "FptrMapFloat64Uint32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat64Uint32 != nil {
					x.FptrMapFloat64Uint32 = nil
				}
			} else {
				if x.FptrMapFloat64Uint32 == nil {
					x.FptrMapFloat64Uint32 = new(map[float64]uint32)
				}

				if false {
				} else {
					h.decMapfloat64uint32((*map[float64]uint32)(x.FptrMapFloat64Uint32), d)
				}
			}
		case "FMapFloat64Uint64":
			if r.TryDecodeAsNil() {
				x.FMapFloat64Uint64 = nil
			} else {
				if false {
				} else {
					h.decMapfloat64uint64((*map[float64]uint64)(&x.FMapFloat64Uint64), d)
				}
			}
		case "FptrMapFloat64Uint64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat64Uint64 != nil {
					x.FptrMapFloat64Uint64 = nil
				}
			} else {
				if x.FptrMapFloat64Uint64 == nil {
					x.FptrMapFloat64Uint64 = new(map[float64]uint64)
				}

				if false {
				} else {
					h.decMapfloat64uint64((*map[float64]uint64)(x.FptrMapFloat64Uint64), d)
				}
			}
		case "FMapFloat64Uintptr":
			if r.TryDecodeAsNil() {
				x.FMapFloat64Uintptr = nil
			} else {
				if false {
				} else {
					h.decMapfloat64uintptr((*map[float64]uintptr)(&x.FMapFloat64Uintptr), d)
				}
			}
		case "FptrMapFloat64Uintptr":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat64Uintptr != nil {
					x.FptrMapFloat64Uintptr = nil
				}
			} else {
				if x.FptrMapFloat64Uintptr == nil {
					x.FptrMapFloat64Uintptr = new(map[float64]uintptr)
				}

				if false {
				} else {
					h.decMapfloat64uintptr((*map[float64]uintptr)(x.FptrMapFloat64Uintptr), d)
				}
			}
		case "FMapFloat64Int":
			if r.TryDecodeAsNil() {
				x.FMapFloat64Int = nil
			} else {
				if false {
				} else {
					h.decMapfloat64int((*map[float64]int)(&x.FMapFloat64Int), d)
				}
			}
		case "FptrMapFloat64Int":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat64Int != nil {
					x.FptrMapFloat64Int = nil
				}
			} else {
				if x.FptrMapFloat64Int == nil {
					x.FptrMapFloat64Int = new(map[float64]int)
				}

				if false {
				} else {
					h.decMapfloat64int((*map[float64]int)(x.FptrMapFloat64Int), d)
				}
			}
		case "FMapFloat64Int8":
			if r.TryDecodeAsNil() {
				x.FMapFloat64Int8 = nil
			} else {
				if false {
				} else {
					h.decMapfloat64int8((*map[float64]int8)(&x.FMapFloat64Int8), d)
				}
			}
		case "FptrMapFloat64Int8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat64Int8 != nil {
					x.FptrMapFloat64Int8 = nil
				}
			} else {
				if x.FptrMapFloat64Int8 == nil {
					x.FptrMapFloat64Int8 = new(map[float64]int8)
				}

				if false {
				} else {
					h.decMapfloat64int8((*map[float64]int8)(x.FptrMapFloat64Int8), d)
				}
			}
		case "FMapFloat64Int16":
			if r.TryDecodeAsNil() {
				x.FMapFloat64Int16 = nil
			} else {
				if false {
				} else {
					h.decMapfloat64int16((*map[float64]int16)(&x.FMapFloat64Int16), d)
				}
			}
		case "FptrMapFloat64Int16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat64Int16 != nil {
					x.FptrMapFloat64Int16 = nil
				}
			} else {
				if x.FptrMapFloat64Int16 == nil {
					x.FptrMapFloat64Int16 = new(map[float64]int16)
				}

				if false {
				} else {
					h.decMapfloat64int16((*map[float64]int16)(x.FptrMapFloat64Int16), d)
				}
			}
		case "FMapFloat64Int32":
			if r.TryDecodeAsNil() {
				x.FMapFloat64Int32 = nil
			} else {
				if false {
				} else {
					h.decMapfloat64int32((*map[float64]int32)(&x.FMapFloat64Int32), d)
				}
			}
		case "FptrMapFloat64Int32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat64Int32 != nil {
					x.FptrMapFloat64Int32 = nil
				}
			} else {
				if x.FptrMapFloat64Int32 == nil {
					x.FptrMapFloat64Int32 = new(map[float64]int32)
				}

				if false {
				} else {
					h.decMapfloat64int32((*map[float64]int32)(x.FptrMapFloat64Int32), d)
				}
			}
		case "FMapFloat64Int64":
			if r.TryDecodeAsNil() {
				x.FMapFloat64Int64 = nil
			} else {
				if false {
				} else {
					h.decMapfloat64int64((*map[float64]int64)(&x.FMapFloat64Int64), d)
				}
			}
		case "FptrMapFloat64Int64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat64Int64 != nil {
					x.FptrMapFloat64Int64 = nil
				}
			} else {
				if x.FptrMapFloat64Int64 == nil {
					x.FptrMapFloat64Int64 = new(map[float64]int64)
				}

				if false {
				} else {
					h.decMapfloat64int64((*map[float64]int64)(x.FptrMapFloat64Int64), d)
				}
			}
		case "FMapFloat64Float32":
			if r.TryDecodeAsNil() {
				x.FMapFloat64Float32 = nil
			} else {
				if false {
				} else {
					h.decMapfloat64float32((*map[float64]float32)(&x.FMapFloat64Float32), d)
				}
			}
		case "FptrMapFloat64Float32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat64Float32 != nil {
					x.FptrMapFloat64Float32 = nil
				}
			} else {
				if x.FptrMapFloat64Float32 == nil {
					x.FptrMapFloat64Float32 = new(map[float64]float32)
				}

				if false {
				} else {
					h.decMapfloat64float32((*map[float64]float32)(x.FptrMapFloat64Float32), d)
				}
			}
		case "FMapFloat64Float64":
			if r.TryDecodeAsNil() {
				x.FMapFloat64Float64 = nil
			} else {
				if false {
				} else {
					h.decMapfloat64float64((*map[float64]float64)(&x.FMapFloat64Float64), d)
				}
			}
		case "FptrMapFloat64Float64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat64Float64 != nil {
					x.FptrMapFloat64Float64 = nil
				}
			} else {
				if x.FptrMapFloat64Float64 == nil {
					x.FptrMapFloat64Float64 = new(map[float64]float64)
				}

				if false {
				} else {
					h.decMapfloat64float64((*map[float64]float64)(x.FptrMapFloat64Float64), d)
				}
			}
		case "FMapFloat64Bool":
			if r.TryDecodeAsNil() {
				x.FMapFloat64Bool = nil
			} else {
				if false {
				} else {
					h.decMapfloat64bool((*map[float64]bool)(&x.FMapFloat64Bool), d)
				}
			}
		case "FptrMapFloat64Bool":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapFloat64Bool != nil {
					x.FptrMapFloat64Bool = nil
				}
			} else {
				if x.FptrMapFloat64Bool == nil {
					x.FptrMapFloat64Bool = new(map[float64]bool)
				}

				if false {
				} else {
					h.decMapfloat64bool((*map[float64]bool)(x.FptrMapFloat64Bool), d)
				}
			}
		case "FMapUintIntf":
			if r.TryDecodeAsNil() {
				x.FMapUintIntf = nil
			} else {
				if false {
				} else {
					h.decMapuintInterface((*map[uint]interface{})(&x.FMapUintIntf), d)
				}
			}
		case "FptrMapUintIntf":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintIntf != nil {
					x.FptrMapUintIntf = nil
				}
			} else {
				if x.FptrMapUintIntf == nil {
					x.FptrMapUintIntf = new(map[uint]interface{})
				}

				if false {
				} else {
					h.decMapuintInterface((*map[uint]interface{})(x.FptrMapUintIntf), d)
				}
			}
		case "FMapUintString":
			if r.TryDecodeAsNil() {
				x.FMapUintString = nil
			} else {
				if false {
				} else {
					h.decMapuintstring((*map[uint]string)(&x.FMapUintString), d)
				}
			}
		case "FptrMapUintString":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintString != nil {
					x.FptrMapUintString = nil
				}
			} else {
				if x.FptrMapUintString == nil {
					x.FptrMapUintString = new(map[uint]string)
				}

				if false {
				} else {
					h.decMapuintstring((*map[uint]string)(x.FptrMapUintString), d)
				}
			}
		case "FMapUintUint":
			if r.TryDecodeAsNil() {
				x.FMapUintUint = nil
			} else {
				if false {
				} else {
					h.decMapuintuint((*map[uint]uint)(&x.FMapUintUint), d)
				}
			}
		case "FptrMapUintUint":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintUint != nil {
					x.FptrMapUintUint = nil
				}
			} else {
				if x.FptrMapUintUint == nil {
					x.FptrMapUintUint = new(map[uint]uint)
				}

				if false {
				} else {
					h.decMapuintuint((*map[uint]uint)(x.FptrMapUintUint), d)
				}
			}
		case "FMapUintUint8":
			if r.TryDecodeAsNil() {
				x.FMapUintUint8 = nil
			} else {
				if false {
				} else {
					h.decMapuintuint8((*map[uint]uint8)(&x.FMapUintUint8), d)
				}
			}
		case "FptrMapUintUint8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintUint8 != nil {
					x.FptrMapUintUint8 = nil
				}
			} else {
				if x.FptrMapUintUint8 == nil {
					x.FptrMapUintUint8 = new(map[uint]uint8)
				}

				if false {
				} else {
					h.decMapuintuint8((*map[uint]uint8)(x.FptrMapUintUint8), d)
				}
			}
		case "FMapUintUint16":
			if r.TryDecodeAsNil() {
				x.FMapUintUint16 = nil
			} else {
				if false {
				} else {
					h.decMapuintuint16((*map[uint]uint16)(&x.FMapUintUint16), d)
				}
			}
		case "FptrMapUintUint16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintUint16 != nil {
					x.FptrMapUintUint16 = nil
				}
			} else {
				if x.FptrMapUintUint16 == nil {
					x.FptrMapUintUint16 = new(map[uint]uint16)
				}

				if false {
				} else {
					h.decMapuintuint16((*map[uint]uint16)(x.FptrMapUintUint16), d)
				}
			}
		case "FMapUintUint32":
			if r.TryDecodeAsNil() {
				x.FMapUintUint32 = nil
			} else {
				if false {
				} else {
					h.decMapuintuint32((*map[uint]uint32)(&x.FMapUintUint32), d)
				}
			}
		case "FptrMapUintUint32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintUint32 != nil {
					x.FptrMapUintUint32 = nil
				}
			} else {
				if x.FptrMapUintUint32 == nil {
					x.FptrMapUintUint32 = new(map[uint]uint32)
				}

				if false {
				} else {
					h.decMapuintuint32((*map[uint]uint32)(x.FptrMapUintUint32), d)
				}
			}
		case "FMapUintUint64":
			if r.TryDecodeAsNil() {
				x.FMapUintUint64 = nil
			} else {
				if false {
				} else {
					h.decMapuintuint64((*map[uint]uint64)(&x.FMapUintUint64), d)
				}
			}
		case "FptrMapUintUint64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintUint64 != nil {
					x.FptrMapUintUint64 = nil
				}
			} else {
				if x.FptrMapUintUint64 == nil {
					x.FptrMapUintUint64 = new(map[uint]uint64)
				}

				if false {
				} else {
					h.decMapuintuint64((*map[uint]uint64)(x.FptrMapUintUint64), d)
				}
			}
		case "FMapUintUintptr":
			if r.TryDecodeAsNil() {
				x.FMapUintUintptr = nil
			} else {
				if false {
				} else {
					h.decMapuintuintptr((*map[uint]uintptr)(&x.FMapUintUintptr), d)
				}
			}
		case "FptrMapUintUintptr":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintUintptr != nil {
					x.FptrMapUintUintptr = nil
				}
			} else {
				if x.FptrMapUintUintptr == nil {
					x.FptrMapUintUintptr = new(map[uint]uintptr)
				}

				if false {
				} else {
					h.decMapuintuintptr((*map[uint]uintptr)(x.FptrMapUintUintptr), d)
				}
			}
		case "FMapUintInt":
			if r.TryDecodeAsNil() {
				x.FMapUintInt = nil
			} else {
				if false {
				} else {
					h.decMapuintint((*map[uint]int)(&x.FMapUintInt), d)
				}
			}
		case "FptrMapUintInt":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintInt != nil {
					x.FptrMapUintInt = nil
				}
			} else {
				if x.FptrMapUintInt == nil {
					x.FptrMapUintInt = new(map[uint]int)
				}

				if false {
				} else {
					h.decMapuintint((*map[uint]int)(x.FptrMapUintInt), d)
				}
			}
		case "FMapUintInt8":
			if r.TryDecodeAsNil() {
				x.FMapUintInt8 = nil
			} else {
				if false {
				} else {
					h.decMapuintint8((*map[uint]int8)(&x.FMapUintInt8), d)
				}
			}
		case "FptrMapUintInt8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintInt8 != nil {
					x.FptrMapUintInt8 = nil
				}
			} else {
				if x.FptrMapUintInt8 == nil {
					x.FptrMapUintInt8 = new(map[uint]int8)
				}

				if false {
				} else {
					h.decMapuintint8((*map[uint]int8)(x.FptrMapUintInt8), d)
				}
			}
		case "FMapUintInt16":
			if r.TryDecodeAsNil() {
				x.FMapUintInt16 = nil
			} else {
				if false {
				} else {
					h.decMapuintint16((*map[uint]int16)(&x.FMapUintInt16), d)
				}
			}
		case "FptrMapUintInt16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintInt16 != nil {
					x.FptrMapUintInt16 = nil
				}
			} else {
				if x.FptrMapUintInt16 == nil {
					x.FptrMapUintInt16 = new(map[uint]int16)
				}

				if false {
				} else {
					h.decMapuintint16((*map[uint]int16)(x.FptrMapUintInt16), d)
				}
			}
		case "FMapUintInt32":
			if r.TryDecodeAsNil() {
				x.FMapUintInt32 = nil
			} else {
				if false {
				} else {
					h.decMapuintint32((*map[uint]int32)(&x.FMapUintInt32), d)
				}
			}
		case "FptrMapUintInt32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintInt32 != nil {
					x.FptrMapUintInt32 = nil
				}
			} else {
				if x.FptrMapUintInt32 == nil {
					x.FptrMapUintInt32 = new(map[uint]int32)
				}

				if false {
				} else {
					h.decMapuintint32((*map[uint]int32)(x.FptrMapUintInt32), d)
				}
			}
		case "FMapUintInt64":
			if r.TryDecodeAsNil() {
				x.FMapUintInt64 = nil
			} else {
				if false {
				} else {
					h.decMapuintint64((*map[uint]int64)(&x.FMapUintInt64), d)
				}
			}
		case "FptrMapUintInt64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintInt64 != nil {
					x.FptrMapUintInt64 = nil
				}
			} else {
				if x.FptrMapUintInt64 == nil {
					x.FptrMapUintInt64 = new(map[uint]int64)
				}

				if false {
				} else {
					h.decMapuintint64((*map[uint]int64)(x.FptrMapUintInt64), d)
				}
			}
		case "FMapUintFloat32":
			if r.TryDecodeAsNil() {
				x.FMapUintFloat32 = nil
			} else {
				if false {
				} else {
					h.decMapuintfloat32((*map[uint]float32)(&x.FMapUintFloat32), d)
				}
			}
		case "FptrMapUintFloat32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintFloat32 != nil {
					x.FptrMapUintFloat32 = nil
				}
			} else {
				if x.FptrMapUintFloat32 == nil {
					x.FptrMapUintFloat32 = new(map[uint]float32)
				}

				if false {
				} else {
					h.decMapuintfloat32((*map[uint]float32)(x.FptrMapUintFloat32), d)
				}
			}
		case "FMapUintFloat64":
			if r.TryDecodeAsNil() {
				x.FMapUintFloat64 = nil
			} else {
				if false {
				} else {
					h.decMapuintfloat64((*map[uint]float64)(&x.FMapUintFloat64), d)
				}
			}
		case "FptrMapUintFloat64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintFloat64 != nil {
					x.FptrMapUintFloat64 = nil
				}
			} else {
				if x.FptrMapUintFloat64 == nil {
					x.FptrMapUintFloat64 = new(map[uint]float64)
				}

				if false {
				} else {
					h.decMapuintfloat64((*map[uint]float64)(x.FptrMapUintFloat64), d)
				}
			}
		case "FMapUintBool":
			if r.TryDecodeAsNil() {
				x.FMapUintBool = nil
			} else {
				if false {
				} else {
					h.decMapuintbool((*map[uint]bool)(&x.FMapUintBool), d)
				}
			}
		case "FptrMapUintBool":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintBool != nil {
					x.FptrMapUintBool = nil
				}
			} else {
				if x.FptrMapUintBool == nil {
					x.FptrMapUintBool = new(map[uint]bool)
				}

				if false {
				} else {
					h.decMapuintbool((*map[uint]bool)(x.FptrMapUintBool), d)
				}
			}
		case "FMapUint8Intf":
			if r.TryDecodeAsNil() {
				x.FMapUint8Intf = nil
			} else {
				if false {
				} else {
					h.decMapuint8Interface((*map[uint8]interface{})(&x.FMapUint8Intf), d)
				}
			}
		case "FptrMapUint8Intf":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint8Intf != nil {
					x.FptrMapUint8Intf = nil
				}
			} else {
				if x.FptrMapUint8Intf == nil {
					x.FptrMapUint8Intf = new(map[uint8]interface{})
				}

				if false {
				} else {
					h.decMapuint8Interface((*map[uint8]interface{})(x.FptrMapUint8Intf), d)
				}
			}
		case "FMapUint8String":
			if r.TryDecodeAsNil() {
				x.FMapUint8String = nil
			} else {
				if false {
				} else {
					h.decMapuint8string((*map[uint8]string)(&x.FMapUint8String), d)
				}
			}
		case "FptrMapUint8String":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint8String != nil {
					x.FptrMapUint8String = nil
				}
			} else {
				if x.FptrMapUint8String == nil {
					x.FptrMapUint8String = new(map[uint8]string)
				}

				if false {
				} else {
					h.decMapuint8string((*map[uint8]string)(x.FptrMapUint8String), d)
				}
			}
		case "FMapUint8Uint":
			if r.TryDecodeAsNil() {
				x.FMapUint8Uint = nil
			} else {
				if false {
				} else {
					h.decMapuint8uint((*map[uint8]uint)(&x.FMapUint8Uint), d)
				}
			}
		case "FptrMapUint8Uint":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint8Uint != nil {
					x.FptrMapUint8Uint = nil
				}
			} else {
				if x.FptrMapUint8Uint == nil {
					x.FptrMapUint8Uint = new(map[uint8]uint)
				}

				if false {
				} else {
					h.decMapuint8uint((*map[uint8]uint)(x.FptrMapUint8Uint), d)
				}
			}
		case "FMapUint8Uint8":
			if r.TryDecodeAsNil() {
				x.FMapUint8Uint8 = nil
			} else {
				if false {
				} else {
					h.decMapuint8uint8((*map[uint8]uint8)(&x.FMapUint8Uint8), d)
				}
			}
		case "FptrMapUint8Uint8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint8Uint8 != nil {
					x.FptrMapUint8Uint8 = nil
				}
			} else {
				if x.FptrMapUint8Uint8 == nil {
					x.FptrMapUint8Uint8 = new(map[uint8]uint8)
				}

				if false {
				} else {
					h.decMapuint8uint8((*map[uint8]uint8)(x.FptrMapUint8Uint8), d)
				}
			}
		case "FMapUint8Uint16":
			if r.TryDecodeAsNil() {
				x.FMapUint8Uint16 = nil
			} else {
				if false {
				} else {
					h.decMapuint8uint16((*map[uint8]uint16)(&x.FMapUint8Uint16), d)
				}
			}
		case "FptrMapUint8Uint16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint8Uint16 != nil {
					x.FptrMapUint8Uint16 = nil
				}
			} else {
				if x.FptrMapUint8Uint16 == nil {
					x.FptrMapUint8Uint16 = new(map[uint8]uint16)
				}

				if false {
				} else {
					h.decMapuint8uint16((*map[uint8]uint16)(x.FptrMapUint8Uint16), d)
				}
			}
		case "FMapUint8Uint32":
			if r.TryDecodeAsNil() {
				x.FMapUint8Uint32 = nil
			} else {
				if false {
				} else {
					h.decMapuint8uint32((*map[uint8]uint32)(&x.FMapUint8Uint32), d)
				}
			}
		case "FptrMapUint8Uint32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint8Uint32 != nil {
					x.FptrMapUint8Uint32 = nil
				}
			} else {
				if x.FptrMapUint8Uint32 == nil {
					x.FptrMapUint8Uint32 = new(map[uint8]uint32)
				}

				if false {
				} else {
					h.decMapuint8uint32((*map[uint8]uint32)(x.FptrMapUint8Uint32), d)
				}
			}
		case "FMapUint8Uint64":
			if r.TryDecodeAsNil() {
				x.FMapUint8Uint64 = nil
			} else {
				if false {
				} else {
					h.decMapuint8uint64((*map[uint8]uint64)(&x.FMapUint8Uint64), d)
				}
			}
		case "FptrMapUint8Uint64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint8Uint64 != nil {
					x.FptrMapUint8Uint64 = nil
				}
			} else {
				if x.FptrMapUint8Uint64 == nil {
					x.FptrMapUint8Uint64 = new(map[uint8]uint64)
				}

				if false {
				} else {
					h.decMapuint8uint64((*map[uint8]uint64)(x.FptrMapUint8Uint64), d)
				}
			}
		case "FMapUint8Uintptr":
			if r.TryDecodeAsNil() {
				x.FMapUint8Uintptr = nil
			} else {
				if false {
				} else {
					h.decMapuint8uintptr((*map[uint8]uintptr)(&x.FMapUint8Uintptr), d)
				}
			}
		case "FptrMapUint8Uintptr":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint8Uintptr != nil {
					x.FptrMapUint8Uintptr = nil
				}
			} else {
				if x.FptrMapUint8Uintptr == nil {
					x.FptrMapUint8Uintptr = new(map[uint8]uintptr)
				}

				if false {
				} else {
					h.decMapuint8uintptr((*map[uint8]uintptr)(x.FptrMapUint8Uintptr), d)
				}
			}
		case "FMapUint8Int":
			if r.TryDecodeAsNil() {
				x.FMapUint8Int = nil
			} else {
				if false {
				} else {
					h.decMapuint8int((*map[uint8]int)(&x.FMapUint8Int), d)
				}
			}
		case "FptrMapUint8Int":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint8Int != nil {
					x.FptrMapUint8Int = nil
				}
			} else {
				if x.FptrMapUint8Int == nil {
					x.FptrMapUint8Int = new(map[uint8]int)
				}

				if false {
				} else {
					h.decMapuint8int((*map[uint8]int)(x.FptrMapUint8Int), d)
				}
			}
		case "FMapUint8Int8":
			if r.TryDecodeAsNil() {
				x.FMapUint8Int8 = nil
			} else {
				if false {
				} else {
					h.decMapuint8int8((*map[uint8]int8)(&x.FMapUint8Int8), d)
				}
			}
		case "FptrMapUint8Int8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint8Int8 != nil {
					x.FptrMapUint8Int8 = nil
				}
			} else {
				if x.FptrMapUint8Int8 == nil {
					x.FptrMapUint8Int8 = new(map[uint8]int8)
				}

				if false {
				} else {
					h.decMapuint8int8((*map[uint8]int8)(x.FptrMapUint8Int8), d)
				}
			}
		case "FMapUint8Int16":
			if r.TryDecodeAsNil() {
				x.FMapUint8Int16 = nil
			} else {
				if false {
				} else {
					h.decMapuint8int16((*map[uint8]int16)(&x.FMapUint8Int16), d)
				}
			}
		case "FptrMapUint8Int16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint8Int16 != nil {
					x.FptrMapUint8Int16 = nil
				}
			} else {
				if x.FptrMapUint8Int16 == nil {
					x.FptrMapUint8Int16 = new(map[uint8]int16)
				}

				if false {
				} else {
					h.decMapuint8int16((*map[uint8]int16)(x.FptrMapUint8Int16), d)
				}
			}
		case "FMapUint8Int32":
			if r.TryDecodeAsNil() {
				x.FMapUint8Int32 = nil
			} else {
				if false {
				} else {
					h.decMapuint8int32((*map[uint8]int32)(&x.FMapUint8Int32), d)
				}
			}
		case "FptrMapUint8Int32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint8Int32 != nil {
					x.FptrMapUint8Int32 = nil
				}
			} else {
				if x.FptrMapUint8Int32 == nil {
					x.FptrMapUint8Int32 = new(map[uint8]int32)
				}

				if false {
				} else {
					h.decMapuint8int32((*map[uint8]int32)(x.FptrMapUint8Int32), d)
				}
			}
		case "FMapUint8Int64":
			if r.TryDecodeAsNil() {
				x.FMapUint8Int64 = nil
			} else {
				if false {
				} else {
					h.decMapuint8int64((*map[uint8]int64)(&x.FMapUint8Int64), d)
				}
			}
		case "FptrMapUint8Int64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint8Int64 != nil {
					x.FptrMapUint8Int64 = nil
				}
			} else {
				if x.FptrMapUint8Int64 == nil {
					x.FptrMapUint8Int64 = new(map[uint8]int64)
				}

				if false {
				} else {
					h.decMapuint8int64((*map[uint8]int64)(x.FptrMapUint8Int64), d)
				}
			}
		case "FMapUint8Float32":
			if r.TryDecodeAsNil() {
				x.FMapUint8Float32 = nil
			} else {
				if false {
				} else {
					h.decMapuint8float32((*map[uint8]float32)(&x.FMapUint8Float32), d)
				}
			}
		case "FptrMapUint8Float32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint8Float32 != nil {
					x.FptrMapUint8Float32 = nil
				}
			} else {
				if x.FptrMapUint8Float32 == nil {
					x.FptrMapUint8Float32 = new(map[uint8]float32)
				}

				if false {
				} else {
					h.decMapuint8float32((*map[uint8]float32)(x.FptrMapUint8Float32), d)
				}
			}
		case "FMapUint8Float64":
			if r.TryDecodeAsNil() {
				x.FMapUint8Float64 = nil
			} else {
				if false {
				} else {
					h.decMapuint8float64((*map[uint8]float64)(&x.FMapUint8Float64), d)
				}
			}
		case "FptrMapUint8Float64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint8Float64 != nil {
					x.FptrMapUint8Float64 = nil
				}
			} else {
				if x.FptrMapUint8Float64 == nil {
					x.FptrMapUint8Float64 = new(map[uint8]float64)
				}

				if false {
				} else {
					h.decMapuint8float64((*map[uint8]float64)(x.FptrMapUint8Float64), d)
				}
			}
		case "FMapUint8Bool":
			if r.TryDecodeAsNil() {
				x.FMapUint8Bool = nil
			} else {
				if false {
				} else {
					h.decMapuint8bool((*map[uint8]bool)(&x.FMapUint8Bool), d)
				}
			}
		case "FptrMapUint8Bool":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint8Bool != nil {
					x.FptrMapUint8Bool = nil
				}
			} else {
				if x.FptrMapUint8Bool == nil {
					x.FptrMapUint8Bool = new(map[uint8]bool)
				}

				if false {
				} else {
					h.decMapuint8bool((*map[uint8]bool)(x.FptrMapUint8Bool), d)
				}
			}
		case "FMapUint16Intf":
			if r.TryDecodeAsNil() {
				x.FMapUint16Intf = nil
			} else {
				if false {
				} else {
					h.decMapuint16Interface((*map[uint16]interface{})(&x.FMapUint16Intf), d)
				}
			}
		case "FptrMapUint16Intf":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint16Intf != nil {
					x.FptrMapUint16Intf = nil
				}
			} else {
				if x.FptrMapUint16Intf == nil {
					x.FptrMapUint16Intf = new(map[uint16]interface{})
				}

				if false {
				} else {
					h.decMapuint16Interface((*map[uint16]interface{})(x.FptrMapUint16Intf), d)
				}
			}
		case "FMapUint16String":
			if r.TryDecodeAsNil() {
				x.FMapUint16String = nil
			} else {
				if false {
				} else {
					h.decMapuint16string((*map[uint16]string)(&x.FMapUint16String), d)
				}
			}
		case "FptrMapUint16String":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint16String != nil {
					x.FptrMapUint16String = nil
				}
			} else {
				if x.FptrMapUint16String == nil {
					x.FptrMapUint16String = new(map[uint16]string)
				}

				if false {
				} else {
					h.decMapuint16string((*map[uint16]string)(x.FptrMapUint16String), d)
				}
			}
		case "FMapUint16Uint":
			if r.TryDecodeAsNil() {
				x.FMapUint16Uint = nil
			} else {
				if false {
				} else {
					h.decMapuint16uint((*map[uint16]uint)(&x.FMapUint16Uint), d)
				}
			}
		case "FptrMapUint16Uint":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint16Uint != nil {
					x.FptrMapUint16Uint = nil
				}
			} else {
				if x.FptrMapUint16Uint == nil {
					x.FptrMapUint16Uint = new(map[uint16]uint)
				}

				if false {
				} else {
					h.decMapuint16uint((*map[uint16]uint)(x.FptrMapUint16Uint), d)
				}
			}
		case "FMapUint16Uint8":
			if r.TryDecodeAsNil() {
				x.FMapUint16Uint8 = nil
			} else {
				if false {
				} else {
					h.decMapuint16uint8((*map[uint16]uint8)(&x.FMapUint16Uint8), d)
				}
			}
		case "FptrMapUint16Uint8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint16Uint8 != nil {
					x.FptrMapUint16Uint8 = nil
				}
			} else {
				if x.FptrMapUint16Uint8 == nil {
					x.FptrMapUint16Uint8 = new(map[uint16]uint8)
				}

				if false {
				} else {
					h.decMapuint16uint8((*map[uint16]uint8)(x.FptrMapUint16Uint8), d)
				}
			}
		case "FMapUint16Uint16":
			if r.TryDecodeAsNil() {
				x.FMapUint16Uint16 = nil
			} else {
				if false {
				} else {
					h.decMapuint16uint16((*map[uint16]uint16)(&x.FMapUint16Uint16), d)
				}
			}
		case "FptrMapUint16Uint16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint16Uint16 != nil {
					x.FptrMapUint16Uint16 = nil
				}
			} else {
				if x.FptrMapUint16Uint16 == nil {
					x.FptrMapUint16Uint16 = new(map[uint16]uint16)
				}

				if false {
				} else {
					h.decMapuint16uint16((*map[uint16]uint16)(x.FptrMapUint16Uint16), d)
				}
			}
		case "FMapUint16Uint32":
			if r.TryDecodeAsNil() {
				x.FMapUint16Uint32 = nil
			} else {
				if false {
				} else {
					h.decMapuint16uint32((*map[uint16]uint32)(&x.FMapUint16Uint32), d)
				}
			}
		case "FptrMapUint16Uint32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint16Uint32 != nil {
					x.FptrMapUint16Uint32 = nil
				}
			} else {
				if x.FptrMapUint16Uint32 == nil {
					x.FptrMapUint16Uint32 = new(map[uint16]uint32)
				}

				if false {
				} else {
					h.decMapuint16uint32((*map[uint16]uint32)(x.FptrMapUint16Uint32), d)
				}
			}
		case "FMapUint16Uint64":
			if r.TryDecodeAsNil() {
				x.FMapUint16Uint64 = nil
			} else {
				if false {
				} else {
					h.decMapuint16uint64((*map[uint16]uint64)(&x.FMapUint16Uint64), d)
				}
			}
		case "FptrMapUint16Uint64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint16Uint64 != nil {
					x.FptrMapUint16Uint64 = nil
				}
			} else {
				if x.FptrMapUint16Uint64 == nil {
					x.FptrMapUint16Uint64 = new(map[uint16]uint64)
				}

				if false {
				} else {
					h.decMapuint16uint64((*map[uint16]uint64)(x.FptrMapUint16Uint64), d)
				}
			}
		case "FMapUint16Uintptr":
			if r.TryDecodeAsNil() {
				x.FMapUint16Uintptr = nil
			} else {
				if false {
				} else {
					h.decMapuint16uintptr((*map[uint16]uintptr)(&x.FMapUint16Uintptr), d)
				}
			}
		case "FptrMapUint16Uintptr":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint16Uintptr != nil {
					x.FptrMapUint16Uintptr = nil
				}
			} else {
				if x.FptrMapUint16Uintptr == nil {
					x.FptrMapUint16Uintptr = new(map[uint16]uintptr)
				}

				if false {
				} else {
					h.decMapuint16uintptr((*map[uint16]uintptr)(x.FptrMapUint16Uintptr), d)
				}
			}
		case "FMapUint16Int":
			if r.TryDecodeAsNil() {
				x.FMapUint16Int = nil
			} else {
				if false {
				} else {
					h.decMapuint16int((*map[uint16]int)(&x.FMapUint16Int), d)
				}
			}
		case "FptrMapUint16Int":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint16Int != nil {
					x.FptrMapUint16Int = nil
				}
			} else {
				if x.FptrMapUint16Int == nil {
					x.FptrMapUint16Int = new(map[uint16]int)
				}

				if false {
				} else {
					h.decMapuint16int((*map[uint16]int)(x.FptrMapUint16Int), d)
				}
			}
		case "FMapUint16Int8":
			if r.TryDecodeAsNil() {
				x.FMapUint16Int8 = nil
			} else {
				if false {
				} else {
					h.decMapuint16int8((*map[uint16]int8)(&x.FMapUint16Int8), d)
				}
			}
		case "FptrMapUint16Int8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint16Int8 != nil {
					x.FptrMapUint16Int8 = nil
				}
			} else {
				if x.FptrMapUint16Int8 == nil {
					x.FptrMapUint16Int8 = new(map[uint16]int8)
				}

				if false {
				} else {
					h.decMapuint16int8((*map[uint16]int8)(x.FptrMapUint16Int8), d)
				}
			}
		case "FMapUint16Int16":
			if r.TryDecodeAsNil() {
				x.FMapUint16Int16 = nil
			} else {
				if false {
				} else {
					h.decMapuint16int16((*map[uint16]int16)(&x.FMapUint16Int16), d)
				}
			}
		case "FptrMapUint16Int16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint16Int16 != nil {
					x.FptrMapUint16Int16 = nil
				}
			} else {
				if x.FptrMapUint16Int16 == nil {
					x.FptrMapUint16Int16 = new(map[uint16]int16)
				}

				if false {
				} else {
					h.decMapuint16int16((*map[uint16]int16)(x.FptrMapUint16Int16), d)
				}
			}
		case "FMapUint16Int32":
			if r.TryDecodeAsNil() {
				x.FMapUint16Int32 = nil
			} else {
				if false {
				} else {
					h.decMapuint16int32((*map[uint16]int32)(&x.FMapUint16Int32), d)
				}
			}
		case "FptrMapUint16Int32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint16Int32 != nil {
					x.FptrMapUint16Int32 = nil
				}
			} else {
				if x.FptrMapUint16Int32 == nil {
					x.FptrMapUint16Int32 = new(map[uint16]int32)
				}

				if false {
				} else {
					h.decMapuint16int32((*map[uint16]int32)(x.FptrMapUint16Int32), d)
				}
			}
		case "FMapUint16Int64":
			if r.TryDecodeAsNil() {
				x.FMapUint16Int64 = nil
			} else {
				if false {
				} else {
					h.decMapuint16int64((*map[uint16]int64)(&x.FMapUint16Int64), d)
				}
			}
		case "FptrMapUint16Int64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint16Int64 != nil {
					x.FptrMapUint16Int64 = nil
				}
			} else {
				if x.FptrMapUint16Int64 == nil {
					x.FptrMapUint16Int64 = new(map[uint16]int64)
				}

				if false {
				} else {
					h.decMapuint16int64((*map[uint16]int64)(x.FptrMapUint16Int64), d)
				}
			}
		case "FMapUint16Float32":
			if r.TryDecodeAsNil() {
				x.FMapUint16Float32 = nil
			} else {
				if false {
				} else {
					h.decMapuint16float32((*map[uint16]float32)(&x.FMapUint16Float32), d)
				}
			}
		case "FptrMapUint16Float32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint16Float32 != nil {
					x.FptrMapUint16Float32 = nil
				}
			} else {
				if x.FptrMapUint16Float32 == nil {
					x.FptrMapUint16Float32 = new(map[uint16]float32)
				}

				if false {
				} else {
					h.decMapuint16float32((*map[uint16]float32)(x.FptrMapUint16Float32), d)
				}
			}
		case "FMapUint16Float64":
			if r.TryDecodeAsNil() {
				x.FMapUint16Float64 = nil
			} else {
				if false {
				} else {
					h.decMapuint16float64((*map[uint16]float64)(&x.FMapUint16Float64), d)
				}
			}
		case "FptrMapUint16Float64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint16Float64 != nil {
					x.FptrMapUint16Float64 = nil
				}
			} else {
				if x.FptrMapUint16Float64 == nil {
					x.FptrMapUint16Float64 = new(map[uint16]float64)
				}

				if false {
				} else {
					h.decMapuint16float64((*map[uint16]float64)(x.FptrMapUint16Float64), d)
				}
			}
		case "FMapUint16Bool":
			if r.TryDecodeAsNil() {
				x.FMapUint16Bool = nil
			} else {
				if false {
				} else {
					h.decMapuint16bool((*map[uint16]bool)(&x.FMapUint16Bool), d)
				}
			}
		case "FptrMapUint16Bool":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint16Bool != nil {
					x.FptrMapUint16Bool = nil
				}
			} else {
				if x.FptrMapUint16Bool == nil {
					x.FptrMapUint16Bool = new(map[uint16]bool)
				}

				if false {
				} else {
					h.decMapuint16bool((*map[uint16]bool)(x.FptrMapUint16Bool), d)
				}
			}
		case "FMapUint32Intf":
			if r.TryDecodeAsNil() {
				x.FMapUint32Intf = nil
			} else {
				if false {
				} else {
					h.decMapuint32Interface((*map[uint32]interface{})(&x.FMapUint32Intf), d)
				}
			}
		case "FptrMapUint32Intf":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint32Intf != nil {
					x.FptrMapUint32Intf = nil
				}
			} else {
				if x.FptrMapUint32Intf == nil {
					x.FptrMapUint32Intf = new(map[uint32]interface{})
				}

				if false {
				} else {
					h.decMapuint32Interface((*map[uint32]interface{})(x.FptrMapUint32Intf), d)
				}
			}
		case "FMapUint32String":
			if r.TryDecodeAsNil() {
				x.FMapUint32String = nil
			} else {
				if false {
				} else {
					h.decMapuint32string((*map[uint32]string)(&x.FMapUint32String), d)
				}
			}
		case "FptrMapUint32String":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint32String != nil {
					x.FptrMapUint32String = nil
				}
			} else {
				if x.FptrMapUint32String == nil {
					x.FptrMapUint32String = new(map[uint32]string)
				}

				if false {
				} else {
					h.decMapuint32string((*map[uint32]string)(x.FptrMapUint32String), d)
				}
			}
		case "FMapUint32Uint":
			if r.TryDecodeAsNil() {
				x.FMapUint32Uint = nil
			} else {
				if false {
				} else {
					h.decMapuint32uint((*map[uint32]uint)(&x.FMapUint32Uint), d)
				}
			}
		case "FptrMapUint32Uint":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint32Uint != nil {
					x.FptrMapUint32Uint = nil
				}
			} else {
				if x.FptrMapUint32Uint == nil {
					x.FptrMapUint32Uint = new(map[uint32]uint)
				}

				if false {
				} else {
					h.decMapuint32uint((*map[uint32]uint)(x.FptrMapUint32Uint), d)
				}
			}
		case "FMapUint32Uint8":
			if r.TryDecodeAsNil() {
				x.FMapUint32Uint8 = nil
			} else {
				if false {
				} else {
					h.decMapuint32uint8((*map[uint32]uint8)(&x.FMapUint32Uint8), d)
				}
			}
		case "FptrMapUint32Uint8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint32Uint8 != nil {
					x.FptrMapUint32Uint8 = nil
				}
			} else {
				if x.FptrMapUint32Uint8 == nil {
					x.FptrMapUint32Uint8 = new(map[uint32]uint8)
				}

				if false {
				} else {
					h.decMapuint32uint8((*map[uint32]uint8)(x.FptrMapUint32Uint8), d)
				}
			}
		case "FMapUint32Uint16":
			if r.TryDecodeAsNil() {
				x.FMapUint32Uint16 = nil
			} else {
				if false {
				} else {
					h.decMapuint32uint16((*map[uint32]uint16)(&x.FMapUint32Uint16), d)
				}
			}
		case "FptrMapUint32Uint16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint32Uint16 != nil {
					x.FptrMapUint32Uint16 = nil
				}
			} else {
				if x.FptrMapUint32Uint16 == nil {
					x.FptrMapUint32Uint16 = new(map[uint32]uint16)
				}

				if false {
				} else {
					h.decMapuint32uint16((*map[uint32]uint16)(x.FptrMapUint32Uint16), d)
				}
			}
		case "FMapUint32Uint32":
			if r.TryDecodeAsNil() {
				x.FMapUint32Uint32 = nil
			} else {
				if false {
				} else {
					h.decMapuint32uint32((*map[uint32]uint32)(&x.FMapUint32Uint32), d)
				}
			}
		case "FptrMapUint32Uint32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint32Uint32 != nil {
					x.FptrMapUint32Uint32 = nil
				}
			} else {
				if x.FptrMapUint32Uint32 == nil {
					x.FptrMapUint32Uint32 = new(map[uint32]uint32)
				}

				if false {
				} else {
					h.decMapuint32uint32((*map[uint32]uint32)(x.FptrMapUint32Uint32), d)
				}
			}
		case "FMapUint32Uint64":
			if r.TryDecodeAsNil() {
				x.FMapUint32Uint64 = nil
			} else {
				if false {
				} else {
					h.decMapuint32uint64((*map[uint32]uint64)(&x.FMapUint32Uint64), d)
				}
			}
		case "FptrMapUint32Uint64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint32Uint64 != nil {
					x.FptrMapUint32Uint64 = nil
				}
			} else {
				if x.FptrMapUint32Uint64 == nil {
					x.FptrMapUint32Uint64 = new(map[uint32]uint64)
				}

				if false {
				} else {
					h.decMapuint32uint64((*map[uint32]uint64)(x.FptrMapUint32Uint64), d)
				}
			}
		case "FMapUint32Uintptr":
			if r.TryDecodeAsNil() {
				x.FMapUint32Uintptr = nil
			} else {
				if false {
				} else {
					h.decMapuint32uintptr((*map[uint32]uintptr)(&x.FMapUint32Uintptr), d)
				}
			}
		case "FptrMapUint32Uintptr":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint32Uintptr != nil {
					x.FptrMapUint32Uintptr = nil
				}
			} else {
				if x.FptrMapUint32Uintptr == nil {
					x.FptrMapUint32Uintptr = new(map[uint32]uintptr)
				}

				if false {
				} else {
					h.decMapuint32uintptr((*map[uint32]uintptr)(x.FptrMapUint32Uintptr), d)
				}
			}
		case "FMapUint32Int":
			if r.TryDecodeAsNil() {
				x.FMapUint32Int = nil
			} else {
				if false {
				} else {
					h.decMapuint32int((*map[uint32]int)(&x.FMapUint32Int), d)
				}
			}
		case "FptrMapUint32Int":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint32Int != nil {
					x.FptrMapUint32Int = nil
				}
			} else {
				if x.FptrMapUint32Int == nil {
					x.FptrMapUint32Int = new(map[uint32]int)
				}

				if false {
				} else {
					h.decMapuint32int((*map[uint32]int)(x.FptrMapUint32Int), d)
				}
			}
		case "FMapUint32Int8":
			if r.TryDecodeAsNil() {
				x.FMapUint32Int8 = nil
			} else {
				if false {
				} else {
					h.decMapuint32int8((*map[uint32]int8)(&x.FMapUint32Int8), d)
				}
			}
		case "FptrMapUint32Int8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint32Int8 != nil {
					x.FptrMapUint32Int8 = nil
				}
			} else {
				if x.FptrMapUint32Int8 == nil {
					x.FptrMapUint32Int8 = new(map[uint32]int8)
				}

				if false {
				} else {
					h.decMapuint32int8((*map[uint32]int8)(x.FptrMapUint32Int8), d)
				}
			}
		case "FMapUint32Int16":
			if r.TryDecodeAsNil() {
				x.FMapUint32Int16 = nil
			} else {
				if false {
				} else {
					h.decMapuint32int16((*map[uint32]int16)(&x.FMapUint32Int16), d)
				}
			}
		case "FptrMapUint32Int16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint32Int16 != nil {
					x.FptrMapUint32Int16 = nil
				}
			} else {
				if x.FptrMapUint32Int16 == nil {
					x.FptrMapUint32Int16 = new(map[uint32]int16)
				}

				if false {
				} else {
					h.decMapuint32int16((*map[uint32]int16)(x.FptrMapUint32Int16), d)
				}
			}
		case "FMapUint32Int32":
			if r.TryDecodeAsNil() {
				x.FMapUint32Int32 = nil
			} else {
				if false {
				} else {
					h.decMapuint32int32((*map[uint32]int32)(&x.FMapUint32Int32), d)
				}
			}
		case "FptrMapUint32Int32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint32Int32 != nil {
					x.FptrMapUint32Int32 = nil
				}
			} else {
				if x.FptrMapUint32Int32 == nil {
					x.FptrMapUint32Int32 = new(map[uint32]int32)
				}

				if false {
				} else {
					h.decMapuint32int32((*map[uint32]int32)(x.FptrMapUint32Int32), d)
				}
			}
		case "FMapUint32Int64":
			if r.TryDecodeAsNil() {
				x.FMapUint32Int64 = nil
			} else {
				if false {
				} else {
					h.decMapuint32int64((*map[uint32]int64)(&x.FMapUint32Int64), d)
				}
			}
		case "FptrMapUint32Int64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint32Int64 != nil {
					x.FptrMapUint32Int64 = nil
				}
			} else {
				if x.FptrMapUint32Int64 == nil {
					x.FptrMapUint32Int64 = new(map[uint32]int64)
				}

				if false {
				} else {
					h.decMapuint32int64((*map[uint32]int64)(x.FptrMapUint32Int64), d)
				}
			}
		case "FMapUint32Float32":
			if r.TryDecodeAsNil() {
				x.FMapUint32Float32 = nil
			} else {
				if false {
				} else {
					h.decMapuint32float32((*map[uint32]float32)(&x.FMapUint32Float32), d)
				}
			}
		case "FptrMapUint32Float32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint32Float32 != nil {
					x.FptrMapUint32Float32 = nil
				}
			} else {
				if x.FptrMapUint32Float32 == nil {
					x.FptrMapUint32Float32 = new(map[uint32]float32)
				}

				if false {
				} else {
					h.decMapuint32float32((*map[uint32]float32)(x.FptrMapUint32Float32), d)
				}
			}
		case "FMapUint32Float64":
			if r.TryDecodeAsNil() {
				x.FMapUint32Float64 = nil
			} else {
				if false {
				} else {
					h.decMapuint32float64((*map[uint32]float64)(&x.FMapUint32Float64), d)
				}
			}
		case "FptrMapUint32Float64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint32Float64 != nil {
					x.FptrMapUint32Float64 = nil
				}
			} else {
				if x.FptrMapUint32Float64 == nil {
					x.FptrMapUint32Float64 = new(map[uint32]float64)
				}

				if false {
				} else {
					h.decMapuint32float64((*map[uint32]float64)(x.FptrMapUint32Float64), d)
				}
			}
		case "FMapUint32Bool":
			if r.TryDecodeAsNil() {
				x.FMapUint32Bool = nil
			} else {
				if false {
				} else {
					h.decMapuint32bool((*map[uint32]bool)(&x.FMapUint32Bool), d)
				}
			}
		case "FptrMapUint32Bool":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint32Bool != nil {
					x.FptrMapUint32Bool = nil
				}
			} else {
				if x.FptrMapUint32Bool == nil {
					x.FptrMapUint32Bool = new(map[uint32]bool)
				}

				if false {
				} else {
					h.decMapuint32bool((*map[uint32]bool)(x.FptrMapUint32Bool), d)
				}
			}
		case "FMapUint64Intf":
			if r.TryDecodeAsNil() {
				x.FMapUint64Intf = nil
			} else {
				if false {
				} else {
					h.decMapuint64Interface((*map[uint64]interface{})(&x.FMapUint64Intf), d)
				}
			}
		case "FptrMapUint64Intf":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint64Intf != nil {
					x.FptrMapUint64Intf = nil
				}
			} else {
				if x.FptrMapUint64Intf == nil {
					x.FptrMapUint64Intf = new(map[uint64]interface{})
				}

				if false {
				} else {
					h.decMapuint64Interface((*map[uint64]interface{})(x.FptrMapUint64Intf), d)
				}
			}
		case "FMapUint64String":
			if r.TryDecodeAsNil() {
				x.FMapUint64String = nil
			} else {
				if false {
				} else {
					h.decMapuint64string((*map[uint64]string)(&x.FMapUint64String), d)
				}
			}
		case "FptrMapUint64String":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint64String != nil {
					x.FptrMapUint64String = nil
				}
			} else {
				if x.FptrMapUint64String == nil {
					x.FptrMapUint64String = new(map[uint64]string)
				}

				if false {
				} else {
					h.decMapuint64string((*map[uint64]string)(x.FptrMapUint64String), d)
				}
			}
		case "FMapUint64Uint":
			if r.TryDecodeAsNil() {
				x.FMapUint64Uint = nil
			} else {
				if false {
				} else {
					h.decMapuint64uint((*map[uint64]uint)(&x.FMapUint64Uint), d)
				}
			}
		case "FptrMapUint64Uint":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint64Uint != nil {
					x.FptrMapUint64Uint = nil
				}
			} else {
				if x.FptrMapUint64Uint == nil {
					x.FptrMapUint64Uint = new(map[uint64]uint)
				}

				if false {
				} else {
					h.decMapuint64uint((*map[uint64]uint)(x.FptrMapUint64Uint), d)
				}
			}
		case "FMapUint64Uint8":
			if r.TryDecodeAsNil() {
				x.FMapUint64Uint8 = nil
			} else {
				if false {
				} else {
					h.decMapuint64uint8((*map[uint64]uint8)(&x.FMapUint64Uint8), d)
				}
			}
		case "FptrMapUint64Uint8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint64Uint8 != nil {
					x.FptrMapUint64Uint8 = nil
				}
			} else {
				if x.FptrMapUint64Uint8 == nil {
					x.FptrMapUint64Uint8 = new(map[uint64]uint8)
				}

				if false {
				} else {
					h.decMapuint64uint8((*map[uint64]uint8)(x.FptrMapUint64Uint8), d)
				}
			}
		case "FMapUint64Uint16":
			if r.TryDecodeAsNil() {
				x.FMapUint64Uint16 = nil
			} else {
				if false {
				} else {
					h.decMapuint64uint16((*map[uint64]uint16)(&x.FMapUint64Uint16), d)
				}
			}
		case "FptrMapUint64Uint16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint64Uint16 != nil {
					x.FptrMapUint64Uint16 = nil
				}
			} else {
				if x.FptrMapUint64Uint16 == nil {
					x.FptrMapUint64Uint16 = new(map[uint64]uint16)
				}

				if false {
				} else {
					h.decMapuint64uint16((*map[uint64]uint16)(x.FptrMapUint64Uint16), d)
				}
			}
		case "FMapUint64Uint32":
			if r.TryDecodeAsNil() {
				x.FMapUint64Uint32 = nil
			} else {
				if false {
				} else {
					h.decMapuint64uint32((*map[uint64]uint32)(&x.FMapUint64Uint32), d)
				}
			}
		case "FptrMapUint64Uint32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint64Uint32 != nil {
					x.FptrMapUint64Uint32 = nil
				}
			} else {
				if x.FptrMapUint64Uint32 == nil {
					x.FptrMapUint64Uint32 = new(map[uint64]uint32)
				}

				if false {
				} else {
					h.decMapuint64uint32((*map[uint64]uint32)(x.FptrMapUint64Uint32), d)
				}
			}
		case "FMapUint64Uint64":
			if r.TryDecodeAsNil() {
				x.FMapUint64Uint64 = nil
			} else {
				if false {
				} else {
					h.decMapuint64uint64((*map[uint64]uint64)(&x.FMapUint64Uint64), d)
				}
			}
		case "FptrMapUint64Uint64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint64Uint64 != nil {
					x.FptrMapUint64Uint64 = nil
				}
			} else {
				if x.FptrMapUint64Uint64 == nil {
					x.FptrMapUint64Uint64 = new(map[uint64]uint64)
				}

				if false {
				} else {
					h.decMapuint64uint64((*map[uint64]uint64)(x.FptrMapUint64Uint64), d)
				}
			}
		case "FMapUint64Uintptr":
			if r.TryDecodeAsNil() {
				x.FMapUint64Uintptr = nil
			} else {
				if false {
				} else {
					h.decMapuint64uintptr((*map[uint64]uintptr)(&x.FMapUint64Uintptr), d)
				}
			}
		case "FptrMapUint64Uintptr":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint64Uintptr != nil {
					x.FptrMapUint64Uintptr = nil
				}
			} else {
				if x.FptrMapUint64Uintptr == nil {
					x.FptrMapUint64Uintptr = new(map[uint64]uintptr)
				}

				if false {
				} else {
					h.decMapuint64uintptr((*map[uint64]uintptr)(x.FptrMapUint64Uintptr), d)
				}
			}
		case "FMapUint64Int":
			if r.TryDecodeAsNil() {
				x.FMapUint64Int = nil
			} else {
				if false {
				} else {
					h.decMapuint64int((*map[uint64]int)(&x.FMapUint64Int), d)
				}
			}
		case "FptrMapUint64Int":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint64Int != nil {
					x.FptrMapUint64Int = nil
				}
			} else {
				if x.FptrMapUint64Int == nil {
					x.FptrMapUint64Int = new(map[uint64]int)
				}

				if false {
				} else {
					h.decMapuint64int((*map[uint64]int)(x.FptrMapUint64Int), d)
				}
			}
		case "FMapUint64Int8":
			if r.TryDecodeAsNil() {
				x.FMapUint64Int8 = nil
			} else {
				if false {
				} else {
					h.decMapuint64int8((*map[uint64]int8)(&x.FMapUint64Int8), d)
				}
			}
		case "FptrMapUint64Int8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint64Int8 != nil {
					x.FptrMapUint64Int8 = nil
				}
			} else {
				if x.FptrMapUint64Int8 == nil {
					x.FptrMapUint64Int8 = new(map[uint64]int8)
				}

				if false {
				} else {
					h.decMapuint64int8((*map[uint64]int8)(x.FptrMapUint64Int8), d)
				}
			}
		case "FMapUint64Int16":
			if r.TryDecodeAsNil() {
				x.FMapUint64Int16 = nil
			} else {
				if false {
				} else {
					h.decMapuint64int16((*map[uint64]int16)(&x.FMapUint64Int16), d)
				}
			}
		case "FptrMapUint64Int16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint64Int16 != nil {
					x.FptrMapUint64Int16 = nil
				}
			} else {
				if x.FptrMapUint64Int16 == nil {
					x.FptrMapUint64Int16 = new(map[uint64]int16)
				}

				if false {
				} else {
					h.decMapuint64int16((*map[uint64]int16)(x.FptrMapUint64Int16), d)
				}
			}
		case "FMapUint64Int32":
			if r.TryDecodeAsNil() {
				x.FMapUint64Int32 = nil
			} else {
				if false {
				} else {
					h.decMapuint64int32((*map[uint64]int32)(&x.FMapUint64Int32), d)
				}
			}
		case "FptrMapUint64Int32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint64Int32 != nil {
					x.FptrMapUint64Int32 = nil
				}
			} else {
				if x.FptrMapUint64Int32 == nil {
					x.FptrMapUint64Int32 = new(map[uint64]int32)
				}

				if false {
				} else {
					h.decMapuint64int32((*map[uint64]int32)(x.FptrMapUint64Int32), d)
				}
			}
		case "FMapUint64Int64":
			if r.TryDecodeAsNil() {
				x.FMapUint64Int64 = nil
			} else {
				if false {
				} else {
					h.decMapuint64int64((*map[uint64]int64)(&x.FMapUint64Int64), d)
				}
			}
		case "FptrMapUint64Int64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint64Int64 != nil {
					x.FptrMapUint64Int64 = nil
				}
			} else {
				if x.FptrMapUint64Int64 == nil {
					x.FptrMapUint64Int64 = new(map[uint64]int64)
				}

				if false {
				} else {
					h.decMapuint64int64((*map[uint64]int64)(x.FptrMapUint64Int64), d)
				}
			}
		case "FMapUint64Float32":
			if r.TryDecodeAsNil() {
				x.FMapUint64Float32 = nil
			} else {
				if false {
				} else {
					h.decMapuint64float32((*map[uint64]float32)(&x.FMapUint64Float32), d)
				}
			}
		case "FptrMapUint64Float32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint64Float32 != nil {
					x.FptrMapUint64Float32 = nil
				}
			} else {
				if x.FptrMapUint64Float32 == nil {
					x.FptrMapUint64Float32 = new(map[uint64]float32)
				}

				if false {
				} else {
					h.decMapuint64float32((*map[uint64]float32)(x.FptrMapUint64Float32), d)
				}
			}
		case "FMapUint64Float64":
			if r.TryDecodeAsNil() {
				x.FMapUint64Float64 = nil
			} else {
				if false {
				} else {
					h.decMapuint64float64((*map[uint64]float64)(&x.FMapUint64Float64), d)
				}
			}
		case "FptrMapUint64Float64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint64Float64 != nil {
					x.FptrMapUint64Float64 = nil
				}
			} else {
				if x.FptrMapUint64Float64 == nil {
					x.FptrMapUint64Float64 = new(map[uint64]float64)
				}

				if false {
				} else {
					h.decMapuint64float64((*map[uint64]float64)(x.FptrMapUint64Float64), d)
				}
			}
		case "FMapUint64Bool":
			if r.TryDecodeAsNil() {
				x.FMapUint64Bool = nil
			} else {
				if false {
				} else {
					h.decMapuint64bool((*map[uint64]bool)(&x.FMapUint64Bool), d)
				}
			}
		case "FptrMapUint64Bool":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUint64Bool != nil {
					x.FptrMapUint64Bool = nil
				}
			} else {
				if x.FptrMapUint64Bool == nil {
					x.FptrMapUint64Bool = new(map[uint64]bool)
				}

				if false {
				} else {
					h.decMapuint64bool((*map[uint64]bool)(x.FptrMapUint64Bool), d)
				}
			}
		case "FMapUintptrIntf":
			if r.TryDecodeAsNil() {
				x.FMapUintptrIntf = nil
			} else {
				if false {
				} else {
					h.decMapuintptrInterface((*map[uintptr]interface{})(&x.FMapUintptrIntf), d)
				}
			}
		case "FptrMapUintptrIntf":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintptrIntf != nil {
					x.FptrMapUintptrIntf = nil
				}
			} else {
				if x.FptrMapUintptrIntf == nil {
					x.FptrMapUintptrIntf = new(map[uintptr]interface{})
				}

				if false {
				} else {
					h.decMapuintptrInterface((*map[uintptr]interface{})(x.FptrMapUintptrIntf), d)
				}
			}
		case "FMapUintptrString":
			if r.TryDecodeAsNil() {
				x.FMapUintptrString = nil
			} else {
				if false {
				} else {
					h.decMapuintptrstring((*map[uintptr]string)(&x.FMapUintptrString), d)
				}
			}
		case "FptrMapUintptrString":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintptrString != nil {
					x.FptrMapUintptrString = nil
				}
			} else {
				if x.FptrMapUintptrString == nil {
					x.FptrMapUintptrString = new(map[uintptr]string)
				}

				if false {
				} else {
					h.decMapuintptrstring((*map[uintptr]string)(x.FptrMapUintptrString), d)
				}
			}
		case "FMapUintptrUint":
			if r.TryDecodeAsNil() {
				x.FMapUintptrUint = nil
			} else {
				if false {
				} else {
					h.decMapuintptruint((*map[uintptr]uint)(&x.FMapUintptrUint), d)
				}
			}
		case "FptrMapUintptrUint":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintptrUint != nil {
					x.FptrMapUintptrUint = nil
				}
			} else {
				if x.FptrMapUintptrUint == nil {
					x.FptrMapUintptrUint = new(map[uintptr]uint)
				}

				if false {
				} else {
					h.decMapuintptruint((*map[uintptr]uint)(x.FptrMapUintptrUint), d)
				}
			}
		case "FMapUintptrUint8":
			if r.TryDecodeAsNil() {
				x.FMapUintptrUint8 = nil
			} else {
				if false {
				} else {
					h.decMapuintptruint8((*map[uintptr]uint8)(&x.FMapUintptrUint8), d)
				}
			}
		case "FptrMapUintptrUint8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintptrUint8 != nil {
					x.FptrMapUintptrUint8 = nil
				}
			} else {
				if x.FptrMapUintptrUint8 == nil {
					x.FptrMapUintptrUint8 = new(map[uintptr]uint8)
				}

				if false {
				} else {
					h.decMapuintptruint8((*map[uintptr]uint8)(x.FptrMapUintptrUint8), d)
				}
			}
		case "FMapUintptrUint16":
			if r.TryDecodeAsNil() {
				x.FMapUintptrUint16 = nil
			} else {
				if false {
				} else {
					h.decMapuintptruint16((*map[uintptr]uint16)(&x.FMapUintptrUint16), d)
				}
			}
		case "FptrMapUintptrUint16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintptrUint16 != nil {
					x.FptrMapUintptrUint16 = nil
				}
			} else {
				if x.FptrMapUintptrUint16 == nil {
					x.FptrMapUintptrUint16 = new(map[uintptr]uint16)
				}

				if false {
				} else {
					h.decMapuintptruint16((*map[uintptr]uint16)(x.FptrMapUintptrUint16), d)
				}
			}
		case "FMapUintptrUint32":
			if r.TryDecodeAsNil() {
				x.FMapUintptrUint32 = nil
			} else {
				if false {
				} else {
					h.decMapuintptruint32((*map[uintptr]uint32)(&x.FMapUintptrUint32), d)
				}
			}
		case "FptrMapUintptrUint32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintptrUint32 != nil {
					x.FptrMapUintptrUint32 = nil
				}
			} else {
				if x.FptrMapUintptrUint32 == nil {
					x.FptrMapUintptrUint32 = new(map[uintptr]uint32)
				}

				if false {
				} else {
					h.decMapuintptruint32((*map[uintptr]uint32)(x.FptrMapUintptrUint32), d)
				}
			}
		case "FMapUintptrUint64":
			if r.TryDecodeAsNil() {
				x.FMapUintptrUint64 = nil
			} else {
				if false {
				} else {
					h.decMapuintptruint64((*map[uintptr]uint64)(&x.FMapUintptrUint64), d)
				}
			}
		case "FptrMapUintptrUint64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintptrUint64 != nil {
					x.FptrMapUintptrUint64 = nil
				}
			} else {
				if x.FptrMapUintptrUint64 == nil {
					x.FptrMapUintptrUint64 = new(map[uintptr]uint64)
				}

				if false {
				} else {
					h.decMapuintptruint64((*map[uintptr]uint64)(x.FptrMapUintptrUint64), d)
				}
			}
		case "FMapUintptrUintptr":
			if r.TryDecodeAsNil() {
				x.FMapUintptrUintptr = nil
			} else {
				if false {
				} else {
					h.decMapuintptruintptr((*map[uintptr]uintptr)(&x.FMapUintptrUintptr), d)
				}
			}
		case "FptrMapUintptrUintptr":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintptrUintptr != nil {
					x.FptrMapUintptrUintptr = nil
				}
			} else {
				if x.FptrMapUintptrUintptr == nil {
					x.FptrMapUintptrUintptr = new(map[uintptr]uintptr)
				}

				if false {
				} else {
					h.decMapuintptruintptr((*map[uintptr]uintptr)(x.FptrMapUintptrUintptr), d)
				}
			}
		case "FMapUintptrInt":
			if r.TryDecodeAsNil() {
				x.FMapUintptrInt = nil
			} else {
				if false {
				} else {
					h.decMapuintptrint((*map[uintptr]int)(&x.FMapUintptrInt), d)
				}
			}
		case "FptrMapUintptrInt":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintptrInt != nil {
					x.FptrMapUintptrInt = nil
				}
			} else {
				if x.FptrMapUintptrInt == nil {
					x.FptrMapUintptrInt = new(map[uintptr]int)
				}

				if false {
				} else {
					h.decMapuintptrint((*map[uintptr]int)(x.FptrMapUintptrInt), d)
				}
			}
		case "FMapUintptrInt8":
			if r.TryDecodeAsNil() {
				x.FMapUintptrInt8 = nil
			} else {
				if false {
				} else {
					h.decMapuintptrint8((*map[uintptr]int8)(&x.FMapUintptrInt8), d)
				}
			}
		case "FptrMapUintptrInt8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintptrInt8 != nil {
					x.FptrMapUintptrInt8 = nil
				}
			} else {
				if x.FptrMapUintptrInt8 == nil {
					x.FptrMapUintptrInt8 = new(map[uintptr]int8)
				}

				if false {
				} else {
					h.decMapuintptrint8((*map[uintptr]int8)(x.FptrMapUintptrInt8), d)
				}
			}
		case "FMapUintptrInt16":
			if r.TryDecodeAsNil() {
				x.FMapUintptrInt16 = nil
			} else {
				if false {
				} else {
					h.decMapuintptrint16((*map[uintptr]int16)(&x.FMapUintptrInt16), d)
				}
			}
		case "FptrMapUintptrInt16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintptrInt16 != nil {
					x.FptrMapUintptrInt16 = nil
				}
			} else {
				if x.FptrMapUintptrInt16 == nil {
					x.FptrMapUintptrInt16 = new(map[uintptr]int16)
				}

				if false {
				} else {
					h.decMapuintptrint16((*map[uintptr]int16)(x.FptrMapUintptrInt16), d)
				}
			}
		case "FMapUintptrInt32":
			if r.TryDecodeAsNil() {
				x.FMapUintptrInt32 = nil
			} else {
				if false {
				} else {
					h.decMapuintptrint32((*map[uintptr]int32)(&x.FMapUintptrInt32), d)
				}
			}
		case "FptrMapUintptrInt32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintptrInt32 != nil {
					x.FptrMapUintptrInt32 = nil
				}
			} else {
				if x.FptrMapUintptrInt32 == nil {
					x.FptrMapUintptrInt32 = new(map[uintptr]int32)
				}

				if false {
				} else {
					h.decMapuintptrint32((*map[uintptr]int32)(x.FptrMapUintptrInt32), d)
				}
			}
		case "FMapUintptrInt64":
			if r.TryDecodeAsNil() {
				x.FMapUintptrInt64 = nil
			} else {
				if false {
				} else {
					h.decMapuintptrint64((*map[uintptr]int64)(&x.FMapUintptrInt64), d)
				}
			}
		case "FptrMapUintptrInt64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintptrInt64 != nil {
					x.FptrMapUintptrInt64 = nil
				}
			} else {
				if x.FptrMapUintptrInt64 == nil {
					x.FptrMapUintptrInt64 = new(map[uintptr]int64)
				}

				if false {
				} else {
					h.decMapuintptrint64((*map[uintptr]int64)(x.FptrMapUintptrInt64), d)
				}
			}
		case "FMapUintptrFloat32":
			if r.TryDecodeAsNil() {
				x.FMapUintptrFloat32 = nil
			} else {
				if false {
				} else {
					h.decMapuintptrfloat32((*map[uintptr]float32)(&x.FMapUintptrFloat32), d)
				}
			}
		case "FptrMapUintptrFloat32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintptrFloat32 != nil {
					x.FptrMapUintptrFloat32 = nil
				}
			} else {
				if x.FptrMapUintptrFloat32 == nil {
					x.FptrMapUintptrFloat32 = new(map[uintptr]float32)
				}

				if false {
				} else {
					h.decMapuintptrfloat32((*map[uintptr]float32)(x.FptrMapUintptrFloat32), d)
				}
			}
		case "FMapUintptrFloat64":
			if r.TryDecodeAsNil() {
				x.FMapUintptrFloat64 = nil
			} else {
				if false {
				} else {
					h.decMapuintptrfloat64((*map[uintptr]float64)(&x.FMapUintptrFloat64), d)
				}
			}
		case "FptrMapUintptrFloat64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintptrFloat64 != nil {
					x.FptrMapUintptrFloat64 = nil
				}
			} else {
				if x.FptrMapUintptrFloat64 == nil {
					x.FptrMapUintptrFloat64 = new(map[uintptr]float64)
				}

				if false {
				} else {
					h.decMapuintptrfloat64((*map[uintptr]float64)(x.FptrMapUintptrFloat64), d)
				}
			}
		case "FMapUintptrBool":
			if r.TryDecodeAsNil() {
				x.FMapUintptrBool = nil
			} else {
				if false {
				} else {
					h.decMapuintptrbool((*map[uintptr]bool)(&x.FMapUintptrBool), d)
				}
			}
		case "FptrMapUintptrBool":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapUintptrBool != nil {
					x.FptrMapUintptrBool = nil
				}
			} else {
				if x.FptrMapUintptrBool == nil {
					x.FptrMapUintptrBool = new(map[uintptr]bool)
				}

				if false {
				} else {
					h.decMapuintptrbool((*map[uintptr]bool)(x.FptrMapUintptrBool), d)
				}
			}
		case "FMapIntIntf":
			if r.TryDecodeAsNil() {
				x.FMapIntIntf = nil
			} else {
				if false {
				} else {
					h.decMapintInterface((*map[int]interface{})(&x.FMapIntIntf), d)
				}
			}
		case "FptrMapIntIntf":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntIntf != nil {
					x.FptrMapIntIntf = nil
				}
			} else {
				if x.FptrMapIntIntf == nil {
					x.FptrMapIntIntf = new(map[int]interface{})
				}

				if false {
				} else {
					h.decMapintInterface((*map[int]interface{})(x.FptrMapIntIntf), d)
				}
			}
		case "FMapIntString":
			if r.TryDecodeAsNil() {
				x.FMapIntString = nil
			} else {
				if false {
				} else {
					h.decMapintstring((*map[int]string)(&x.FMapIntString), d)
				}
			}
		case "FptrMapIntString":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntString != nil {
					x.FptrMapIntString = nil
				}
			} else {
				if x.FptrMapIntString == nil {
					x.FptrMapIntString = new(map[int]string)
				}

				if false {
				} else {
					h.decMapintstring((*map[int]string)(x.FptrMapIntString), d)
				}
			}
		case "FMapIntUint":
			if r.TryDecodeAsNil() {
				x.FMapIntUint = nil
			} else {
				if false {
				} else {
					h.decMapintuint((*map[int]uint)(&x.FMapIntUint), d)
				}
			}
		case "FptrMapIntUint":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntUint != nil {
					x.FptrMapIntUint = nil
				}
			} else {
				if x.FptrMapIntUint == nil {
					x.FptrMapIntUint = new(map[int]uint)
				}

				if false {
				} else {
					h.decMapintuint((*map[int]uint)(x.FptrMapIntUint), d)
				}
			}
		case "FMapIntUint8":
			if r.TryDecodeAsNil() {
				x.FMapIntUint8 = nil
			} else {
				if false {
				} else {
					h.decMapintuint8((*map[int]uint8)(&x.FMapIntUint8), d)
				}
			}
		case "FptrMapIntUint8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntUint8 != nil {
					x.FptrMapIntUint8 = nil
				}
			} else {
				if x.FptrMapIntUint8 == nil {
					x.FptrMapIntUint8 = new(map[int]uint8)
				}

				if false {
				} else {
					h.decMapintuint8((*map[int]uint8)(x.FptrMapIntUint8), d)
				}
			}
		case "FMapIntUint16":
			if r.TryDecodeAsNil() {
				x.FMapIntUint16 = nil
			} else {
				if false {
				} else {
					h.decMapintuint16((*map[int]uint16)(&x.FMapIntUint16), d)
				}
			}
		case "FptrMapIntUint16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntUint16 != nil {
					x.FptrMapIntUint16 = nil
				}
			} else {
				if x.FptrMapIntUint16 == nil {
					x.FptrMapIntUint16 = new(map[int]uint16)
				}

				if false {
				} else {
					h.decMapintuint16((*map[int]uint16)(x.FptrMapIntUint16), d)
				}
			}
		case "FMapIntUint32":
			if r.TryDecodeAsNil() {
				x.FMapIntUint32 = nil
			} else {
				if false {
				} else {
					h.decMapintuint32((*map[int]uint32)(&x.FMapIntUint32), d)
				}
			}
		case "FptrMapIntUint32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntUint32 != nil {
					x.FptrMapIntUint32 = nil
				}
			} else {
				if x.FptrMapIntUint32 == nil {
					x.FptrMapIntUint32 = new(map[int]uint32)
				}

				if false {
				} else {
					h.decMapintuint32((*map[int]uint32)(x.FptrMapIntUint32), d)
				}
			}
		case "FMapIntUint64":
			if r.TryDecodeAsNil() {
				x.FMapIntUint64 = nil
			} else {
				if false {
				} else {
					h.decMapintuint64((*map[int]uint64)(&x.FMapIntUint64), d)
				}
			}
		case "FptrMapIntUint64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntUint64 != nil {
					x.FptrMapIntUint64 = nil
				}
			} else {
				if x.FptrMapIntUint64 == nil {
					x.FptrMapIntUint64 = new(map[int]uint64)
				}

				if false {
				} else {
					h.decMapintuint64((*map[int]uint64)(x.FptrMapIntUint64), d)
				}
			}
		case "FMapIntUintptr":
			if r.TryDecodeAsNil() {
				x.FMapIntUintptr = nil
			} else {
				if false {
				} else {
					h.decMapintuintptr((*map[int]uintptr)(&x.FMapIntUintptr), d)
				}
			}
		case "FptrMapIntUintptr":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntUintptr != nil {
					x.FptrMapIntUintptr = nil
				}
			} else {
				if x.FptrMapIntUintptr == nil {
					x.FptrMapIntUintptr = new(map[int]uintptr)
				}

				if false {
				} else {
					h.decMapintuintptr((*map[int]uintptr)(x.FptrMapIntUintptr), d)
				}
			}
		case "FMapIntInt":
			if r.TryDecodeAsNil() {
				x.FMapIntInt = nil
			} else {
				if false {
				} else {
					h.decMapintint((*map[int]int)(&x.FMapIntInt), d)
				}
			}
		case "FptrMapIntInt":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntInt != nil {
					x.FptrMapIntInt = nil
				}
			} else {
				if x.FptrMapIntInt == nil {
					x.FptrMapIntInt = new(map[int]int)
				}

				if false {
				} else {
					h.decMapintint((*map[int]int)(x.FptrMapIntInt), d)
				}
			}
		case "FMapIntInt8":
			if r.TryDecodeAsNil() {
				x.FMapIntInt8 = nil
			} else {
				if false {
				} else {
					h.decMapintint8((*map[int]int8)(&x.FMapIntInt8), d)
				}
			}
		case "FptrMapIntInt8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntInt8 != nil {
					x.FptrMapIntInt8 = nil
				}
			} else {
				if x.FptrMapIntInt8 == nil {
					x.FptrMapIntInt8 = new(map[int]int8)
				}

				if false {
				} else {
					h.decMapintint8((*map[int]int8)(x.FptrMapIntInt8), d)
				}
			}
		case "FMapIntInt16":
			if r.TryDecodeAsNil() {
				x.FMapIntInt16 = nil
			} else {
				if false {
				} else {
					h.decMapintint16((*map[int]int16)(&x.FMapIntInt16), d)
				}
			}
		case "FptrMapIntInt16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntInt16 != nil {
					x.FptrMapIntInt16 = nil
				}
			} else {
				if x.FptrMapIntInt16 == nil {
					x.FptrMapIntInt16 = new(map[int]int16)
				}

				if false {
				} else {
					h.decMapintint16((*map[int]int16)(x.FptrMapIntInt16), d)
				}
			}
		case "FMapIntInt32":
			if r.TryDecodeAsNil() {
				x.FMapIntInt32 = nil
			} else {
				if false {
				} else {
					h.decMapintint32((*map[int]int32)(&x.FMapIntInt32), d)
				}
			}
		case "FptrMapIntInt32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntInt32 != nil {
					x.FptrMapIntInt32 = nil
				}
			} else {
				if x.FptrMapIntInt32 == nil {
					x.FptrMapIntInt32 = new(map[int]int32)
				}

				if false {
				} else {
					h.decMapintint32((*map[int]int32)(x.FptrMapIntInt32), d)
				}
			}
		case "FMapIntInt64":
			if r.TryDecodeAsNil() {
				x.FMapIntInt64 = nil
			} else {
				if false {
				} else {
					h.decMapintint64((*map[int]int64)(&x.FMapIntInt64), d)
				}
			}
		case "FptrMapIntInt64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntInt64 != nil {
					x.FptrMapIntInt64 = nil
				}
			} else {
				if x.FptrMapIntInt64 == nil {
					x.FptrMapIntInt64 = new(map[int]int64)
				}

				if false {
				} else {
					h.decMapintint64((*map[int]int64)(x.FptrMapIntInt64), d)
				}
			}
		case "FMapIntFloat32":
			if r.TryDecodeAsNil() {
				x.FMapIntFloat32 = nil
			} else {
				if false {
				} else {
					h.decMapintfloat32((*map[int]float32)(&x.FMapIntFloat32), d)
				}
			}
		case "FptrMapIntFloat32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntFloat32 != nil {
					x.FptrMapIntFloat32 = nil
				}
			} else {
				if x.FptrMapIntFloat32 == nil {
					x.FptrMapIntFloat32 = new(map[int]float32)
				}

				if false {
				} else {
					h.decMapintfloat32((*map[int]float32)(x.FptrMapIntFloat32), d)
				}
			}
		case "FMapIntFloat64":
			if r.TryDecodeAsNil() {
				x.FMapIntFloat64 = nil
			} else {
				if false {
				} else {
					h.decMapintfloat64((*map[int]float64)(&x.FMapIntFloat64), d)
				}
			}
		case "FptrMapIntFloat64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntFloat64 != nil {
					x.FptrMapIntFloat64 = nil
				}
			} else {
				if x.FptrMapIntFloat64 == nil {
					x.FptrMapIntFloat64 = new(map[int]float64)
				}

				if false {
				} else {
					h.decMapintfloat64((*map[int]float64)(x.FptrMapIntFloat64), d)
				}
			}
		case "FMapIntBool":
			if r.TryDecodeAsNil() {
				x.FMapIntBool = nil
			} else {
				if false {
				} else {
					h.decMapintbool((*map[int]bool)(&x.FMapIntBool), d)
				}
			}
		case "FptrMapIntBool":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapIntBool != nil {
					x.FptrMapIntBool = nil
				}
			} else {
				if x.FptrMapIntBool == nil {
					x.FptrMapIntBool = new(map[int]bool)
				}

				if false {
				} else {
					h.decMapintbool((*map[int]bool)(x.FptrMapIntBool), d)
				}
			}
		case "FMapInt8Intf":
			if r.TryDecodeAsNil() {
				x.FMapInt8Intf = nil
			} else {
				if false {
				} else {
					h.decMapint8Interface((*map[int8]interface{})(&x.FMapInt8Intf), d)
				}
			}
		case "FptrMapInt8Intf":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt8Intf != nil {
					x.FptrMapInt8Intf = nil
				}
			} else {
				if x.FptrMapInt8Intf == nil {
					x.FptrMapInt8Intf = new(map[int8]interface{})
				}

				if false {
				} else {
					h.decMapint8Interface((*map[int8]interface{})(x.FptrMapInt8Intf), d)
				}
			}
		case "FMapInt8String":
			if r.TryDecodeAsNil() {
				x.FMapInt8String = nil
			} else {
				if false {
				} else {
					h.decMapint8string((*map[int8]string)(&x.FMapInt8String), d)
				}
			}
		case "FptrMapInt8String":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt8String != nil {
					x.FptrMapInt8String = nil
				}
			} else {
				if x.FptrMapInt8String == nil {
					x.FptrMapInt8String = new(map[int8]string)
				}

				if false {
				} else {
					h.decMapint8string((*map[int8]string)(x.FptrMapInt8String), d)
				}
			}
		case "FMapInt8Uint":
			if r.TryDecodeAsNil() {
				x.FMapInt8Uint = nil
			} else {
				if false {
				} else {
					h.decMapint8uint((*map[int8]uint)(&x.FMapInt8Uint), d)
				}
			}
		case "FptrMapInt8Uint":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt8Uint != nil {
					x.FptrMapInt8Uint = nil
				}
			} else {
				if x.FptrMapInt8Uint == nil {
					x.FptrMapInt8Uint = new(map[int8]uint)
				}

				if false {
				} else {
					h.decMapint8uint((*map[int8]uint)(x.FptrMapInt8Uint), d)
				}
			}
		case "FMapInt8Uint8":
			if r.TryDecodeAsNil() {
				x.FMapInt8Uint8 = nil
			} else {
				if false {
				} else {
					h.decMapint8uint8((*map[int8]uint8)(&x.FMapInt8Uint8), d)
				}
			}
		case "FptrMapInt8Uint8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt8Uint8 != nil {
					x.FptrMapInt8Uint8 = nil
				}
			} else {
				if x.FptrMapInt8Uint8 == nil {
					x.FptrMapInt8Uint8 = new(map[int8]uint8)
				}

				if false {
				} else {
					h.decMapint8uint8((*map[int8]uint8)(x.FptrMapInt8Uint8), d)
				}
			}
		case "FMapInt8Uint16":
			if r.TryDecodeAsNil() {
				x.FMapInt8Uint16 = nil
			} else {
				if false {
				} else {
					h.decMapint8uint16((*map[int8]uint16)(&x.FMapInt8Uint16), d)
				}
			}
		case "FptrMapInt8Uint16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt8Uint16 != nil {
					x.FptrMapInt8Uint16 = nil
				}
			} else {
				if x.FptrMapInt8Uint16 == nil {
					x.FptrMapInt8Uint16 = new(map[int8]uint16)
				}

				if false {
				} else {
					h.decMapint8uint16((*map[int8]uint16)(x.FptrMapInt8Uint16), d)
				}
			}
		case "FMapInt8Uint32":
			if r.TryDecodeAsNil() {
				x.FMapInt8Uint32 = nil
			} else {
				if false {
				} else {
					h.decMapint8uint32((*map[int8]uint32)(&x.FMapInt8Uint32), d)
				}
			}
		case "FptrMapInt8Uint32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt8Uint32 != nil {
					x.FptrMapInt8Uint32 = nil
				}
			} else {
				if x.FptrMapInt8Uint32 == nil {
					x.FptrMapInt8Uint32 = new(map[int8]uint32)
				}

				if false {
				} else {
					h.decMapint8uint32((*map[int8]uint32)(x.FptrMapInt8Uint32), d)
				}
			}
		case "FMapInt8Uint64":
			if r.TryDecodeAsNil() {
				x.FMapInt8Uint64 = nil
			} else {
				if false {
				} else {
					h.decMapint8uint64((*map[int8]uint64)(&x.FMapInt8Uint64), d)
				}
			}
		case "FptrMapInt8Uint64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt8Uint64 != nil {
					x.FptrMapInt8Uint64 = nil
				}
			} else {
				if x.FptrMapInt8Uint64 == nil {
					x.FptrMapInt8Uint64 = new(map[int8]uint64)
				}

				if false {
				} else {
					h.decMapint8uint64((*map[int8]uint64)(x.FptrMapInt8Uint64), d)
				}
			}
		case "FMapInt8Uintptr":
			if r.TryDecodeAsNil() {
				x.FMapInt8Uintptr = nil
			} else {
				if false {
				} else {
					h.decMapint8uintptr((*map[int8]uintptr)(&x.FMapInt8Uintptr), d)
				}
			}
		case "FptrMapInt8Uintptr":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt8Uintptr != nil {
					x.FptrMapInt8Uintptr = nil
				}
			} else {
				if x.FptrMapInt8Uintptr == nil {
					x.FptrMapInt8Uintptr = new(map[int8]uintptr)
				}

				if false {
				} else {
					h.decMapint8uintptr((*map[int8]uintptr)(x.FptrMapInt8Uintptr), d)
				}
			}
		case "FMapInt8Int":
			if r.TryDecodeAsNil() {
				x.FMapInt8Int = nil
			} else {
				if false {
				} else {
					h.decMapint8int((*map[int8]int)(&x.FMapInt8Int), d)
				}
			}
		case "FptrMapInt8Int":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt8Int != nil {
					x.FptrMapInt8Int = nil
				}
			} else {
				if x.FptrMapInt8Int == nil {
					x.FptrMapInt8Int = new(map[int8]int)
				}

				if false {
				} else {
					h.decMapint8int((*map[int8]int)(x.FptrMapInt8Int), d)
				}
			}
		case "FMapInt8Int8":
			if r.TryDecodeAsNil() {
				x.FMapInt8Int8 = nil
			} else {
				if false {
				} else {
					h.decMapint8int8((*map[int8]int8)(&x.FMapInt8Int8), d)
				}
			}
		case "FptrMapInt8Int8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt8Int8 != nil {
					x.FptrMapInt8Int8 = nil
				}
			} else {
				if x.FptrMapInt8Int8 == nil {
					x.FptrMapInt8Int8 = new(map[int8]int8)
				}

				if false {
				} else {
					h.decMapint8int8((*map[int8]int8)(x.FptrMapInt8Int8), d)
				}
			}
		case "FMapInt8Int16":
			if r.TryDecodeAsNil() {
				x.FMapInt8Int16 = nil
			} else {
				if false {
				} else {
					h.decMapint8int16((*map[int8]int16)(&x.FMapInt8Int16), d)
				}
			}
		case "FptrMapInt8Int16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt8Int16 != nil {
					x.FptrMapInt8Int16 = nil
				}
			} else {
				if x.FptrMapInt8Int16 == nil {
					x.FptrMapInt8Int16 = new(map[int8]int16)
				}

				if false {
				} else {
					h.decMapint8int16((*map[int8]int16)(x.FptrMapInt8Int16), d)
				}
			}
		case "FMapInt8Int32":
			if r.TryDecodeAsNil() {
				x.FMapInt8Int32 = nil
			} else {
				if false {
				} else {
					h.decMapint8int32((*map[int8]int32)(&x.FMapInt8Int32), d)
				}
			}
		case "FptrMapInt8Int32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt8Int32 != nil {
					x.FptrMapInt8Int32 = nil
				}
			} else {
				if x.FptrMapInt8Int32 == nil {
					x.FptrMapInt8Int32 = new(map[int8]int32)
				}

				if false {
				} else {
					h.decMapint8int32((*map[int8]int32)(x.FptrMapInt8Int32), d)
				}
			}
		case "FMapInt8Int64":
			if r.TryDecodeAsNil() {
				x.FMapInt8Int64 = nil
			} else {
				if false {
				} else {
					h.decMapint8int64((*map[int8]int64)(&x.FMapInt8Int64), d)
				}
			}
		case "FptrMapInt8Int64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt8Int64 != nil {
					x.FptrMapInt8Int64 = nil
				}
			} else {
				if x.FptrMapInt8Int64 == nil {
					x.FptrMapInt8Int64 = new(map[int8]int64)
				}

				if false {
				} else {
					h.decMapint8int64((*map[int8]int64)(x.FptrMapInt8Int64), d)
				}
			}
		case "FMapInt8Float32":
			if r.TryDecodeAsNil() {
				x.FMapInt8Float32 = nil
			} else {
				if false {
				} else {
					h.decMapint8float32((*map[int8]float32)(&x.FMapInt8Float32), d)
				}
			}
		case "FptrMapInt8Float32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt8Float32 != nil {
					x.FptrMapInt8Float32 = nil
				}
			} else {
				if x.FptrMapInt8Float32 == nil {
					x.FptrMapInt8Float32 = new(map[int8]float32)
				}

				if false {
				} else {
					h.decMapint8float32((*map[int8]float32)(x.FptrMapInt8Float32), d)
				}
			}
		case "FMapInt8Float64":
			if r.TryDecodeAsNil() {
				x.FMapInt8Float64 = nil
			} else {
				if false {
				} else {
					h.decMapint8float64((*map[int8]float64)(&x.FMapInt8Float64), d)
				}
			}
		case "FptrMapInt8Float64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt8Float64 != nil {
					x.FptrMapInt8Float64 = nil
				}
			} else {
				if x.FptrMapInt8Float64 == nil {
					x.FptrMapInt8Float64 = new(map[int8]float64)
				}

				if false {
				} else {
					h.decMapint8float64((*map[int8]float64)(x.FptrMapInt8Float64), d)
				}
			}
		case "FMapInt8Bool":
			if r.TryDecodeAsNil() {
				x.FMapInt8Bool = nil
			} else {
				if false {
				} else {
					h.decMapint8bool((*map[int8]bool)(&x.FMapInt8Bool), d)
				}
			}
		case "FptrMapInt8Bool":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt8Bool != nil {
					x.FptrMapInt8Bool = nil
				}
			} else {
				if x.FptrMapInt8Bool == nil {
					x.FptrMapInt8Bool = new(map[int8]bool)
				}

				if false {
				} else {
					h.decMapint8bool((*map[int8]bool)(x.FptrMapInt8Bool), d)
				}
			}
		case "FMapInt16Intf":
			if r.TryDecodeAsNil() {
				x.FMapInt16Intf = nil
			} else {
				if false {
				} else {
					h.decMapint16Interface((*map[int16]interface{})(&x.FMapInt16Intf), d)
				}
			}
		case "FptrMapInt16Intf":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt16Intf != nil {
					x.FptrMapInt16Intf = nil
				}
			} else {
				if x.FptrMapInt16Intf == nil {
					x.FptrMapInt16Intf = new(map[int16]interface{})
				}

				if false {
				} else {
					h.decMapint16Interface((*map[int16]interface{})(x.FptrMapInt16Intf), d)
				}
			}
		case "FMapInt16String":
			if r.TryDecodeAsNil() {
				x.FMapInt16String = nil
			} else {
				if false {
				} else {
					h.decMapint16string((*map[int16]string)(&x.FMapInt16String), d)
				}
			}
		case "FptrMapInt16String":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt16String != nil {
					x.FptrMapInt16String = nil
				}
			} else {
				if x.FptrMapInt16String == nil {
					x.FptrMapInt16String = new(map[int16]string)
				}

				if false {
				} else {
					h.decMapint16string((*map[int16]string)(x.FptrMapInt16String), d)
				}
			}
		case "FMapInt16Uint":
			if r.TryDecodeAsNil() {
				x.FMapInt16Uint = nil
			} else {
				if false {
				} else {
					h.decMapint16uint((*map[int16]uint)(&x.FMapInt16Uint), d)
				}
			}
		case "FptrMapInt16Uint":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt16Uint != nil {
					x.FptrMapInt16Uint = nil
				}
			} else {
				if x.FptrMapInt16Uint == nil {
					x.FptrMapInt16Uint = new(map[int16]uint)
				}

				if false {
				} else {
					h.decMapint16uint((*map[int16]uint)(x.FptrMapInt16Uint), d)
				}
			}
		case "FMapInt16Uint8":
			if r.TryDecodeAsNil() {
				x.FMapInt16Uint8 = nil
			} else {
				if false {
				} else {
					h.decMapint16uint8((*map[int16]uint8)(&x.FMapInt16Uint8), d)
				}
			}
		case "FptrMapInt16Uint8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt16Uint8 != nil {
					x.FptrMapInt16Uint8 = nil
				}
			} else {
				if x.FptrMapInt16Uint8 == nil {
					x.FptrMapInt16Uint8 = new(map[int16]uint8)
				}

				if false {
				} else {
					h.decMapint16uint8((*map[int16]uint8)(x.FptrMapInt16Uint8), d)
				}
			}
		case "FMapInt16Uint16":
			if r.TryDecodeAsNil() {
				x.FMapInt16Uint16 = nil
			} else {
				if false {
				} else {
					h.decMapint16uint16((*map[int16]uint16)(&x.FMapInt16Uint16), d)
				}
			}
		case "FptrMapInt16Uint16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt16Uint16 != nil {
					x.FptrMapInt16Uint16 = nil
				}
			} else {
				if x.FptrMapInt16Uint16 == nil {
					x.FptrMapInt16Uint16 = new(map[int16]uint16)
				}

				if false {
				} else {
					h.decMapint16uint16((*map[int16]uint16)(x.FptrMapInt16Uint16), d)
				}
			}
		case "FMapInt16Uint32":
			if r.TryDecodeAsNil() {
				x.FMapInt16Uint32 = nil
			} else {
				if false {
				} else {
					h.decMapint16uint32((*map[int16]uint32)(&x.FMapInt16Uint32), d)
				}
			}
		case "FptrMapInt16Uint32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt16Uint32 != nil {
					x.FptrMapInt16Uint32 = nil
				}
			} else {
				if x.FptrMapInt16Uint32 == nil {
					x.FptrMapInt16Uint32 = new(map[int16]uint32)
				}

				if false {
				} else {
					h.decMapint16uint32((*map[int16]uint32)(x.FptrMapInt16Uint32), d)
				}
			}
		case "FMapInt16Uint64":
			if r.TryDecodeAsNil() {
				x.FMapInt16Uint64 = nil
			} else {
				if false {
				} else {
					h.decMapint16uint64((*map[int16]uint64)(&x.FMapInt16Uint64), d)
				}
			}
		case "FptrMapInt16Uint64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt16Uint64 != nil {
					x.FptrMapInt16Uint64 = nil
				}
			} else {
				if x.FptrMapInt16Uint64 == nil {
					x.FptrMapInt16Uint64 = new(map[int16]uint64)
				}

				if false {
				} else {
					h.decMapint16uint64((*map[int16]uint64)(x.FptrMapInt16Uint64), d)
				}
			}
		case "FMapInt16Uintptr":
			if r.TryDecodeAsNil() {
				x.FMapInt16Uintptr = nil
			} else {
				if false {
				} else {
					h.decMapint16uintptr((*map[int16]uintptr)(&x.FMapInt16Uintptr), d)
				}
			}
		case "FptrMapInt16Uintptr":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt16Uintptr != nil {
					x.FptrMapInt16Uintptr = nil
				}
			} else {
				if x.FptrMapInt16Uintptr == nil {
					x.FptrMapInt16Uintptr = new(map[int16]uintptr)
				}

				if false {
				} else {
					h.decMapint16uintptr((*map[int16]uintptr)(x.FptrMapInt16Uintptr), d)
				}
			}
		case "FMapInt16Int":
			if r.TryDecodeAsNil() {
				x.FMapInt16Int = nil
			} else {
				if false {
				} else {
					h.decMapint16int((*map[int16]int)(&x.FMapInt16Int), d)
				}
			}
		case "FptrMapInt16Int":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt16Int != nil {
					x.FptrMapInt16Int = nil
				}
			} else {
				if x.FptrMapInt16Int == nil {
					x.FptrMapInt16Int = new(map[int16]int)
				}

				if false {
				} else {
					h.decMapint16int((*map[int16]int)(x.FptrMapInt16Int), d)
				}
			}
		case "FMapInt16Int8":
			if r.TryDecodeAsNil() {
				x.FMapInt16Int8 = nil
			} else {
				if false {
				} else {
					h.decMapint16int8((*map[int16]int8)(&x.FMapInt16Int8), d)
				}
			}
		case "FptrMapInt16Int8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt16Int8 != nil {
					x.FptrMapInt16Int8 = nil
				}
			} else {
				if x.FptrMapInt16Int8 == nil {
					x.FptrMapInt16Int8 = new(map[int16]int8)
				}

				if false {
				} else {
					h.decMapint16int8((*map[int16]int8)(x.FptrMapInt16Int8), d)
				}
			}
		case "FMapInt16Int16":
			if r.TryDecodeAsNil() {
				x.FMapInt16Int16 = nil
			} else {
				if false {
				} else {
					h.decMapint16int16((*map[int16]int16)(&x.FMapInt16Int16), d)
				}
			}
		case "FptrMapInt16Int16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt16Int16 != nil {
					x.FptrMapInt16Int16 = nil
				}
			} else {
				if x.FptrMapInt16Int16 == nil {
					x.FptrMapInt16Int16 = new(map[int16]int16)
				}

				if false {
				} else {
					h.decMapint16int16((*map[int16]int16)(x.FptrMapInt16Int16), d)
				}
			}
		case "FMapInt16Int32":
			if r.TryDecodeAsNil() {
				x.FMapInt16Int32 = nil
			} else {
				if false {
				} else {
					h.decMapint16int32((*map[int16]int32)(&x.FMapInt16Int32), d)
				}
			}
		case "FptrMapInt16Int32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt16Int32 != nil {
					x.FptrMapInt16Int32 = nil
				}
			} else {
				if x.FptrMapInt16Int32 == nil {
					x.FptrMapInt16Int32 = new(map[int16]int32)
				}

				if false {
				} else {
					h.decMapint16int32((*map[int16]int32)(x.FptrMapInt16Int32), d)
				}
			}
		case "FMapInt16Int64":
			if r.TryDecodeAsNil() {
				x.FMapInt16Int64 = nil
			} else {
				if false {
				} else {
					h.decMapint16int64((*map[int16]int64)(&x.FMapInt16Int64), d)
				}
			}
		case "FptrMapInt16Int64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt16Int64 != nil {
					x.FptrMapInt16Int64 = nil
				}
			} else {
				if x.FptrMapInt16Int64 == nil {
					x.FptrMapInt16Int64 = new(map[int16]int64)
				}

				if false {
				} else {
					h.decMapint16int64((*map[int16]int64)(x.FptrMapInt16Int64), d)
				}
			}
		case "FMapInt16Float32":
			if r.TryDecodeAsNil() {
				x.FMapInt16Float32 = nil
			} else {
				if false {
				} else {
					h.decMapint16float32((*map[int16]float32)(&x.FMapInt16Float32), d)
				}
			}
		case "FptrMapInt16Float32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt16Float32 != nil {
					x.FptrMapInt16Float32 = nil
				}
			} else {
				if x.FptrMapInt16Float32 == nil {
					x.FptrMapInt16Float32 = new(map[int16]float32)
				}

				if false {
				} else {
					h.decMapint16float32((*map[int16]float32)(x.FptrMapInt16Float32), d)
				}
			}
		case "FMapInt16Float64":
			if r.TryDecodeAsNil() {
				x.FMapInt16Float64 = nil
			} else {
				if false {
				} else {
					h.decMapint16float64((*map[int16]float64)(&x.FMapInt16Float64), d)
				}
			}
		case "FptrMapInt16Float64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt16Float64 != nil {
					x.FptrMapInt16Float64 = nil
				}
			} else {
				if x.FptrMapInt16Float64 == nil {
					x.FptrMapInt16Float64 = new(map[int16]float64)
				}

				if false {
				} else {
					h.decMapint16float64((*map[int16]float64)(x.FptrMapInt16Float64), d)
				}
			}
		case "FMapInt16Bool":
			if r.TryDecodeAsNil() {
				x.FMapInt16Bool = nil
			} else {
				if false {
				} else {
					h.decMapint16bool((*map[int16]bool)(&x.FMapInt16Bool), d)
				}
			}
		case "FptrMapInt16Bool":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt16Bool != nil {
					x.FptrMapInt16Bool = nil
				}
			} else {
				if x.FptrMapInt16Bool == nil {
					x.FptrMapInt16Bool = new(map[int16]bool)
				}

				if false {
				} else {
					h.decMapint16bool((*map[int16]bool)(x.FptrMapInt16Bool), d)
				}
			}
		case "FMapInt32Intf":
			if r.TryDecodeAsNil() {
				x.FMapInt32Intf = nil
			} else {
				if false {
				} else {
					h.decMapint32Interface((*map[int32]interface{})(&x.FMapInt32Intf), d)
				}
			}
		case "FptrMapInt32Intf":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt32Intf != nil {
					x.FptrMapInt32Intf = nil
				}
			} else {
				if x.FptrMapInt32Intf == nil {
					x.FptrMapInt32Intf = new(map[int32]interface{})
				}

				if false {
				} else {
					h.decMapint32Interface((*map[int32]interface{})(x.FptrMapInt32Intf), d)
				}
			}
		case "FMapInt32String":
			if r.TryDecodeAsNil() {
				x.FMapInt32String = nil
			} else {
				if false {
				} else {
					h.decMapint32string((*map[int32]string)(&x.FMapInt32String), d)
				}
			}
		case "FptrMapInt32String":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt32String != nil {
					x.FptrMapInt32String = nil
				}
			} else {
				if x.FptrMapInt32String == nil {
					x.FptrMapInt32String = new(map[int32]string)
				}

				if false {
				} else {
					h.decMapint32string((*map[int32]string)(x.FptrMapInt32String), d)
				}
			}
		case "FMapInt32Uint":
			if r.TryDecodeAsNil() {
				x.FMapInt32Uint = nil
			} else {
				if false {
				} else {
					h.decMapint32uint((*map[int32]uint)(&x.FMapInt32Uint), d)
				}
			}
		case "FptrMapInt32Uint":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt32Uint != nil {
					x.FptrMapInt32Uint = nil
				}
			} else {
				if x.FptrMapInt32Uint == nil {
					x.FptrMapInt32Uint = new(map[int32]uint)
				}

				if false {
				} else {
					h.decMapint32uint((*map[int32]uint)(x.FptrMapInt32Uint), d)
				}
			}
		case "FMapInt32Uint8":
			if r.TryDecodeAsNil() {
				x.FMapInt32Uint8 = nil
			} else {
				if false {
				} else {
					h.decMapint32uint8((*map[int32]uint8)(&x.FMapInt32Uint8), d)
				}
			}
		case "FptrMapInt32Uint8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt32Uint8 != nil {
					x.FptrMapInt32Uint8 = nil
				}
			} else {
				if x.FptrMapInt32Uint8 == nil {
					x.FptrMapInt32Uint8 = new(map[int32]uint8)
				}

				if false {
				} else {
					h.decMapint32uint8((*map[int32]uint8)(x.FptrMapInt32Uint8), d)
				}
			}
		case "FMapInt32Uint16":
			if r.TryDecodeAsNil() {
				x.FMapInt32Uint16 = nil
			} else {
				if false {
				} else {
					h.decMapint32uint16((*map[int32]uint16)(&x.FMapInt32Uint16), d)
				}
			}
		case "FptrMapInt32Uint16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt32Uint16 != nil {
					x.FptrMapInt32Uint16 = nil
				}
			} else {
				if x.FptrMapInt32Uint16 == nil {
					x.FptrMapInt32Uint16 = new(map[int32]uint16)
				}

				if false {
				} else {
					h.decMapint32uint16((*map[int32]uint16)(x.FptrMapInt32Uint16), d)
				}
			}
		case "FMapInt32Uint32":
			if r.TryDecodeAsNil() {
				x.FMapInt32Uint32 = nil
			} else {
				if false {
				} else {
					h.decMapint32uint32((*map[int32]uint32)(&x.FMapInt32Uint32), d)
				}
			}
		case "FptrMapInt32Uint32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt32Uint32 != nil {
					x.FptrMapInt32Uint32 = nil
				}
			} else {
				if x.FptrMapInt32Uint32 == nil {
					x.FptrMapInt32Uint32 = new(map[int32]uint32)
				}

				if false {
				} else {
					h.decMapint32uint32((*map[int32]uint32)(x.FptrMapInt32Uint32), d)
				}
			}
		case "FMapInt32Uint64":
			if r.TryDecodeAsNil() {
				x.FMapInt32Uint64 = nil
			} else {
				if false {
				} else {
					h.decMapint32uint64((*map[int32]uint64)(&x.FMapInt32Uint64), d)
				}
			}
		case "FptrMapInt32Uint64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt32Uint64 != nil {
					x.FptrMapInt32Uint64 = nil
				}
			} else {
				if x.FptrMapInt32Uint64 == nil {
					x.FptrMapInt32Uint64 = new(map[int32]uint64)
				}

				if false {
				} else {
					h.decMapint32uint64((*map[int32]uint64)(x.FptrMapInt32Uint64), d)
				}
			}
		case "FMapInt32Uintptr":
			if r.TryDecodeAsNil() {
				x.FMapInt32Uintptr = nil
			} else {
				if false {
				} else {
					h.decMapint32uintptr((*map[int32]uintptr)(&x.FMapInt32Uintptr), d)
				}
			}
		case "FptrMapInt32Uintptr":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt32Uintptr != nil {
					x.FptrMapInt32Uintptr = nil
				}
			} else {
				if x.FptrMapInt32Uintptr == nil {
					x.FptrMapInt32Uintptr = new(map[int32]uintptr)
				}

				if false {
				} else {
					h.decMapint32uintptr((*map[int32]uintptr)(x.FptrMapInt32Uintptr), d)
				}
			}
		case "FMapInt32Int":
			if r.TryDecodeAsNil() {
				x.FMapInt32Int = nil
			} else {
				if false {
				} else {
					h.decMapint32int((*map[int32]int)(&x.FMapInt32Int), d)
				}
			}
		case "FptrMapInt32Int":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt32Int != nil {
					x.FptrMapInt32Int = nil
				}
			} else {
				if x.FptrMapInt32Int == nil {
					x.FptrMapInt32Int = new(map[int32]int)
				}

				if false {
				} else {
					h.decMapint32int((*map[int32]int)(x.FptrMapInt32Int), d)
				}
			}
		case "FMapInt32Int8":
			if r.TryDecodeAsNil() {
				x.FMapInt32Int8 = nil
			} else {
				if false {
				} else {
					h.decMapint32int8((*map[int32]int8)(&x.FMapInt32Int8), d)
				}
			}
		case "FptrMapInt32Int8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt32Int8 != nil {
					x.FptrMapInt32Int8 = nil
				}
			} else {
				if x.FptrMapInt32Int8 == nil {
					x.FptrMapInt32Int8 = new(map[int32]int8)
				}

				if false {
				} else {
					h.decMapint32int8((*map[int32]int8)(x.FptrMapInt32Int8), d)
				}
			}
		case "FMapInt32Int16":
			if r.TryDecodeAsNil() {
				x.FMapInt32Int16 = nil
			} else {
				if false {
				} else {
					h.decMapint32int16((*map[int32]int16)(&x.FMapInt32Int16), d)
				}
			}
		case "FptrMapInt32Int16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt32Int16 != nil {
					x.FptrMapInt32Int16 = nil
				}
			} else {
				if x.FptrMapInt32Int16 == nil {
					x.FptrMapInt32Int16 = new(map[int32]int16)
				}

				if false {
				} else {
					h.decMapint32int16((*map[int32]int16)(x.FptrMapInt32Int16), d)
				}
			}
		case "FMapInt32Int32":
			if r.TryDecodeAsNil() {
				x.FMapInt32Int32 = nil
			} else {
				if false {
				} else {
					h.decMapint32int32((*map[int32]int32)(&x.FMapInt32Int32), d)
				}
			}
		case "FptrMapInt32Int32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt32Int32 != nil {
					x.FptrMapInt32Int32 = nil
				}
			} else {
				if x.FptrMapInt32Int32 == nil {
					x.FptrMapInt32Int32 = new(map[int32]int32)
				}

				if false {
				} else {
					h.decMapint32int32((*map[int32]int32)(x.FptrMapInt32Int32), d)
				}
			}
		case "FMapInt32Int64":
			if r.TryDecodeAsNil() {
				x.FMapInt32Int64 = nil
			} else {
				if false {
				} else {
					h.decMapint32int64((*map[int32]int64)(&x.FMapInt32Int64), d)
				}
			}
		case "FptrMapInt32Int64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt32Int64 != nil {
					x.FptrMapInt32Int64 = nil
				}
			} else {
				if x.FptrMapInt32Int64 == nil {
					x.FptrMapInt32Int64 = new(map[int32]int64)
				}

				if false {
				} else {
					h.decMapint32int64((*map[int32]int64)(x.FptrMapInt32Int64), d)
				}
			}
		case "FMapInt32Float32":
			if r.TryDecodeAsNil() {
				x.FMapInt32Float32 = nil
			} else {
				if false {
				} else {
					h.decMapint32float32((*map[int32]float32)(&x.FMapInt32Float32), d)
				}
			}
		case "FptrMapInt32Float32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt32Float32 != nil {
					x.FptrMapInt32Float32 = nil
				}
			} else {
				if x.FptrMapInt32Float32 == nil {
					x.FptrMapInt32Float32 = new(map[int32]float32)
				}

				if false {
				} else {
					h.decMapint32float32((*map[int32]float32)(x.FptrMapInt32Float32), d)
				}
			}
		case "FMapInt32Float64":
			if r.TryDecodeAsNil() {
				x.FMapInt32Float64 = nil
			} else {
				if false {
				} else {
					h.decMapint32float64((*map[int32]float64)(&x.FMapInt32Float64), d)
				}
			}
		case "FptrMapInt32Float64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt32Float64 != nil {
					x.FptrMapInt32Float64 = nil
				}
			} else {
				if x.FptrMapInt32Float64 == nil {
					x.FptrMapInt32Float64 = new(map[int32]float64)
				}

				if false {
				} else {
					h.decMapint32float64((*map[int32]float64)(x.FptrMapInt32Float64), d)
				}
			}
		case "FMapInt32Bool":
			if r.TryDecodeAsNil() {
				x.FMapInt32Bool = nil
			} else {
				if false {
				} else {
					h.decMapint32bool((*map[int32]bool)(&x.FMapInt32Bool), d)
				}
			}
		case "FptrMapInt32Bool":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt32Bool != nil {
					x.FptrMapInt32Bool = nil
				}
			} else {
				if x.FptrMapInt32Bool == nil {
					x.FptrMapInt32Bool = new(map[int32]bool)
				}

				if false {
				} else {
					h.decMapint32bool((*map[int32]bool)(x.FptrMapInt32Bool), d)
				}
			}
		case "FMapInt64Intf":
			if r.TryDecodeAsNil() {
				x.FMapInt64Intf = nil
			} else {
				if false {
				} else {
					h.decMapint64Interface((*map[int64]interface{})(&x.FMapInt64Intf), d)
				}
			}
		case "FptrMapInt64Intf":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt64Intf != nil {
					x.FptrMapInt64Intf = nil
				}
			} else {
				if x.FptrMapInt64Intf == nil {
					x.FptrMapInt64Intf = new(map[int64]interface{})
				}

				if false {
				} else {
					h.decMapint64Interface((*map[int64]interface{})(x.FptrMapInt64Intf), d)
				}
			}
		case "FMapInt64String":
			if r.TryDecodeAsNil() {
				x.FMapInt64String = nil
			} else {
				if false {
				} else {
					h.decMapint64string((*map[int64]string)(&x.FMapInt64String), d)
				}
			}
		case "FptrMapInt64String":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt64String != nil {
					x.FptrMapInt64String = nil
				}
			} else {
				if x.FptrMapInt64String == nil {
					x.FptrMapInt64String = new(map[int64]string)
				}

				if false {
				} else {
					h.decMapint64string((*map[int64]string)(x.FptrMapInt64String), d)
				}
			}
		case "FMapInt64Uint":
			if r.TryDecodeAsNil() {
				x.FMapInt64Uint = nil
			} else {
				if false {
				} else {
					h.decMapint64uint((*map[int64]uint)(&x.FMapInt64Uint), d)
				}
			}
		case "FptrMapInt64Uint":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt64Uint != nil {
					x.FptrMapInt64Uint = nil
				}
			} else {
				if x.FptrMapInt64Uint == nil {
					x.FptrMapInt64Uint = new(map[int64]uint)
				}

				if false {
				} else {
					h.decMapint64uint((*map[int64]uint)(x.FptrMapInt64Uint), d)
				}
			}
		case "FMapInt64Uint8":
			if r.TryDecodeAsNil() {
				x.FMapInt64Uint8 = nil
			} else {
				if false {
				} else {
					h.decMapint64uint8((*map[int64]uint8)(&x.FMapInt64Uint8), d)
				}
			}
		case "FptrMapInt64Uint8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt64Uint8 != nil {
					x.FptrMapInt64Uint8 = nil
				}
			} else {
				if x.FptrMapInt64Uint8 == nil {
					x.FptrMapInt64Uint8 = new(map[int64]uint8)
				}

				if false {
				} else {
					h.decMapint64uint8((*map[int64]uint8)(x.FptrMapInt64Uint8), d)
				}
			}
		case "FMapInt64Uint16":
			if r.TryDecodeAsNil() {
				x.FMapInt64Uint16 = nil
			} else {
				if false {
				} else {
					h.decMapint64uint16((*map[int64]uint16)(&x.FMapInt64Uint16), d)
				}
			}
		case "FptrMapInt64Uint16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt64Uint16 != nil {
					x.FptrMapInt64Uint16 = nil
				}
			} else {
				if x.FptrMapInt64Uint16 == nil {
					x.FptrMapInt64Uint16 = new(map[int64]uint16)
				}

				if false {
				} else {
					h.decMapint64uint16((*map[int64]uint16)(x.FptrMapInt64Uint16), d)
				}
			}
		case "FMapInt64Uint32":
			if r.TryDecodeAsNil() {
				x.FMapInt64Uint32 = nil
			} else {
				if false {
				} else {
					h.decMapint64uint32((*map[int64]uint32)(&x.FMapInt64Uint32), d)
				}
			}
		case "FptrMapInt64Uint32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt64Uint32 != nil {
					x.FptrMapInt64Uint32 = nil
				}
			} else {
				if x.FptrMapInt64Uint32 == nil {
					x.FptrMapInt64Uint32 = new(map[int64]uint32)
				}

				if false {
				} else {
					h.decMapint64uint32((*map[int64]uint32)(x.FptrMapInt64Uint32), d)
				}
			}
		case "FMapInt64Uint64":
			if r.TryDecodeAsNil() {
				x.FMapInt64Uint64 = nil
			} else {
				if false {
				} else {
					h.decMapint64uint64((*map[int64]uint64)(&x.FMapInt64Uint64), d)
				}
			}
		case "FptrMapInt64Uint64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt64Uint64 != nil {
					x.FptrMapInt64Uint64 = nil
				}
			} else {
				if x.FptrMapInt64Uint64 == nil {
					x.FptrMapInt64Uint64 = new(map[int64]uint64)
				}

				if false {
				} else {
					h.decMapint64uint64((*map[int64]uint64)(x.FptrMapInt64Uint64), d)
				}
			}
		case "FMapInt64Uintptr":
			if r.TryDecodeAsNil() {
				x.FMapInt64Uintptr = nil
			} else {
				if false {
				} else {
					h.decMapint64uintptr((*map[int64]uintptr)(&x.FMapInt64Uintptr), d)
				}
			}
		case "FptrMapInt64Uintptr":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt64Uintptr != nil {
					x.FptrMapInt64Uintptr = nil
				}
			} else {
				if x.FptrMapInt64Uintptr == nil {
					x.FptrMapInt64Uintptr = new(map[int64]uintptr)
				}

				if false {
				} else {
					h.decMapint64uintptr((*map[int64]uintptr)(x.FptrMapInt64Uintptr), d)
				}
			}
		case "FMapInt64Int":
			if r.TryDecodeAsNil() {
				x.FMapInt64Int = nil
			} else {
				if false {
				} else {
					h.decMapint64int((*map[int64]int)(&x.FMapInt64Int), d)
				}
			}
		case "FptrMapInt64Int":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt64Int != nil {
					x.FptrMapInt64Int = nil
				}
			} else {
				if x.FptrMapInt64Int == nil {
					x.FptrMapInt64Int = new(map[int64]int)
				}

				if false {
				} else {
					h.decMapint64int((*map[int64]int)(x.FptrMapInt64Int), d)
				}
			}
		case "FMapInt64Int8":
			if r.TryDecodeAsNil() {
				x.FMapInt64Int8 = nil
			} else {
				if false {
				} else {
					h.decMapint64int8((*map[int64]int8)(&x.FMapInt64Int8), d)
				}
			}
		case "FptrMapInt64Int8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt64Int8 != nil {
					x.FptrMapInt64Int8 = nil
				}
			} else {
				if x.FptrMapInt64Int8 == nil {
					x.FptrMapInt64Int8 = new(map[int64]int8)
				}

				if false {
				} else {
					h.decMapint64int8((*map[int64]int8)(x.FptrMapInt64Int8), d)
				}
			}
		case "FMapInt64Int16":
			if r.TryDecodeAsNil() {
				x.FMapInt64Int16 = nil
			} else {
				if false {
				} else {
					h.decMapint64int16((*map[int64]int16)(&x.FMapInt64Int16), d)
				}
			}
		case "FptrMapInt64Int16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt64Int16 != nil {
					x.FptrMapInt64Int16 = nil
				}
			} else {
				if x.FptrMapInt64Int16 == nil {
					x.FptrMapInt64Int16 = new(map[int64]int16)
				}

				if false {
				} else {
					h.decMapint64int16((*map[int64]int16)(x.FptrMapInt64Int16), d)
				}
			}
		case "FMapInt64Int32":
			if r.TryDecodeAsNil() {
				x.FMapInt64Int32 = nil
			} else {
				if false {
				} else {
					h.decMapint64int32((*map[int64]int32)(&x.FMapInt64Int32), d)
				}
			}
		case "FptrMapInt64Int32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt64Int32 != nil {
					x.FptrMapInt64Int32 = nil
				}
			} else {
				if x.FptrMapInt64Int32 == nil {
					x.FptrMapInt64Int32 = new(map[int64]int32)
				}

				if false {
				} else {
					h.decMapint64int32((*map[int64]int32)(x.FptrMapInt64Int32), d)
				}
			}
		case "FMapInt64Int64":
			if r.TryDecodeAsNil() {
				x.FMapInt64Int64 = nil
			} else {
				if false {
				} else {
					h.decMapint64int64((*map[int64]int64)(&x.FMapInt64Int64), d)
				}
			}
		case "FptrMapInt64Int64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt64Int64 != nil {
					x.FptrMapInt64Int64 = nil
				}
			} else {
				if x.FptrMapInt64Int64 == nil {
					x.FptrMapInt64Int64 = new(map[int64]int64)
				}

				if false {
				} else {
					h.decMapint64int64((*map[int64]int64)(x.FptrMapInt64Int64), d)
				}
			}
		case "FMapInt64Float32":
			if r.TryDecodeAsNil() {
				x.FMapInt64Float32 = nil
			} else {
				if false {
				} else {
					h.decMapint64float32((*map[int64]float32)(&x.FMapInt64Float32), d)
				}
			}
		case "FptrMapInt64Float32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt64Float32 != nil {
					x.FptrMapInt64Float32 = nil
				}
			} else {
				if x.FptrMapInt64Float32 == nil {
					x.FptrMapInt64Float32 = new(map[int64]float32)
				}

				if false {
				} else {
					h.decMapint64float32((*map[int64]float32)(x.FptrMapInt64Float32), d)
				}
			}
		case "FMapInt64Float64":
			if r.TryDecodeAsNil() {
				x.FMapInt64Float64 = nil
			} else {
				if false {
				} else {
					h.decMapint64float64((*map[int64]float64)(&x.FMapInt64Float64), d)
				}
			}
		case "FptrMapInt64Float64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt64Float64 != nil {
					x.FptrMapInt64Float64 = nil
				}
			} else {
				if x.FptrMapInt64Float64 == nil {
					x.FptrMapInt64Float64 = new(map[int64]float64)
				}

				if false {
				} else {
					h.decMapint64float64((*map[int64]float64)(x.FptrMapInt64Float64), d)
				}
			}
		case "FMapInt64Bool":
			if r.TryDecodeAsNil() {
				x.FMapInt64Bool = nil
			} else {
				if false {
				} else {
					h.decMapint64bool((*map[int64]bool)(&x.FMapInt64Bool), d)
				}
			}
		case "FptrMapInt64Bool":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapInt64Bool != nil {
					x.FptrMapInt64Bool = nil
				}
			} else {
				if x.FptrMapInt64Bool == nil {
					x.FptrMapInt64Bool = new(map[int64]bool)
				}

				if false {
				} else {
					h.decMapint64bool((*map[int64]bool)(x.FptrMapInt64Bool), d)
				}
			}
		case "FMapBoolIntf":
			if r.TryDecodeAsNil() {
				x.FMapBoolIntf = nil
			} else {
				if false {
				} else {
					h.decMapboolInterface((*map[bool]interface{})(&x.FMapBoolIntf), d)
				}
			}
		case "FptrMapBoolIntf":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapBoolIntf != nil {
					x.FptrMapBoolIntf = nil
				}
			} else {
				if x.FptrMapBoolIntf == nil {
					x.FptrMapBoolIntf = new(map[bool]interface{})
				}

				if false {
				} else {
					h.decMapboolInterface((*map[bool]interface{})(x.FptrMapBoolIntf), d)
				}
			}
		case "FMapBoolString":
			if r.TryDecodeAsNil() {
				x.FMapBoolString = nil
			} else {
				if false {
				} else {
					h.decMapboolstring((*map[bool]string)(&x.FMapBoolString), d)
				}
			}
		case "FptrMapBoolString":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapBoolString != nil {
					x.FptrMapBoolString = nil
				}
			} else {
				if x.FptrMapBoolString == nil {
					x.FptrMapBoolString = new(map[bool]string)
				}

				if false {
				} else {
					h.decMapboolstring((*map[bool]string)(x.FptrMapBoolString), d)
				}
			}
		case "FMapBoolUint":
			if r.TryDecodeAsNil() {
				x.FMapBoolUint = nil
			} else {
				if false {
				} else {
					h.decMapbooluint((*map[bool]uint)(&x.FMapBoolUint), d)
				}
			}
		case "FptrMapBoolUint":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapBoolUint != nil {
					x.FptrMapBoolUint = nil
				}
			} else {
				if x.FptrMapBoolUint == nil {
					x.FptrMapBoolUint = new(map[bool]uint)
				}

				if false {
				} else {
					h.decMapbooluint((*map[bool]uint)(x.FptrMapBoolUint), d)
				}
			}
		case "FMapBoolUint8":
			if r.TryDecodeAsNil() {
				x.FMapBoolUint8 = nil
			} else {
				if false {
				} else {
					h.decMapbooluint8((*map[bool]uint8)(&x.FMapBoolUint8), d)
				}
			}
		case "FptrMapBoolUint8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapBoolUint8 != nil {
					x.FptrMapBoolUint8 = nil
				}
			} else {
				if x.FptrMapBoolUint8 == nil {
					x.FptrMapBoolUint8 = new(map[bool]uint8)
				}

				if false {
				} else {
					h.decMapbooluint8((*map[bool]uint8)(x.FptrMapBoolUint8), d)
				}
			}
		case "FMapBoolUint16":
			if r.TryDecodeAsNil() {
				x.FMapBoolUint16 = nil
			} else {
				if false {
				} else {
					h.decMapbooluint16((*map[bool]uint16)(&x.FMapBoolUint16), d)
				}
			}
		case "FptrMapBoolUint16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapBoolUint16 != nil {
					x.FptrMapBoolUint16 = nil
				}
			} else {
				if x.FptrMapBoolUint16 == nil {
					x.FptrMapBoolUint16 = new(map[bool]uint16)
				}

				if false {
				} else {
					h.decMapbooluint16((*map[bool]uint16)(x.FptrMapBoolUint16), d)
				}
			}
		case "FMapBoolUint32":
			if r.TryDecodeAsNil() {
				x.FMapBoolUint32 = nil
			} else {
				if false {
				} else {
					h.decMapbooluint32((*map[bool]uint32)(&x.FMapBoolUint32), d)
				}
			}
		case "FptrMapBoolUint32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapBoolUint32 != nil {
					x.FptrMapBoolUint32 = nil
				}
			} else {
				if x.FptrMapBoolUint32 == nil {
					x.FptrMapBoolUint32 = new(map[bool]uint32)
				}

				if false {
				} else {
					h.decMapbooluint32((*map[bool]uint32)(x.FptrMapBoolUint32), d)
				}
			}
		case "FMapBoolUint64":
			if r.TryDecodeAsNil() {
				x.FMapBoolUint64 = nil
			} else {
				if false {
				} else {
					h.decMapbooluint64((*map[bool]uint64)(&x.FMapBoolUint64), d)
				}
			}
		case "FptrMapBoolUint64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapBoolUint64 != nil {
					x.FptrMapBoolUint64 = nil
				}
			} else {
				if x.FptrMapBoolUint64 == nil {
					x.FptrMapBoolUint64 = new(map[bool]uint64)
				}

				if false {
				} else {
					h.decMapbooluint64((*map[bool]uint64)(x.FptrMapBoolUint64), d)
				}
			}
		case "FMapBoolUintptr":
			if r.TryDecodeAsNil() {
				x.FMapBoolUintptr = nil
			} else {
				if false {
				} else {
					h.decMapbooluintptr((*map[bool]uintptr)(&x.FMapBoolUintptr), d)
				}
			}
		case "FptrMapBoolUintptr":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapBoolUintptr != nil {
					x.FptrMapBoolUintptr = nil
				}
			} else {
				if x.FptrMapBoolUintptr == nil {
					x.FptrMapBoolUintptr = new(map[bool]uintptr)
				}

				if false {
				} else {
					h.decMapbooluintptr((*map[bool]uintptr)(x.FptrMapBoolUintptr), d)
				}
			}
		case "FMapBoolInt":
			if r.TryDecodeAsNil() {
				x.FMapBoolInt = nil
			} else {
				if false {
				} else {
					h.decMapboolint((*map[bool]int)(&x.FMapBoolInt), d)
				}
			}
		case "FptrMapBoolInt":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapBoolInt != nil {
					x.FptrMapBoolInt = nil
				}
			} else {
				if x.FptrMapBoolInt == nil {
					x.FptrMapBoolInt = new(map[bool]int)
				}

				if false {
				} else {
					h.decMapboolint((*map[bool]int)(x.FptrMapBoolInt), d)
				}
			}
		case "FMapBoolInt8":
			if r.TryDecodeAsNil() {
				x.FMapBoolInt8 = nil
			} else {
				if false {
				} else {
					h.decMapboolint8((*map[bool]int8)(&x.FMapBoolInt8), d)
				}
			}
		case "FptrMapBoolInt8":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapBoolInt8 != nil {
					x.FptrMapBoolInt8 = nil
				}
			} else {
				if x.FptrMapBoolInt8 == nil {
					x.FptrMapBoolInt8 = new(map[bool]int8)
				}

				if false {
				} else {
					h.decMapboolint8((*map[bool]int8)(x.FptrMapBoolInt8), d)
				}
			}
		case "FMapBoolInt16":
			if r.TryDecodeAsNil() {
				x.FMapBoolInt16 = nil
			} else {
				if false {
				} else {
					h.decMapboolint16((*map[bool]int16)(&x.FMapBoolInt16), d)
				}
			}
		case "FptrMapBoolInt16":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapBoolInt16 != nil {
					x.FptrMapBoolInt16 = nil
				}
			} else {
				if x.FptrMapBoolInt16 == nil {
					x.FptrMapBoolInt16 = new(map[bool]int16)
				}

				if false {
				} else {
					h.decMapboolint16((*map[bool]int16)(x.FptrMapBoolInt16), d)
				}
			}
		case "FMapBoolInt32":
			if r.TryDecodeAsNil() {
				x.FMapBoolInt32 = nil
			} else {
				if false {
				} else {
					h.decMapboolint32((*map[bool]int32)(&x.FMapBoolInt32), d)
				}
			}
		case "FptrMapBoolInt32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapBoolInt32 != nil {
					x.FptrMapBoolInt32 = nil
				}
			} else {
				if x.FptrMapBoolInt32 == nil {
					x.FptrMapBoolInt32 = new(map[bool]int32)
				}

				if false {
				} else {
					h.decMapboolint32((*map[bool]int32)(x.FptrMapBoolInt32), d)
				}
			}
		case "FMapBoolInt64":
			if r.TryDecodeAsNil() {
				x.FMapBoolInt64 = nil
			} else {
				if false {
				} else {
					h.decMapboolint64((*map[bool]int64)(&x.FMapBoolInt64), d)
				}
			}
		case "FptrMapBoolInt64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapBoolInt64 != nil {
					x.FptrMapBoolInt64 = nil
				}
			} else {
				if x.FptrMapBoolInt64 == nil {
					x.FptrMapBoolInt64 = new(map[bool]int64)
				}

				if false {
				} else {
					h.decMapboolint64((*map[bool]int64)(x.FptrMapBoolInt64), d)
				}
			}
		case "FMapBoolFloat32":
			if r.TryDecodeAsNil() {
				x.FMapBoolFloat32 = nil
			} else {
				if false {
				} else {
					h.decMapboolfloat32((*map[bool]float32)(&x.FMapBoolFloat32), d)
				}
			}
		case "FptrMapBoolFloat32":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapBoolFloat32 != nil {
					x.FptrMapBoolFloat32 = nil
				}
			} else {
				if x.FptrMapBoolFloat32 == nil {
					x.FptrMapBoolFloat32 = new(map[bool]float32)
				}

				if false {
				} else {
					h.decMapboolfloat32((*map[bool]float32)(x.FptrMapBoolFloat32), d)
				}
			}
		case "FMapBoolFloat64":
			if r.TryDecodeAsNil() {
				x.FMapBoolFloat64 = nil
			} else {
				if false {
				} else {
					h.decMapboolfloat64((*map[bool]float64)(&x.FMapBoolFloat64), d)
				}
			}
		case "FptrMapBoolFloat64":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapBoolFloat64 != nil {
					x.FptrMapBoolFloat64 = nil
				}
			} else {
				if x.FptrMapBoolFloat64 == nil {
					x.FptrMapBoolFloat64 = new(map[bool]float64)
				}

				if false {
				} else {
					h.decMapboolfloat64((*map[bool]float64)(x.FptrMapBoolFloat64), d)
				}
			}
		case "FMapBoolBool":
			if r.TryDecodeAsNil() {
				x.FMapBoolBool = nil
			} else {
				if false {
				} else {
					h.decMapboolbool((*map[bool]bool)(&x.FMapBoolBool), d)
				}
			}
		case "FptrMapBoolBool":
			if r.TryDecodeAsNil() {
				if true && x.FptrMapBoolBool != nil {
					x.FptrMapBoolBool = nil
				}
			} else {
				if x.FptrMapBoolBool == nil {
					x.FptrMapBoolBool = new(map[bool]bool)
				}

				if false {
				} else {
					h.decMapboolbool((*map[bool]bool)(x.FptrMapBoolBool), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *TestMammoth2) codecDecodeSelfFromArray(l int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1141 int
	var yyb1141 bool
	var yyhl1141 bool = l >= 0
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FIntf = nil
	} else {
		if false {
		} else {
			z.DecFallback(&x.FIntf, true)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrIntf != nil {
			x.FptrIntf = nil
		}
	} else {
		if x.FptrIntf == nil {
			x.FptrIntf = new(interface{})
		}

		if false {
		} else {
			z.DecFallback(x.FptrIntf, true)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FString = ""
	} else {
		x.FString = (string)(r.DecodeString())
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrString != nil {
			x.FptrString = nil
		}
	} else {
		if x.FptrString == nil {
			x.FptrString = new(string)
		}

		if false {
		} else {
			*x.FptrString = (string)(r.DecodeString())
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FFloat32 = 0
	} else {
		x.FFloat32 = (float32)(r.DecodeFloat32As64())
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrFloat32 != nil {
			x.FptrFloat32 = nil
		}
	} else {
		if x.FptrFloat32 == nil {
			x.FptrFloat32 = new(float32)
		}

		if false {
		} else {
			*x.FptrFloat32 = (float32)(r.DecodeFloat32As64())
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FFloat64 = 0
	} else {
		x.FFloat64 = (float64)(r.DecodeFloat64())
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrFloat64 != nil {
			x.FptrFloat64 = nil
		}
	} else {
		if x.FptrFloat64 == nil {
			x.FptrFloat64 = new(float64)
		}

		if false {
		} else {
			*x.FptrFloat64 = (float64)(r.DecodeFloat64())
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FUint = 0
	} else {
		x.FUint = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrUint != nil {
			x.FptrUint = nil
		}
	} else {
		if x.FptrUint == nil {
			x.FptrUint = new(uint)
		}

		if false {
		} else {
			*x.FptrUint = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FUint8 = 0
	} else {
		x.FUint8 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrUint8 != nil {
			x.FptrUint8 = nil
		}
	} else {
		if x.FptrUint8 == nil {
			x.FptrUint8 = new(uint8)
		}

		if false {
		} else {
			*x.FptrUint8 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FUint16 = 0
	} else {
		x.FUint16 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrUint16 != nil {
			x.FptrUint16 = nil
		}
	} else {
		if x.FptrUint16 == nil {
			x.FptrUint16 = new(uint16)
		}

		if false {
		} else {
			*x.FptrUint16 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FUint32 = 0
	} else {
		x.FUint32 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrUint32 != nil {
			x.FptrUint32 = nil
		}
	} else {
		if x.FptrUint32 == nil {
			x.FptrUint32 = new(uint32)
		}

		if false {
		} else {
			*x.FptrUint32 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FUint64 = 0
	} else {
		x.FUint64 = (uint64)(r.DecodeUint64())
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrUint64 != nil {
			x.FptrUint64 = nil
		}
	} else {
		if x.FptrUint64 == nil {
			x.FptrUint64 = new(uint64)
		}

		if false {
		} else {
			*x.FptrUint64 = (uint64)(r.DecodeUint64())
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FUintptr = 0
	} else {
		x.FUintptr = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrUintptr != nil {
			x.FptrUintptr = nil
		}
	} else {
		if x.FptrUintptr == nil {
			x.FptrUintptr = new(uintptr)
		}

		if false {
		} else {
			*x.FptrUintptr = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FInt = 0
	} else {
		x.FInt = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrInt != nil {
			x.FptrInt = nil
		}
	} else {
		if x.FptrInt == nil {
			x.FptrInt = new(int)
		}

		if false {
		} else {
			*x.FptrInt = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FInt8 = 0
	} else {
		x.FInt8 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrInt8 != nil {
			x.FptrInt8 = nil
		}
	} else {
		if x.FptrInt8 == nil {
			x.FptrInt8 = new(int8)
		}

		if false {
		} else {
			*x.FptrInt8 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FInt16 = 0
	} else {
		x.FInt16 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrInt16 != nil {
			x.FptrInt16 = nil
		}
	} else {
		if x.FptrInt16 == nil {
			x.FptrInt16 = new(int16)
		}

		if false {
		} else {
			*x.FptrInt16 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FInt32 = 0
	} else {
		x.FInt32 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrInt32 != nil {
			x.FptrInt32 = nil
		}
	} else {
		if x.FptrInt32 == nil {
			x.FptrInt32 = new(int32)
		}

		if false {
		} else {
			*x.FptrInt32 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FInt64 = 0
	} else {
		x.FInt64 = (int64)(r.DecodeInt64())
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrInt64 != nil {
			x.FptrInt64 = nil
		}
	} else {
		if x.FptrInt64 == nil {
			x.FptrInt64 = new(int64)
		}

		if false {
		} else {
			*x.FptrInt64 = (int64)(r.DecodeInt64())
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FBool = false
	} else {
		x.FBool = (bool)(r.DecodeBool())
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrBool != nil {
			x.FptrBool = nil
		}
	} else {
		if x.FptrBool == nil {
			x.FptrBool = new(bool)
		}

		if false {
		} else {
			*x.FptrBool = (bool)(r.DecodeBool())
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceIntf = nil
	} else {
		if false {
		} else {
			h.decSliceInterface((*[]interface{})(&x.FSliceIntf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrSliceIntf != nil {
			x.FptrSliceIntf = nil
		}
	} else {
		if x.FptrSliceIntf == nil {
			x.FptrSliceIntf = new([]interface{})
		}

		if false {
		} else {
			h.decSliceInterface((*[]interface{})(x.FptrSliceIntf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceString = nil
	} else {
		if false {
		} else {
			h.decSlicestring((*[]string)(&x.FSliceString), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrSliceString != nil {
			x.FptrSliceString = nil
		}
	} else {
		if x.FptrSliceString == nil {
			x.FptrSliceString = new([]string)
		}

		if false {
		} else {
			h.decSlicestring((*[]string)(x.FptrSliceString), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceFloat32 = nil
	} else {
		if false {
		} else {
			h.decSlicefloat32((*[]float32)(&x.FSliceFloat32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrSliceFloat32 != nil {
			x.FptrSliceFloat32 = nil
		}
	} else {
		if x.FptrSliceFloat32 == nil {
			x.FptrSliceFloat32 = new([]float32)
		}

		if false {
		} else {
			h.decSlicefloat32((*[]float32)(x.FptrSliceFloat32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceFloat64 = nil
	} else {
		if false {
		} else {
			h.decSlicefloat64((*[]float64)(&x.FSliceFloat64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrSliceFloat64 != nil {
			x.FptrSliceFloat64 = nil
		}
	} else {
		if x.FptrSliceFloat64 == nil {
			x.FptrSliceFloat64 = new([]float64)
		}

		if false {
		} else {
			h.decSlicefloat64((*[]float64)(x.FptrSliceFloat64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceUint = nil
	} else {
		if false {
		} else {
			h.decSliceuint((*[]uint)(&x.FSliceUint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrSliceUint != nil {
			x.FptrSliceUint = nil
		}
	} else {
		if x.FptrSliceUint == nil {
			x.FptrSliceUint = new([]uint)
		}

		if false {
		} else {
			h.decSliceuint((*[]uint)(x.FptrSliceUint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceUint8 = nil
	} else {
		if false {
		} else {
			x.FSliceUint8 = r.DecodeBytes(([]byte)(x.FSliceUint8), false)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrSliceUint8 != nil {
			x.FptrSliceUint8 = nil
		}
	} else {
		if x.FptrSliceUint8 == nil {
			x.FptrSliceUint8 = new([]uint8)
		}

		if false {
		} else {
			*x.FptrSliceUint8 = r.DecodeBytes(*(*[]byte)(x.FptrSliceUint8), false)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceUint16 = nil
	} else {
		if false {
		} else {
			h.decSliceuint16((*[]uint16)(&x.FSliceUint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrSliceUint16 != nil {
			x.FptrSliceUint16 = nil
		}
	} else {
		if x.FptrSliceUint16 == nil {
			x.FptrSliceUint16 = new([]uint16)
		}

		if false {
		} else {
			h.decSliceuint16((*[]uint16)(x.FptrSliceUint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceUint32 = nil
	} else {
		if false {
		} else {
			h.decSliceuint32((*[]uint32)(&x.FSliceUint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrSliceUint32 != nil {
			x.FptrSliceUint32 = nil
		}
	} else {
		if x.FptrSliceUint32 == nil {
			x.FptrSliceUint32 = new([]uint32)
		}

		if false {
		} else {
			h.decSliceuint32((*[]uint32)(x.FptrSliceUint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceUint64 = nil
	} else {
		if false {
		} else {
			h.decSliceuint64((*[]uint64)(&x.FSliceUint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrSliceUint64 != nil {
			x.FptrSliceUint64 = nil
		}
	} else {
		if x.FptrSliceUint64 == nil {
			x.FptrSliceUint64 = new([]uint64)
		}

		if false {
		} else {
			h.decSliceuint64((*[]uint64)(x.FptrSliceUint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceUintptr = nil
	} else {
		if false {
		} else {
			h.decSliceuintptr((*[]uintptr)(&x.FSliceUintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrSliceUintptr != nil {
			x.FptrSliceUintptr = nil
		}
	} else {
		if x.FptrSliceUintptr == nil {
			x.FptrSliceUintptr = new([]uintptr)
		}

		if false {
		} else {
			h.decSliceuintptr((*[]uintptr)(x.FptrSliceUintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceInt = nil
	} else {
		if false {
		} else {
			h.decSliceint((*[]int)(&x.FSliceInt), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrSliceInt != nil {
			x.FptrSliceInt = nil
		}
	} else {
		if x.FptrSliceInt == nil {
			x.FptrSliceInt = new([]int)
		}

		if false {
		} else {
			h.decSliceint((*[]int)(x.FptrSliceInt), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceInt8 = nil
	} else {
		if false {
		} else {
			h.decSliceint8((*[]int8)(&x.FSliceInt8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrSliceInt8 != nil {
			x.FptrSliceInt8 = nil
		}
	} else {
		if x.FptrSliceInt8 == nil {
			x.FptrSliceInt8 = new([]int8)
		}

		if false {
		} else {
			h.decSliceint8((*[]int8)(x.FptrSliceInt8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceInt16 = nil
	} else {
		if false {
		} else {
			h.decSliceint16((*[]int16)(&x.FSliceInt16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrSliceInt16 != nil {
			x.FptrSliceInt16 = nil
		}
	} else {
		if x.FptrSliceInt16 == nil {
			x.FptrSliceInt16 = new([]int16)
		}

		if false {
		} else {
			h.decSliceint16((*[]int16)(x.FptrSliceInt16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceInt32 = nil
	} else {
		if false {
		} else {
			h.decSliceint32((*[]int32)(&x.FSliceInt32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrSliceInt32 != nil {
			x.FptrSliceInt32 = nil
		}
	} else {
		if x.FptrSliceInt32 == nil {
			x.FptrSliceInt32 = new([]int32)
		}

		if false {
		} else {
			h.decSliceint32((*[]int32)(x.FptrSliceInt32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceInt64 = nil
	} else {
		if false {
		} else {
			h.decSliceint64((*[]int64)(&x.FSliceInt64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrSliceInt64 != nil {
			x.FptrSliceInt64 = nil
		}
	} else {
		if x.FptrSliceInt64 == nil {
			x.FptrSliceInt64 = new([]int64)
		}

		if false {
		} else {
			h.decSliceint64((*[]int64)(x.FptrSliceInt64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FSliceBool = nil
	} else {
		if false {
		} else {
			h.decSlicebool((*[]bool)(&x.FSliceBool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrSliceBool != nil {
			x.FptrSliceBool = nil
		}
	} else {
		if x.FptrSliceBool == nil {
			x.FptrSliceBool = new([]bool)
		}

		if false {
		} else {
			h.decSlicebool((*[]bool)(x.FptrSliceBool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntfIntf = nil
	} else {
		if false {
		} else {
			h.decMapInterfaceInterface((*map[interface{}]interface{})(&x.FMapIntfIntf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntfIntf != nil {
			x.FptrMapIntfIntf = nil
		}
	} else {
		if x.FptrMapIntfIntf == nil {
			x.FptrMapIntfIntf = new(map[interface{}]interface{})
		}

		if false {
		} else {
			h.decMapInterfaceInterface((*map[interface{}]interface{})(x.FptrMapIntfIntf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntfString = nil
	} else {
		if false {
		} else {
			h.decMapInterfacestring((*map[interface{}]string)(&x.FMapIntfString), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntfString != nil {
			x.FptrMapIntfString = nil
		}
	} else {
		if x.FptrMapIntfString == nil {
			x.FptrMapIntfString = new(map[interface{}]string)
		}

		if false {
		} else {
			h.decMapInterfacestring((*map[interface{}]string)(x.FptrMapIntfString), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntfUint = nil
	} else {
		if false {
		} else {
			h.decMapInterfaceuint((*map[interface{}]uint)(&x.FMapIntfUint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntfUint != nil {
			x.FptrMapIntfUint = nil
		}
	} else {
		if x.FptrMapIntfUint == nil {
			x.FptrMapIntfUint = new(map[interface{}]uint)
		}

		if false {
		} else {
			h.decMapInterfaceuint((*map[interface{}]uint)(x.FptrMapIntfUint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntfUint8 = nil
	} else {
		if false {
		} else {
			h.decMapInterfaceuint8((*map[interface{}]uint8)(&x.FMapIntfUint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntfUint8 != nil {
			x.FptrMapIntfUint8 = nil
		}
	} else {
		if x.FptrMapIntfUint8 == nil {
			x.FptrMapIntfUint8 = new(map[interface{}]uint8)
		}

		if false {
		} else {
			h.decMapInterfaceuint8((*map[interface{}]uint8)(x.FptrMapIntfUint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntfUint16 = nil
	} else {
		if false {
		} else {
			h.decMapInterfaceuint16((*map[interface{}]uint16)(&x.FMapIntfUint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntfUint16 != nil {
			x.FptrMapIntfUint16 = nil
		}
	} else {
		if x.FptrMapIntfUint16 == nil {
			x.FptrMapIntfUint16 = new(map[interface{}]uint16)
		}

		if false {
		} else {
			h.decMapInterfaceuint16((*map[interface{}]uint16)(x.FptrMapIntfUint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntfUint32 = nil
	} else {
		if false {
		} else {
			h.decMapInterfaceuint32((*map[interface{}]uint32)(&x.FMapIntfUint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntfUint32 != nil {
			x.FptrMapIntfUint32 = nil
		}
	} else {
		if x.FptrMapIntfUint32 == nil {
			x.FptrMapIntfUint32 = new(map[interface{}]uint32)
		}

		if false {
		} else {
			h.decMapInterfaceuint32((*map[interface{}]uint32)(x.FptrMapIntfUint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntfUint64 = nil
	} else {
		if false {
		} else {
			h.decMapInterfaceuint64((*map[interface{}]uint64)(&x.FMapIntfUint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntfUint64 != nil {
			x.FptrMapIntfUint64 = nil
		}
	} else {
		if x.FptrMapIntfUint64 == nil {
			x.FptrMapIntfUint64 = new(map[interface{}]uint64)
		}

		if false {
		} else {
			h.decMapInterfaceuint64((*map[interface{}]uint64)(x.FptrMapIntfUint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntfUintptr = nil
	} else {
		if false {
		} else {
			h.decMapInterfaceuintptr((*map[interface{}]uintptr)(&x.FMapIntfUintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntfUintptr != nil {
			x.FptrMapIntfUintptr = nil
		}
	} else {
		if x.FptrMapIntfUintptr == nil {
			x.FptrMapIntfUintptr = new(map[interface{}]uintptr)
		}

		if false {
		} else {
			h.decMapInterfaceuintptr((*map[interface{}]uintptr)(x.FptrMapIntfUintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntfInt = nil
	} else {
		if false {
		} else {
			h.decMapInterfaceint((*map[interface{}]int)(&x.FMapIntfInt), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntfInt != nil {
			x.FptrMapIntfInt = nil
		}
	} else {
		if x.FptrMapIntfInt == nil {
			x.FptrMapIntfInt = new(map[interface{}]int)
		}

		if false {
		} else {
			h.decMapInterfaceint((*map[interface{}]int)(x.FptrMapIntfInt), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntfInt8 = nil
	} else {
		if false {
		} else {
			h.decMapInterfaceint8((*map[interface{}]int8)(&x.FMapIntfInt8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntfInt8 != nil {
			x.FptrMapIntfInt8 = nil
		}
	} else {
		if x.FptrMapIntfInt8 == nil {
			x.FptrMapIntfInt8 = new(map[interface{}]int8)
		}

		if false {
		} else {
			h.decMapInterfaceint8((*map[interface{}]int8)(x.FptrMapIntfInt8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntfInt16 = nil
	} else {
		if false {
		} else {
			h.decMapInterfaceint16((*map[interface{}]int16)(&x.FMapIntfInt16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntfInt16 != nil {
			x.FptrMapIntfInt16 = nil
		}
	} else {
		if x.FptrMapIntfInt16 == nil {
			x.FptrMapIntfInt16 = new(map[interface{}]int16)
		}

		if false {
		} else {
			h.decMapInterfaceint16((*map[interface{}]int16)(x.FptrMapIntfInt16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntfInt32 = nil
	} else {
		if false {
		} else {
			h.decMapInterfaceint32((*map[interface{}]int32)(&x.FMapIntfInt32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntfInt32 != nil {
			x.FptrMapIntfInt32 = nil
		}
	} else {
		if x.FptrMapIntfInt32 == nil {
			x.FptrMapIntfInt32 = new(map[interface{}]int32)
		}

		if false {
		} else {
			h.decMapInterfaceint32((*map[interface{}]int32)(x.FptrMapIntfInt32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntfInt64 = nil
	} else {
		if false {
		} else {
			h.decMapInterfaceint64((*map[interface{}]int64)(&x.FMapIntfInt64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntfInt64 != nil {
			x.FptrMapIntfInt64 = nil
		}
	} else {
		if x.FptrMapIntfInt64 == nil {
			x.FptrMapIntfInt64 = new(map[interface{}]int64)
		}

		if false {
		} else {
			h.decMapInterfaceint64((*map[interface{}]int64)(x.FptrMapIntfInt64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntfFloat32 = nil
	} else {
		if false {
		} else {
			h.decMapInterfacefloat32((*map[interface{}]float32)(&x.FMapIntfFloat32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntfFloat32 != nil {
			x.FptrMapIntfFloat32 = nil
		}
	} else {
		if x.FptrMapIntfFloat32 == nil {
			x.FptrMapIntfFloat32 = new(map[interface{}]float32)
		}

		if false {
		} else {
			h.decMapInterfacefloat32((*map[interface{}]float32)(x.FptrMapIntfFloat32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntfFloat64 = nil
	} else {
		if false {
		} else {
			h.decMapInterfacefloat64((*map[interface{}]float64)(&x.FMapIntfFloat64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntfFloat64 != nil {
			x.FptrMapIntfFloat64 = nil
		}
	} else {
		if x.FptrMapIntfFloat64 == nil {
			x.FptrMapIntfFloat64 = new(map[interface{}]float64)
		}

		if false {
		} else {
			h.decMapInterfacefloat64((*map[interface{}]float64)(x.FptrMapIntfFloat64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntfBool = nil
	} else {
		if false {
		} else {
			h.decMapInterfacebool((*map[interface{}]bool)(&x.FMapIntfBool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntfBool != nil {
			x.FptrMapIntfBool = nil
		}
	} else {
		if x.FptrMapIntfBool == nil {
			x.FptrMapIntfBool = new(map[interface{}]bool)
		}

		if false {
		} else {
			h.decMapInterfacebool((*map[interface{}]bool)(x.FptrMapIntfBool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringIntf = nil
	} else {
		if false {
		} else {
			h.decMapstringInterface((*map[string]interface{})(&x.FMapStringIntf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapStringIntf != nil {
			x.FptrMapStringIntf = nil
		}
	} else {
		if x.FptrMapStringIntf == nil {
			x.FptrMapStringIntf = new(map[string]interface{})
		}

		if false {
		} else {
			h.decMapstringInterface((*map[string]interface{})(x.FptrMapStringIntf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringString = nil
	} else {
		if false {
		} else {
			h.decMapstringstring((*map[string]string)(&x.FMapStringString), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapStringString != nil {
			x.FptrMapStringString = nil
		}
	} else {
		if x.FptrMapStringString == nil {
			x.FptrMapStringString = new(map[string]string)
		}

		if false {
		} else {
			h.decMapstringstring((*map[string]string)(x.FptrMapStringString), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringUint = nil
	} else {
		if false {
		} else {
			h.decMapstringuint((*map[string]uint)(&x.FMapStringUint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapStringUint != nil {
			x.FptrMapStringUint = nil
		}
	} else {
		if x.FptrMapStringUint == nil {
			x.FptrMapStringUint = new(map[string]uint)
		}

		if false {
		} else {
			h.decMapstringuint((*map[string]uint)(x.FptrMapStringUint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringUint8 = nil
	} else {
		if false {
		} else {
			h.decMapstringuint8((*map[string]uint8)(&x.FMapStringUint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapStringUint8 != nil {
			x.FptrMapStringUint8 = nil
		}
	} else {
		if x.FptrMapStringUint8 == nil {
			x.FptrMapStringUint8 = new(map[string]uint8)
		}

		if false {
		} else {
			h.decMapstringuint8((*map[string]uint8)(x.FptrMapStringUint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringUint16 = nil
	} else {
		if false {
		} else {
			h.decMapstringuint16((*map[string]uint16)(&x.FMapStringUint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapStringUint16 != nil {
			x.FptrMapStringUint16 = nil
		}
	} else {
		if x.FptrMapStringUint16 == nil {
			x.FptrMapStringUint16 = new(map[string]uint16)
		}

		if false {
		} else {
			h.decMapstringuint16((*map[string]uint16)(x.FptrMapStringUint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringUint32 = nil
	} else {
		if false {
		} else {
			h.decMapstringuint32((*map[string]uint32)(&x.FMapStringUint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapStringUint32 != nil {
			x.FptrMapStringUint32 = nil
		}
	} else {
		if x.FptrMapStringUint32 == nil {
			x.FptrMapStringUint32 = new(map[string]uint32)
		}

		if false {
		} else {
			h.decMapstringuint32((*map[string]uint32)(x.FptrMapStringUint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringUint64 = nil
	} else {
		if false {
		} else {
			h.decMapstringuint64((*map[string]uint64)(&x.FMapStringUint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapStringUint64 != nil {
			x.FptrMapStringUint64 = nil
		}
	} else {
		if x.FptrMapStringUint64 == nil {
			x.FptrMapStringUint64 = new(map[string]uint64)
		}

		if false {
		} else {
			h.decMapstringuint64((*map[string]uint64)(x.FptrMapStringUint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringUintptr = nil
	} else {
		if false {
		} else {
			h.decMapstringuintptr((*map[string]uintptr)(&x.FMapStringUintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapStringUintptr != nil {
			x.FptrMapStringUintptr = nil
		}
	} else {
		if x.FptrMapStringUintptr == nil {
			x.FptrMapStringUintptr = new(map[string]uintptr)
		}

		if false {
		} else {
			h.decMapstringuintptr((*map[string]uintptr)(x.FptrMapStringUintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringInt = nil
	} else {
		if false {
		} else {
			h.decMapstringint((*map[string]int)(&x.FMapStringInt), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapStringInt != nil {
			x.FptrMapStringInt = nil
		}
	} else {
		if x.FptrMapStringInt == nil {
			x.FptrMapStringInt = new(map[string]int)
		}

		if false {
		} else {
			h.decMapstringint((*map[string]int)(x.FptrMapStringInt), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringInt8 = nil
	} else {
		if false {
		} else {
			h.decMapstringint8((*map[string]int8)(&x.FMapStringInt8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapStringInt8 != nil {
			x.FptrMapStringInt8 = nil
		}
	} else {
		if x.FptrMapStringInt8 == nil {
			x.FptrMapStringInt8 = new(map[string]int8)
		}

		if false {
		} else {
			h.decMapstringint8((*map[string]int8)(x.FptrMapStringInt8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringInt16 = nil
	} else {
		if false {
		} else {
			h.decMapstringint16((*map[string]int16)(&x.FMapStringInt16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapStringInt16 != nil {
			x.FptrMapStringInt16 = nil
		}
	} else {
		if x.FptrMapStringInt16 == nil {
			x.FptrMapStringInt16 = new(map[string]int16)
		}

		if false {
		} else {
			h.decMapstringint16((*map[string]int16)(x.FptrMapStringInt16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringInt32 = nil
	} else {
		if false {
		} else {
			h.decMapstringint32((*map[string]int32)(&x.FMapStringInt32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapStringInt32 != nil {
			x.FptrMapStringInt32 = nil
		}
	} else {
		if x.FptrMapStringInt32 == nil {
			x.FptrMapStringInt32 = new(map[string]int32)
		}

		if false {
		} else {
			h.decMapstringint32((*map[string]int32)(x.FptrMapStringInt32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringInt64 = nil
	} else {
		if false {
		} else {
			h.decMapstringint64((*map[string]int64)(&x.FMapStringInt64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapStringInt64 != nil {
			x.FptrMapStringInt64 = nil
		}
	} else {
		if x.FptrMapStringInt64 == nil {
			x.FptrMapStringInt64 = new(map[string]int64)
		}

		if false {
		} else {
			h.decMapstringint64((*map[string]int64)(x.FptrMapStringInt64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringFloat32 = nil
	} else {
		if false {
		} else {
			h.decMapstringfloat32((*map[string]float32)(&x.FMapStringFloat32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapStringFloat32 != nil {
			x.FptrMapStringFloat32 = nil
		}
	} else {
		if x.FptrMapStringFloat32 == nil {
			x.FptrMapStringFloat32 = new(map[string]float32)
		}

		if false {
		} else {
			h.decMapstringfloat32((*map[string]float32)(x.FptrMapStringFloat32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringFloat64 = nil
	} else {
		if false {
		} else {
			h.decMapstringfloat64((*map[string]float64)(&x.FMapStringFloat64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapStringFloat64 != nil {
			x.FptrMapStringFloat64 = nil
		}
	} else {
		if x.FptrMapStringFloat64 == nil {
			x.FptrMapStringFloat64 = new(map[string]float64)
		}

		if false {
		} else {
			h.decMapstringfloat64((*map[string]float64)(x.FptrMapStringFloat64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapStringBool = nil
	} else {
		if false {
		} else {
			h.decMapstringbool((*map[string]bool)(&x.FMapStringBool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapStringBool != nil {
			x.FptrMapStringBool = nil
		}
	} else {
		if x.FptrMapStringBool == nil {
			x.FptrMapStringBool = new(map[string]bool)
		}

		if false {
		} else {
			h.decMapstringbool((*map[string]bool)(x.FptrMapStringBool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat32Intf = nil
	} else {
		if false {
		} else {
			h.decMapfloat32Interface((*map[float32]interface{})(&x.FMapFloat32Intf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat32Intf != nil {
			x.FptrMapFloat32Intf = nil
		}
	} else {
		if x.FptrMapFloat32Intf == nil {
			x.FptrMapFloat32Intf = new(map[float32]interface{})
		}

		if false {
		} else {
			h.decMapfloat32Interface((*map[float32]interface{})(x.FptrMapFloat32Intf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat32String = nil
	} else {
		if false {
		} else {
			h.decMapfloat32string((*map[float32]string)(&x.FMapFloat32String), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat32String != nil {
			x.FptrMapFloat32String = nil
		}
	} else {
		if x.FptrMapFloat32String == nil {
			x.FptrMapFloat32String = new(map[float32]string)
		}

		if false {
		} else {
			h.decMapfloat32string((*map[float32]string)(x.FptrMapFloat32String), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat32Uint = nil
	} else {
		if false {
		} else {
			h.decMapfloat32uint((*map[float32]uint)(&x.FMapFloat32Uint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat32Uint != nil {
			x.FptrMapFloat32Uint = nil
		}
	} else {
		if x.FptrMapFloat32Uint == nil {
			x.FptrMapFloat32Uint = new(map[float32]uint)
		}

		if false {
		} else {
			h.decMapfloat32uint((*map[float32]uint)(x.FptrMapFloat32Uint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat32Uint8 = nil
	} else {
		if false {
		} else {
			h.decMapfloat32uint8((*map[float32]uint8)(&x.FMapFloat32Uint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat32Uint8 != nil {
			x.FptrMapFloat32Uint8 = nil
		}
	} else {
		if x.FptrMapFloat32Uint8 == nil {
			x.FptrMapFloat32Uint8 = new(map[float32]uint8)
		}

		if false {
		} else {
			h.decMapfloat32uint8((*map[float32]uint8)(x.FptrMapFloat32Uint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat32Uint16 = nil
	} else {
		if false {
		} else {
			h.decMapfloat32uint16((*map[float32]uint16)(&x.FMapFloat32Uint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat32Uint16 != nil {
			x.FptrMapFloat32Uint16 = nil
		}
	} else {
		if x.FptrMapFloat32Uint16 == nil {
			x.FptrMapFloat32Uint16 = new(map[float32]uint16)
		}

		if false {
		} else {
			h.decMapfloat32uint16((*map[float32]uint16)(x.FptrMapFloat32Uint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat32Uint32 = nil
	} else {
		if false {
		} else {
			h.decMapfloat32uint32((*map[float32]uint32)(&x.FMapFloat32Uint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat32Uint32 != nil {
			x.FptrMapFloat32Uint32 = nil
		}
	} else {
		if x.FptrMapFloat32Uint32 == nil {
			x.FptrMapFloat32Uint32 = new(map[float32]uint32)
		}

		if false {
		} else {
			h.decMapfloat32uint32((*map[float32]uint32)(x.FptrMapFloat32Uint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat32Uint64 = nil
	} else {
		if false {
		} else {
			h.decMapfloat32uint64((*map[float32]uint64)(&x.FMapFloat32Uint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat32Uint64 != nil {
			x.FptrMapFloat32Uint64 = nil
		}
	} else {
		if x.FptrMapFloat32Uint64 == nil {
			x.FptrMapFloat32Uint64 = new(map[float32]uint64)
		}

		if false {
		} else {
			h.decMapfloat32uint64((*map[float32]uint64)(x.FptrMapFloat32Uint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat32Uintptr = nil
	} else {
		if false {
		} else {
			h.decMapfloat32uintptr((*map[float32]uintptr)(&x.FMapFloat32Uintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat32Uintptr != nil {
			x.FptrMapFloat32Uintptr = nil
		}
	} else {
		if x.FptrMapFloat32Uintptr == nil {
			x.FptrMapFloat32Uintptr = new(map[float32]uintptr)
		}

		if false {
		} else {
			h.decMapfloat32uintptr((*map[float32]uintptr)(x.FptrMapFloat32Uintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat32Int = nil
	} else {
		if false {
		} else {
			h.decMapfloat32int((*map[float32]int)(&x.FMapFloat32Int), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat32Int != nil {
			x.FptrMapFloat32Int = nil
		}
	} else {
		if x.FptrMapFloat32Int == nil {
			x.FptrMapFloat32Int = new(map[float32]int)
		}

		if false {
		} else {
			h.decMapfloat32int((*map[float32]int)(x.FptrMapFloat32Int), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat32Int8 = nil
	} else {
		if false {
		} else {
			h.decMapfloat32int8((*map[float32]int8)(&x.FMapFloat32Int8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat32Int8 != nil {
			x.FptrMapFloat32Int8 = nil
		}
	} else {
		if x.FptrMapFloat32Int8 == nil {
			x.FptrMapFloat32Int8 = new(map[float32]int8)
		}

		if false {
		} else {
			h.decMapfloat32int8((*map[float32]int8)(x.FptrMapFloat32Int8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat32Int16 = nil
	} else {
		if false {
		} else {
			h.decMapfloat32int16((*map[float32]int16)(&x.FMapFloat32Int16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat32Int16 != nil {
			x.FptrMapFloat32Int16 = nil
		}
	} else {
		if x.FptrMapFloat32Int16 == nil {
			x.FptrMapFloat32Int16 = new(map[float32]int16)
		}

		if false {
		} else {
			h.decMapfloat32int16((*map[float32]int16)(x.FptrMapFloat32Int16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat32Int32 = nil
	} else {
		if false {
		} else {
			h.decMapfloat32int32((*map[float32]int32)(&x.FMapFloat32Int32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat32Int32 != nil {
			x.FptrMapFloat32Int32 = nil
		}
	} else {
		if x.FptrMapFloat32Int32 == nil {
			x.FptrMapFloat32Int32 = new(map[float32]int32)
		}

		if false {
		} else {
			h.decMapfloat32int32((*map[float32]int32)(x.FptrMapFloat32Int32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat32Int64 = nil
	} else {
		if false {
		} else {
			h.decMapfloat32int64((*map[float32]int64)(&x.FMapFloat32Int64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat32Int64 != nil {
			x.FptrMapFloat32Int64 = nil
		}
	} else {
		if x.FptrMapFloat32Int64 == nil {
			x.FptrMapFloat32Int64 = new(map[float32]int64)
		}

		if false {
		} else {
			h.decMapfloat32int64((*map[float32]int64)(x.FptrMapFloat32Int64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat32Float32 = nil
	} else {
		if false {
		} else {
			h.decMapfloat32float32((*map[float32]float32)(&x.FMapFloat32Float32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat32Float32 != nil {
			x.FptrMapFloat32Float32 = nil
		}
	} else {
		if x.FptrMapFloat32Float32 == nil {
			x.FptrMapFloat32Float32 = new(map[float32]float32)
		}

		if false {
		} else {
			h.decMapfloat32float32((*map[float32]float32)(x.FptrMapFloat32Float32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat32Float64 = nil
	} else {
		if false {
		} else {
			h.decMapfloat32float64((*map[float32]float64)(&x.FMapFloat32Float64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat32Float64 != nil {
			x.FptrMapFloat32Float64 = nil
		}
	} else {
		if x.FptrMapFloat32Float64 == nil {
			x.FptrMapFloat32Float64 = new(map[float32]float64)
		}

		if false {
		} else {
			h.decMapfloat32float64((*map[float32]float64)(x.FptrMapFloat32Float64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat32Bool = nil
	} else {
		if false {
		} else {
			h.decMapfloat32bool((*map[float32]bool)(&x.FMapFloat32Bool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat32Bool != nil {
			x.FptrMapFloat32Bool = nil
		}
	} else {
		if x.FptrMapFloat32Bool == nil {
			x.FptrMapFloat32Bool = new(map[float32]bool)
		}

		if false {
		} else {
			h.decMapfloat32bool((*map[float32]bool)(x.FptrMapFloat32Bool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat64Intf = nil
	} else {
		if false {
		} else {
			h.decMapfloat64Interface((*map[float64]interface{})(&x.FMapFloat64Intf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat64Intf != nil {
			x.FptrMapFloat64Intf = nil
		}
	} else {
		if x.FptrMapFloat64Intf == nil {
			x.FptrMapFloat64Intf = new(map[float64]interface{})
		}

		if false {
		} else {
			h.decMapfloat64Interface((*map[float64]interface{})(x.FptrMapFloat64Intf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat64String = nil
	} else {
		if false {
		} else {
			h.decMapfloat64string((*map[float64]string)(&x.FMapFloat64String), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat64String != nil {
			x.FptrMapFloat64String = nil
		}
	} else {
		if x.FptrMapFloat64String == nil {
			x.FptrMapFloat64String = new(map[float64]string)
		}

		if false {
		} else {
			h.decMapfloat64string((*map[float64]string)(x.FptrMapFloat64String), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat64Uint = nil
	} else {
		if false {
		} else {
			h.decMapfloat64uint((*map[float64]uint)(&x.FMapFloat64Uint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat64Uint != nil {
			x.FptrMapFloat64Uint = nil
		}
	} else {
		if x.FptrMapFloat64Uint == nil {
			x.FptrMapFloat64Uint = new(map[float64]uint)
		}

		if false {
		} else {
			h.decMapfloat64uint((*map[float64]uint)(x.FptrMapFloat64Uint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat64Uint8 = nil
	} else {
		if false {
		} else {
			h.decMapfloat64uint8((*map[float64]uint8)(&x.FMapFloat64Uint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat64Uint8 != nil {
			x.FptrMapFloat64Uint8 = nil
		}
	} else {
		if x.FptrMapFloat64Uint8 == nil {
			x.FptrMapFloat64Uint8 = new(map[float64]uint8)
		}

		if false {
		} else {
			h.decMapfloat64uint8((*map[float64]uint8)(x.FptrMapFloat64Uint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat64Uint16 = nil
	} else {
		if false {
		} else {
			h.decMapfloat64uint16((*map[float64]uint16)(&x.FMapFloat64Uint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat64Uint16 != nil {
			x.FptrMapFloat64Uint16 = nil
		}
	} else {
		if x.FptrMapFloat64Uint16 == nil {
			x.FptrMapFloat64Uint16 = new(map[float64]uint16)
		}

		if false {
		} else {
			h.decMapfloat64uint16((*map[float64]uint16)(x.FptrMapFloat64Uint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat64Uint32 = nil
	} else {
		if false {
		} else {
			h.decMapfloat64uint32((*map[float64]uint32)(&x.FMapFloat64Uint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat64Uint32 != nil {
			x.FptrMapFloat64Uint32 = nil
		}
	} else {
		if x.FptrMapFloat64Uint32 == nil {
			x.FptrMapFloat64Uint32 = new(map[float64]uint32)
		}

		if false {
		} else {
			h.decMapfloat64uint32((*map[float64]uint32)(x.FptrMapFloat64Uint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat64Uint64 = nil
	} else {
		if false {
		} else {
			h.decMapfloat64uint64((*map[float64]uint64)(&x.FMapFloat64Uint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat64Uint64 != nil {
			x.FptrMapFloat64Uint64 = nil
		}
	} else {
		if x.FptrMapFloat64Uint64 == nil {
			x.FptrMapFloat64Uint64 = new(map[float64]uint64)
		}

		if false {
		} else {
			h.decMapfloat64uint64((*map[float64]uint64)(x.FptrMapFloat64Uint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat64Uintptr = nil
	} else {
		if false {
		} else {
			h.decMapfloat64uintptr((*map[float64]uintptr)(&x.FMapFloat64Uintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat64Uintptr != nil {
			x.FptrMapFloat64Uintptr = nil
		}
	} else {
		if x.FptrMapFloat64Uintptr == nil {
			x.FptrMapFloat64Uintptr = new(map[float64]uintptr)
		}

		if false {
		} else {
			h.decMapfloat64uintptr((*map[float64]uintptr)(x.FptrMapFloat64Uintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat64Int = nil
	} else {
		if false {
		} else {
			h.decMapfloat64int((*map[float64]int)(&x.FMapFloat64Int), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat64Int != nil {
			x.FptrMapFloat64Int = nil
		}
	} else {
		if x.FptrMapFloat64Int == nil {
			x.FptrMapFloat64Int = new(map[float64]int)
		}

		if false {
		} else {
			h.decMapfloat64int((*map[float64]int)(x.FptrMapFloat64Int), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat64Int8 = nil
	} else {
		if false {
		} else {
			h.decMapfloat64int8((*map[float64]int8)(&x.FMapFloat64Int8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat64Int8 != nil {
			x.FptrMapFloat64Int8 = nil
		}
	} else {
		if x.FptrMapFloat64Int8 == nil {
			x.FptrMapFloat64Int8 = new(map[float64]int8)
		}

		if false {
		} else {
			h.decMapfloat64int8((*map[float64]int8)(x.FptrMapFloat64Int8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat64Int16 = nil
	} else {
		if false {
		} else {
			h.decMapfloat64int16((*map[float64]int16)(&x.FMapFloat64Int16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat64Int16 != nil {
			x.FptrMapFloat64Int16 = nil
		}
	} else {
		if x.FptrMapFloat64Int16 == nil {
			x.FptrMapFloat64Int16 = new(map[float64]int16)
		}

		if false {
		} else {
			h.decMapfloat64int16((*map[float64]int16)(x.FptrMapFloat64Int16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat64Int32 = nil
	} else {
		if false {
		} else {
			h.decMapfloat64int32((*map[float64]int32)(&x.FMapFloat64Int32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat64Int32 != nil {
			x.FptrMapFloat64Int32 = nil
		}
	} else {
		if x.FptrMapFloat64Int32 == nil {
			x.FptrMapFloat64Int32 = new(map[float64]int32)
		}

		if false {
		} else {
			h.decMapfloat64int32((*map[float64]int32)(x.FptrMapFloat64Int32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat64Int64 = nil
	} else {
		if false {
		} else {
			h.decMapfloat64int64((*map[float64]int64)(&x.FMapFloat64Int64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat64Int64 != nil {
			x.FptrMapFloat64Int64 = nil
		}
	} else {
		if x.FptrMapFloat64Int64 == nil {
			x.FptrMapFloat64Int64 = new(map[float64]int64)
		}

		if false {
		} else {
			h.decMapfloat64int64((*map[float64]int64)(x.FptrMapFloat64Int64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat64Float32 = nil
	} else {
		if false {
		} else {
			h.decMapfloat64float32((*map[float64]float32)(&x.FMapFloat64Float32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat64Float32 != nil {
			x.FptrMapFloat64Float32 = nil
		}
	} else {
		if x.FptrMapFloat64Float32 == nil {
			x.FptrMapFloat64Float32 = new(map[float64]float32)
		}

		if false {
		} else {
			h.decMapfloat64float32((*map[float64]float32)(x.FptrMapFloat64Float32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat64Float64 = nil
	} else {
		if false {
		} else {
			h.decMapfloat64float64((*map[float64]float64)(&x.FMapFloat64Float64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat64Float64 != nil {
			x.FptrMapFloat64Float64 = nil
		}
	} else {
		if x.FptrMapFloat64Float64 == nil {
			x.FptrMapFloat64Float64 = new(map[float64]float64)
		}

		if false {
		} else {
			h.decMapfloat64float64((*map[float64]float64)(x.FptrMapFloat64Float64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapFloat64Bool = nil
	} else {
		if false {
		} else {
			h.decMapfloat64bool((*map[float64]bool)(&x.FMapFloat64Bool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapFloat64Bool != nil {
			x.FptrMapFloat64Bool = nil
		}
	} else {
		if x.FptrMapFloat64Bool == nil {
			x.FptrMapFloat64Bool = new(map[float64]bool)
		}

		if false {
		} else {
			h.decMapfloat64bool((*map[float64]bool)(x.FptrMapFloat64Bool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintIntf = nil
	} else {
		if false {
		} else {
			h.decMapuintInterface((*map[uint]interface{})(&x.FMapUintIntf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintIntf != nil {
			x.FptrMapUintIntf = nil
		}
	} else {
		if x.FptrMapUintIntf == nil {
			x.FptrMapUintIntf = new(map[uint]interface{})
		}

		if false {
		} else {
			h.decMapuintInterface((*map[uint]interface{})(x.FptrMapUintIntf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintString = nil
	} else {
		if false {
		} else {
			h.decMapuintstring((*map[uint]string)(&x.FMapUintString), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintString != nil {
			x.FptrMapUintString = nil
		}
	} else {
		if x.FptrMapUintString == nil {
			x.FptrMapUintString = new(map[uint]string)
		}

		if false {
		} else {
			h.decMapuintstring((*map[uint]string)(x.FptrMapUintString), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintUint = nil
	} else {
		if false {
		} else {
			h.decMapuintuint((*map[uint]uint)(&x.FMapUintUint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintUint != nil {
			x.FptrMapUintUint = nil
		}
	} else {
		if x.FptrMapUintUint == nil {
			x.FptrMapUintUint = new(map[uint]uint)
		}

		if false {
		} else {
			h.decMapuintuint((*map[uint]uint)(x.FptrMapUintUint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintUint8 = nil
	} else {
		if false {
		} else {
			h.decMapuintuint8((*map[uint]uint8)(&x.FMapUintUint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintUint8 != nil {
			x.FptrMapUintUint8 = nil
		}
	} else {
		if x.FptrMapUintUint8 == nil {
			x.FptrMapUintUint8 = new(map[uint]uint8)
		}

		if false {
		} else {
			h.decMapuintuint8((*map[uint]uint8)(x.FptrMapUintUint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintUint16 = nil
	} else {
		if false {
		} else {
			h.decMapuintuint16((*map[uint]uint16)(&x.FMapUintUint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintUint16 != nil {
			x.FptrMapUintUint16 = nil
		}
	} else {
		if x.FptrMapUintUint16 == nil {
			x.FptrMapUintUint16 = new(map[uint]uint16)
		}

		if false {
		} else {
			h.decMapuintuint16((*map[uint]uint16)(x.FptrMapUintUint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintUint32 = nil
	} else {
		if false {
		} else {
			h.decMapuintuint32((*map[uint]uint32)(&x.FMapUintUint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintUint32 != nil {
			x.FptrMapUintUint32 = nil
		}
	} else {
		if x.FptrMapUintUint32 == nil {
			x.FptrMapUintUint32 = new(map[uint]uint32)
		}

		if false {
		} else {
			h.decMapuintuint32((*map[uint]uint32)(x.FptrMapUintUint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintUint64 = nil
	} else {
		if false {
		} else {
			h.decMapuintuint64((*map[uint]uint64)(&x.FMapUintUint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintUint64 != nil {
			x.FptrMapUintUint64 = nil
		}
	} else {
		if x.FptrMapUintUint64 == nil {
			x.FptrMapUintUint64 = new(map[uint]uint64)
		}

		if false {
		} else {
			h.decMapuintuint64((*map[uint]uint64)(x.FptrMapUintUint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintUintptr = nil
	} else {
		if false {
		} else {
			h.decMapuintuintptr((*map[uint]uintptr)(&x.FMapUintUintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintUintptr != nil {
			x.FptrMapUintUintptr = nil
		}
	} else {
		if x.FptrMapUintUintptr == nil {
			x.FptrMapUintUintptr = new(map[uint]uintptr)
		}

		if false {
		} else {
			h.decMapuintuintptr((*map[uint]uintptr)(x.FptrMapUintUintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintInt = nil
	} else {
		if false {
		} else {
			h.decMapuintint((*map[uint]int)(&x.FMapUintInt), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintInt != nil {
			x.FptrMapUintInt = nil
		}
	} else {
		if x.FptrMapUintInt == nil {
			x.FptrMapUintInt = new(map[uint]int)
		}

		if false {
		} else {
			h.decMapuintint((*map[uint]int)(x.FptrMapUintInt), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintInt8 = nil
	} else {
		if false {
		} else {
			h.decMapuintint8((*map[uint]int8)(&x.FMapUintInt8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintInt8 != nil {
			x.FptrMapUintInt8 = nil
		}
	} else {
		if x.FptrMapUintInt8 == nil {
			x.FptrMapUintInt8 = new(map[uint]int8)
		}

		if false {
		} else {
			h.decMapuintint8((*map[uint]int8)(x.FptrMapUintInt8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintInt16 = nil
	} else {
		if false {
		} else {
			h.decMapuintint16((*map[uint]int16)(&x.FMapUintInt16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintInt16 != nil {
			x.FptrMapUintInt16 = nil
		}
	} else {
		if x.FptrMapUintInt16 == nil {
			x.FptrMapUintInt16 = new(map[uint]int16)
		}

		if false {
		} else {
			h.decMapuintint16((*map[uint]int16)(x.FptrMapUintInt16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintInt32 = nil
	} else {
		if false {
		} else {
			h.decMapuintint32((*map[uint]int32)(&x.FMapUintInt32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintInt32 != nil {
			x.FptrMapUintInt32 = nil
		}
	} else {
		if x.FptrMapUintInt32 == nil {
			x.FptrMapUintInt32 = new(map[uint]int32)
		}

		if false {
		} else {
			h.decMapuintint32((*map[uint]int32)(x.FptrMapUintInt32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintInt64 = nil
	} else {
		if false {
		} else {
			h.decMapuintint64((*map[uint]int64)(&x.FMapUintInt64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintInt64 != nil {
			x.FptrMapUintInt64 = nil
		}
	} else {
		if x.FptrMapUintInt64 == nil {
			x.FptrMapUintInt64 = new(map[uint]int64)
		}

		if false {
		} else {
			h.decMapuintint64((*map[uint]int64)(x.FptrMapUintInt64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintFloat32 = nil
	} else {
		if false {
		} else {
			h.decMapuintfloat32((*map[uint]float32)(&x.FMapUintFloat32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintFloat32 != nil {
			x.FptrMapUintFloat32 = nil
		}
	} else {
		if x.FptrMapUintFloat32 == nil {
			x.FptrMapUintFloat32 = new(map[uint]float32)
		}

		if false {
		} else {
			h.decMapuintfloat32((*map[uint]float32)(x.FptrMapUintFloat32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintFloat64 = nil
	} else {
		if false {
		} else {
			h.decMapuintfloat64((*map[uint]float64)(&x.FMapUintFloat64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintFloat64 != nil {
			x.FptrMapUintFloat64 = nil
		}
	} else {
		if x.FptrMapUintFloat64 == nil {
			x.FptrMapUintFloat64 = new(map[uint]float64)
		}

		if false {
		} else {
			h.decMapuintfloat64((*map[uint]float64)(x.FptrMapUintFloat64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintBool = nil
	} else {
		if false {
		} else {
			h.decMapuintbool((*map[uint]bool)(&x.FMapUintBool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintBool != nil {
			x.FptrMapUintBool = nil
		}
	} else {
		if x.FptrMapUintBool == nil {
			x.FptrMapUintBool = new(map[uint]bool)
		}

		if false {
		} else {
			h.decMapuintbool((*map[uint]bool)(x.FptrMapUintBool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Intf = nil
	} else {
		if false {
		} else {
			h.decMapuint8Interface((*map[uint8]interface{})(&x.FMapUint8Intf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint8Intf != nil {
			x.FptrMapUint8Intf = nil
		}
	} else {
		if x.FptrMapUint8Intf == nil {
			x.FptrMapUint8Intf = new(map[uint8]interface{})
		}

		if false {
		} else {
			h.decMapuint8Interface((*map[uint8]interface{})(x.FptrMapUint8Intf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8String = nil
	} else {
		if false {
		} else {
			h.decMapuint8string((*map[uint8]string)(&x.FMapUint8String), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint8String != nil {
			x.FptrMapUint8String = nil
		}
	} else {
		if x.FptrMapUint8String == nil {
			x.FptrMapUint8String = new(map[uint8]string)
		}

		if false {
		} else {
			h.decMapuint8string((*map[uint8]string)(x.FptrMapUint8String), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Uint = nil
	} else {
		if false {
		} else {
			h.decMapuint8uint((*map[uint8]uint)(&x.FMapUint8Uint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint8Uint != nil {
			x.FptrMapUint8Uint = nil
		}
	} else {
		if x.FptrMapUint8Uint == nil {
			x.FptrMapUint8Uint = new(map[uint8]uint)
		}

		if false {
		} else {
			h.decMapuint8uint((*map[uint8]uint)(x.FptrMapUint8Uint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Uint8 = nil
	} else {
		if false {
		} else {
			h.decMapuint8uint8((*map[uint8]uint8)(&x.FMapUint8Uint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint8Uint8 != nil {
			x.FptrMapUint8Uint8 = nil
		}
	} else {
		if x.FptrMapUint8Uint8 == nil {
			x.FptrMapUint8Uint8 = new(map[uint8]uint8)
		}

		if false {
		} else {
			h.decMapuint8uint8((*map[uint8]uint8)(x.FptrMapUint8Uint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Uint16 = nil
	} else {
		if false {
		} else {
			h.decMapuint8uint16((*map[uint8]uint16)(&x.FMapUint8Uint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint8Uint16 != nil {
			x.FptrMapUint8Uint16 = nil
		}
	} else {
		if x.FptrMapUint8Uint16 == nil {
			x.FptrMapUint8Uint16 = new(map[uint8]uint16)
		}

		if false {
		} else {
			h.decMapuint8uint16((*map[uint8]uint16)(x.FptrMapUint8Uint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Uint32 = nil
	} else {
		if false {
		} else {
			h.decMapuint8uint32((*map[uint8]uint32)(&x.FMapUint8Uint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint8Uint32 != nil {
			x.FptrMapUint8Uint32 = nil
		}
	} else {
		if x.FptrMapUint8Uint32 == nil {
			x.FptrMapUint8Uint32 = new(map[uint8]uint32)
		}

		if false {
		} else {
			h.decMapuint8uint32((*map[uint8]uint32)(x.FptrMapUint8Uint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Uint64 = nil
	} else {
		if false {
		} else {
			h.decMapuint8uint64((*map[uint8]uint64)(&x.FMapUint8Uint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint8Uint64 != nil {
			x.FptrMapUint8Uint64 = nil
		}
	} else {
		if x.FptrMapUint8Uint64 == nil {
			x.FptrMapUint8Uint64 = new(map[uint8]uint64)
		}

		if false {
		} else {
			h.decMapuint8uint64((*map[uint8]uint64)(x.FptrMapUint8Uint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Uintptr = nil
	} else {
		if false {
		} else {
			h.decMapuint8uintptr((*map[uint8]uintptr)(&x.FMapUint8Uintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint8Uintptr != nil {
			x.FptrMapUint8Uintptr = nil
		}
	} else {
		if x.FptrMapUint8Uintptr == nil {
			x.FptrMapUint8Uintptr = new(map[uint8]uintptr)
		}

		if false {
		} else {
			h.decMapuint8uintptr((*map[uint8]uintptr)(x.FptrMapUint8Uintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Int = nil
	} else {
		if false {
		} else {
			h.decMapuint8int((*map[uint8]int)(&x.FMapUint8Int), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint8Int != nil {
			x.FptrMapUint8Int = nil
		}
	} else {
		if x.FptrMapUint8Int == nil {
			x.FptrMapUint8Int = new(map[uint8]int)
		}

		if false {
		} else {
			h.decMapuint8int((*map[uint8]int)(x.FptrMapUint8Int), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Int8 = nil
	} else {
		if false {
		} else {
			h.decMapuint8int8((*map[uint8]int8)(&x.FMapUint8Int8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint8Int8 != nil {
			x.FptrMapUint8Int8 = nil
		}
	} else {
		if x.FptrMapUint8Int8 == nil {
			x.FptrMapUint8Int8 = new(map[uint8]int8)
		}

		if false {
		} else {
			h.decMapuint8int8((*map[uint8]int8)(x.FptrMapUint8Int8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Int16 = nil
	} else {
		if false {
		} else {
			h.decMapuint8int16((*map[uint8]int16)(&x.FMapUint8Int16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint8Int16 != nil {
			x.FptrMapUint8Int16 = nil
		}
	} else {
		if x.FptrMapUint8Int16 == nil {
			x.FptrMapUint8Int16 = new(map[uint8]int16)
		}

		if false {
		} else {
			h.decMapuint8int16((*map[uint8]int16)(x.FptrMapUint8Int16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Int32 = nil
	} else {
		if false {
		} else {
			h.decMapuint8int32((*map[uint8]int32)(&x.FMapUint8Int32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint8Int32 != nil {
			x.FptrMapUint8Int32 = nil
		}
	} else {
		if x.FptrMapUint8Int32 == nil {
			x.FptrMapUint8Int32 = new(map[uint8]int32)
		}

		if false {
		} else {
			h.decMapuint8int32((*map[uint8]int32)(x.FptrMapUint8Int32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Int64 = nil
	} else {
		if false {
		} else {
			h.decMapuint8int64((*map[uint8]int64)(&x.FMapUint8Int64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint8Int64 != nil {
			x.FptrMapUint8Int64 = nil
		}
	} else {
		if x.FptrMapUint8Int64 == nil {
			x.FptrMapUint8Int64 = new(map[uint8]int64)
		}

		if false {
		} else {
			h.decMapuint8int64((*map[uint8]int64)(x.FptrMapUint8Int64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Float32 = nil
	} else {
		if false {
		} else {
			h.decMapuint8float32((*map[uint8]float32)(&x.FMapUint8Float32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint8Float32 != nil {
			x.FptrMapUint8Float32 = nil
		}
	} else {
		if x.FptrMapUint8Float32 == nil {
			x.FptrMapUint8Float32 = new(map[uint8]float32)
		}

		if false {
		} else {
			h.decMapuint8float32((*map[uint8]float32)(x.FptrMapUint8Float32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Float64 = nil
	} else {
		if false {
		} else {
			h.decMapuint8float64((*map[uint8]float64)(&x.FMapUint8Float64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint8Float64 != nil {
			x.FptrMapUint8Float64 = nil
		}
	} else {
		if x.FptrMapUint8Float64 == nil {
			x.FptrMapUint8Float64 = new(map[uint8]float64)
		}

		if false {
		} else {
			h.decMapuint8float64((*map[uint8]float64)(x.FptrMapUint8Float64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint8Bool = nil
	} else {
		if false {
		} else {
			h.decMapuint8bool((*map[uint8]bool)(&x.FMapUint8Bool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint8Bool != nil {
			x.FptrMapUint8Bool = nil
		}
	} else {
		if x.FptrMapUint8Bool == nil {
			x.FptrMapUint8Bool = new(map[uint8]bool)
		}

		if false {
		} else {
			h.decMapuint8bool((*map[uint8]bool)(x.FptrMapUint8Bool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint16Intf = nil
	} else {
		if false {
		} else {
			h.decMapuint16Interface((*map[uint16]interface{})(&x.FMapUint16Intf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint16Intf != nil {
			x.FptrMapUint16Intf = nil
		}
	} else {
		if x.FptrMapUint16Intf == nil {
			x.FptrMapUint16Intf = new(map[uint16]interface{})
		}

		if false {
		} else {
			h.decMapuint16Interface((*map[uint16]interface{})(x.FptrMapUint16Intf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint16String = nil
	} else {
		if false {
		} else {
			h.decMapuint16string((*map[uint16]string)(&x.FMapUint16String), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint16String != nil {
			x.FptrMapUint16String = nil
		}
	} else {
		if x.FptrMapUint16String == nil {
			x.FptrMapUint16String = new(map[uint16]string)
		}

		if false {
		} else {
			h.decMapuint16string((*map[uint16]string)(x.FptrMapUint16String), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint16Uint = nil
	} else {
		if false {
		} else {
			h.decMapuint16uint((*map[uint16]uint)(&x.FMapUint16Uint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint16Uint != nil {
			x.FptrMapUint16Uint = nil
		}
	} else {
		if x.FptrMapUint16Uint == nil {
			x.FptrMapUint16Uint = new(map[uint16]uint)
		}

		if false {
		} else {
			h.decMapuint16uint((*map[uint16]uint)(x.FptrMapUint16Uint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint16Uint8 = nil
	} else {
		if false {
		} else {
			h.decMapuint16uint8((*map[uint16]uint8)(&x.FMapUint16Uint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint16Uint8 != nil {
			x.FptrMapUint16Uint8 = nil
		}
	} else {
		if x.FptrMapUint16Uint8 == nil {
			x.FptrMapUint16Uint8 = new(map[uint16]uint8)
		}

		if false {
		} else {
			h.decMapuint16uint8((*map[uint16]uint8)(x.FptrMapUint16Uint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint16Uint16 = nil
	} else {
		if false {
		} else {
			h.decMapuint16uint16((*map[uint16]uint16)(&x.FMapUint16Uint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint16Uint16 != nil {
			x.FptrMapUint16Uint16 = nil
		}
	} else {
		if x.FptrMapUint16Uint16 == nil {
			x.FptrMapUint16Uint16 = new(map[uint16]uint16)
		}

		if false {
		} else {
			h.decMapuint16uint16((*map[uint16]uint16)(x.FptrMapUint16Uint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint16Uint32 = nil
	} else {
		if false {
		} else {
			h.decMapuint16uint32((*map[uint16]uint32)(&x.FMapUint16Uint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint16Uint32 != nil {
			x.FptrMapUint16Uint32 = nil
		}
	} else {
		if x.FptrMapUint16Uint32 == nil {
			x.FptrMapUint16Uint32 = new(map[uint16]uint32)
		}

		if false {
		} else {
			h.decMapuint16uint32((*map[uint16]uint32)(x.FptrMapUint16Uint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint16Uint64 = nil
	} else {
		if false {
		} else {
			h.decMapuint16uint64((*map[uint16]uint64)(&x.FMapUint16Uint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint16Uint64 != nil {
			x.FptrMapUint16Uint64 = nil
		}
	} else {
		if x.FptrMapUint16Uint64 == nil {
			x.FptrMapUint16Uint64 = new(map[uint16]uint64)
		}

		if false {
		} else {
			h.decMapuint16uint64((*map[uint16]uint64)(x.FptrMapUint16Uint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint16Uintptr = nil
	} else {
		if false {
		} else {
			h.decMapuint16uintptr((*map[uint16]uintptr)(&x.FMapUint16Uintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint16Uintptr != nil {
			x.FptrMapUint16Uintptr = nil
		}
	} else {
		if x.FptrMapUint16Uintptr == nil {
			x.FptrMapUint16Uintptr = new(map[uint16]uintptr)
		}

		if false {
		} else {
			h.decMapuint16uintptr((*map[uint16]uintptr)(x.FptrMapUint16Uintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint16Int = nil
	} else {
		if false {
		} else {
			h.decMapuint16int((*map[uint16]int)(&x.FMapUint16Int), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint16Int != nil {
			x.FptrMapUint16Int = nil
		}
	} else {
		if x.FptrMapUint16Int == nil {
			x.FptrMapUint16Int = new(map[uint16]int)
		}

		if false {
		} else {
			h.decMapuint16int((*map[uint16]int)(x.FptrMapUint16Int), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint16Int8 = nil
	} else {
		if false {
		} else {
			h.decMapuint16int8((*map[uint16]int8)(&x.FMapUint16Int8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint16Int8 != nil {
			x.FptrMapUint16Int8 = nil
		}
	} else {
		if x.FptrMapUint16Int8 == nil {
			x.FptrMapUint16Int8 = new(map[uint16]int8)
		}

		if false {
		} else {
			h.decMapuint16int8((*map[uint16]int8)(x.FptrMapUint16Int8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint16Int16 = nil
	} else {
		if false {
		} else {
			h.decMapuint16int16((*map[uint16]int16)(&x.FMapUint16Int16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint16Int16 != nil {
			x.FptrMapUint16Int16 = nil
		}
	} else {
		if x.FptrMapUint16Int16 == nil {
			x.FptrMapUint16Int16 = new(map[uint16]int16)
		}

		if false {
		} else {
			h.decMapuint16int16((*map[uint16]int16)(x.FptrMapUint16Int16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint16Int32 = nil
	} else {
		if false {
		} else {
			h.decMapuint16int32((*map[uint16]int32)(&x.FMapUint16Int32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint16Int32 != nil {
			x.FptrMapUint16Int32 = nil
		}
	} else {
		if x.FptrMapUint16Int32 == nil {
			x.FptrMapUint16Int32 = new(map[uint16]int32)
		}

		if false {
		} else {
			h.decMapuint16int32((*map[uint16]int32)(x.FptrMapUint16Int32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint16Int64 = nil
	} else {
		if false {
		} else {
			h.decMapuint16int64((*map[uint16]int64)(&x.FMapUint16Int64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint16Int64 != nil {
			x.FptrMapUint16Int64 = nil
		}
	} else {
		if x.FptrMapUint16Int64 == nil {
			x.FptrMapUint16Int64 = new(map[uint16]int64)
		}

		if false {
		} else {
			h.decMapuint16int64((*map[uint16]int64)(x.FptrMapUint16Int64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint16Float32 = nil
	} else {
		if false {
		} else {
			h.decMapuint16float32((*map[uint16]float32)(&x.FMapUint16Float32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint16Float32 != nil {
			x.FptrMapUint16Float32 = nil
		}
	} else {
		if x.FptrMapUint16Float32 == nil {
			x.FptrMapUint16Float32 = new(map[uint16]float32)
		}

		if false {
		} else {
			h.decMapuint16float32((*map[uint16]float32)(x.FptrMapUint16Float32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint16Float64 = nil
	} else {
		if false {
		} else {
			h.decMapuint16float64((*map[uint16]float64)(&x.FMapUint16Float64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint16Float64 != nil {
			x.FptrMapUint16Float64 = nil
		}
	} else {
		if x.FptrMapUint16Float64 == nil {
			x.FptrMapUint16Float64 = new(map[uint16]float64)
		}

		if false {
		} else {
			h.decMapuint16float64((*map[uint16]float64)(x.FptrMapUint16Float64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint16Bool = nil
	} else {
		if false {
		} else {
			h.decMapuint16bool((*map[uint16]bool)(&x.FMapUint16Bool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint16Bool != nil {
			x.FptrMapUint16Bool = nil
		}
	} else {
		if x.FptrMapUint16Bool == nil {
			x.FptrMapUint16Bool = new(map[uint16]bool)
		}

		if false {
		} else {
			h.decMapuint16bool((*map[uint16]bool)(x.FptrMapUint16Bool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint32Intf = nil
	} else {
		if false {
		} else {
			h.decMapuint32Interface((*map[uint32]interface{})(&x.FMapUint32Intf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint32Intf != nil {
			x.FptrMapUint32Intf = nil
		}
	} else {
		if x.FptrMapUint32Intf == nil {
			x.FptrMapUint32Intf = new(map[uint32]interface{})
		}

		if false {
		} else {
			h.decMapuint32Interface((*map[uint32]interface{})(x.FptrMapUint32Intf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint32String = nil
	} else {
		if false {
		} else {
			h.decMapuint32string((*map[uint32]string)(&x.FMapUint32String), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint32String != nil {
			x.FptrMapUint32String = nil
		}
	} else {
		if x.FptrMapUint32String == nil {
			x.FptrMapUint32String = new(map[uint32]string)
		}

		if false {
		} else {
			h.decMapuint32string((*map[uint32]string)(x.FptrMapUint32String), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint32Uint = nil
	} else {
		if false {
		} else {
			h.decMapuint32uint((*map[uint32]uint)(&x.FMapUint32Uint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint32Uint != nil {
			x.FptrMapUint32Uint = nil
		}
	} else {
		if x.FptrMapUint32Uint == nil {
			x.FptrMapUint32Uint = new(map[uint32]uint)
		}

		if false {
		} else {
			h.decMapuint32uint((*map[uint32]uint)(x.FptrMapUint32Uint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint32Uint8 = nil
	} else {
		if false {
		} else {
			h.decMapuint32uint8((*map[uint32]uint8)(&x.FMapUint32Uint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint32Uint8 != nil {
			x.FptrMapUint32Uint8 = nil
		}
	} else {
		if x.FptrMapUint32Uint8 == nil {
			x.FptrMapUint32Uint8 = new(map[uint32]uint8)
		}

		if false {
		} else {
			h.decMapuint32uint8((*map[uint32]uint8)(x.FptrMapUint32Uint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint32Uint16 = nil
	} else {
		if false {
		} else {
			h.decMapuint32uint16((*map[uint32]uint16)(&x.FMapUint32Uint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint32Uint16 != nil {
			x.FptrMapUint32Uint16 = nil
		}
	} else {
		if x.FptrMapUint32Uint16 == nil {
			x.FptrMapUint32Uint16 = new(map[uint32]uint16)
		}

		if false {
		} else {
			h.decMapuint32uint16((*map[uint32]uint16)(x.FptrMapUint32Uint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint32Uint32 = nil
	} else {
		if false {
		} else {
			h.decMapuint32uint32((*map[uint32]uint32)(&x.FMapUint32Uint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint32Uint32 != nil {
			x.FptrMapUint32Uint32 = nil
		}
	} else {
		if x.FptrMapUint32Uint32 == nil {
			x.FptrMapUint32Uint32 = new(map[uint32]uint32)
		}

		if false {
		} else {
			h.decMapuint32uint32((*map[uint32]uint32)(x.FptrMapUint32Uint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint32Uint64 = nil
	} else {
		if false {
		} else {
			h.decMapuint32uint64((*map[uint32]uint64)(&x.FMapUint32Uint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint32Uint64 != nil {
			x.FptrMapUint32Uint64 = nil
		}
	} else {
		if x.FptrMapUint32Uint64 == nil {
			x.FptrMapUint32Uint64 = new(map[uint32]uint64)
		}

		if false {
		} else {
			h.decMapuint32uint64((*map[uint32]uint64)(x.FptrMapUint32Uint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint32Uintptr = nil
	} else {
		if false {
		} else {
			h.decMapuint32uintptr((*map[uint32]uintptr)(&x.FMapUint32Uintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint32Uintptr != nil {
			x.FptrMapUint32Uintptr = nil
		}
	} else {
		if x.FptrMapUint32Uintptr == nil {
			x.FptrMapUint32Uintptr = new(map[uint32]uintptr)
		}

		if false {
		} else {
			h.decMapuint32uintptr((*map[uint32]uintptr)(x.FptrMapUint32Uintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint32Int = nil
	} else {
		if false {
		} else {
			h.decMapuint32int((*map[uint32]int)(&x.FMapUint32Int), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint32Int != nil {
			x.FptrMapUint32Int = nil
		}
	} else {
		if x.FptrMapUint32Int == nil {
			x.FptrMapUint32Int = new(map[uint32]int)
		}

		if false {
		} else {
			h.decMapuint32int((*map[uint32]int)(x.FptrMapUint32Int), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint32Int8 = nil
	} else {
		if false {
		} else {
			h.decMapuint32int8((*map[uint32]int8)(&x.FMapUint32Int8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint32Int8 != nil {
			x.FptrMapUint32Int8 = nil
		}
	} else {
		if x.FptrMapUint32Int8 == nil {
			x.FptrMapUint32Int8 = new(map[uint32]int8)
		}

		if false {
		} else {
			h.decMapuint32int8((*map[uint32]int8)(x.FptrMapUint32Int8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint32Int16 = nil
	} else {
		if false {
		} else {
			h.decMapuint32int16((*map[uint32]int16)(&x.FMapUint32Int16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint32Int16 != nil {
			x.FptrMapUint32Int16 = nil
		}
	} else {
		if x.FptrMapUint32Int16 == nil {
			x.FptrMapUint32Int16 = new(map[uint32]int16)
		}

		if false {
		} else {
			h.decMapuint32int16((*map[uint32]int16)(x.FptrMapUint32Int16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint32Int32 = nil
	} else {
		if false {
		} else {
			h.decMapuint32int32((*map[uint32]int32)(&x.FMapUint32Int32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint32Int32 != nil {
			x.FptrMapUint32Int32 = nil
		}
	} else {
		if x.FptrMapUint32Int32 == nil {
			x.FptrMapUint32Int32 = new(map[uint32]int32)
		}

		if false {
		} else {
			h.decMapuint32int32((*map[uint32]int32)(x.FptrMapUint32Int32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint32Int64 = nil
	} else {
		if false {
		} else {
			h.decMapuint32int64((*map[uint32]int64)(&x.FMapUint32Int64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint32Int64 != nil {
			x.FptrMapUint32Int64 = nil
		}
	} else {
		if x.FptrMapUint32Int64 == nil {
			x.FptrMapUint32Int64 = new(map[uint32]int64)
		}

		if false {
		} else {
			h.decMapuint32int64((*map[uint32]int64)(x.FptrMapUint32Int64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint32Float32 = nil
	} else {
		if false {
		} else {
			h.decMapuint32float32((*map[uint32]float32)(&x.FMapUint32Float32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint32Float32 != nil {
			x.FptrMapUint32Float32 = nil
		}
	} else {
		if x.FptrMapUint32Float32 == nil {
			x.FptrMapUint32Float32 = new(map[uint32]float32)
		}

		if false {
		} else {
			h.decMapuint32float32((*map[uint32]float32)(x.FptrMapUint32Float32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint32Float64 = nil
	} else {
		if false {
		} else {
			h.decMapuint32float64((*map[uint32]float64)(&x.FMapUint32Float64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint32Float64 != nil {
			x.FptrMapUint32Float64 = nil
		}
	} else {
		if x.FptrMapUint32Float64 == nil {
			x.FptrMapUint32Float64 = new(map[uint32]float64)
		}

		if false {
		} else {
			h.decMapuint32float64((*map[uint32]float64)(x.FptrMapUint32Float64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint32Bool = nil
	} else {
		if false {
		} else {
			h.decMapuint32bool((*map[uint32]bool)(&x.FMapUint32Bool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint32Bool != nil {
			x.FptrMapUint32Bool = nil
		}
	} else {
		if x.FptrMapUint32Bool == nil {
			x.FptrMapUint32Bool = new(map[uint32]bool)
		}

		if false {
		} else {
			h.decMapuint32bool((*map[uint32]bool)(x.FptrMapUint32Bool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Intf = nil
	} else {
		if false {
		} else {
			h.decMapuint64Interface((*map[uint64]interface{})(&x.FMapUint64Intf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint64Intf != nil {
			x.FptrMapUint64Intf = nil
		}
	} else {
		if x.FptrMapUint64Intf == nil {
			x.FptrMapUint64Intf = new(map[uint64]interface{})
		}

		if false {
		} else {
			h.decMapuint64Interface((*map[uint64]interface{})(x.FptrMapUint64Intf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64String = nil
	} else {
		if false {
		} else {
			h.decMapuint64string((*map[uint64]string)(&x.FMapUint64String), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint64String != nil {
			x.FptrMapUint64String = nil
		}
	} else {
		if x.FptrMapUint64String == nil {
			x.FptrMapUint64String = new(map[uint64]string)
		}

		if false {
		} else {
			h.decMapuint64string((*map[uint64]string)(x.FptrMapUint64String), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Uint = nil
	} else {
		if false {
		} else {
			h.decMapuint64uint((*map[uint64]uint)(&x.FMapUint64Uint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint64Uint != nil {
			x.FptrMapUint64Uint = nil
		}
	} else {
		if x.FptrMapUint64Uint == nil {
			x.FptrMapUint64Uint = new(map[uint64]uint)
		}

		if false {
		} else {
			h.decMapuint64uint((*map[uint64]uint)(x.FptrMapUint64Uint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Uint8 = nil
	} else {
		if false {
		} else {
			h.decMapuint64uint8((*map[uint64]uint8)(&x.FMapUint64Uint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint64Uint8 != nil {
			x.FptrMapUint64Uint8 = nil
		}
	} else {
		if x.FptrMapUint64Uint8 == nil {
			x.FptrMapUint64Uint8 = new(map[uint64]uint8)
		}

		if false {
		} else {
			h.decMapuint64uint8((*map[uint64]uint8)(x.FptrMapUint64Uint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Uint16 = nil
	} else {
		if false {
		} else {
			h.decMapuint64uint16((*map[uint64]uint16)(&x.FMapUint64Uint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint64Uint16 != nil {
			x.FptrMapUint64Uint16 = nil
		}
	} else {
		if x.FptrMapUint64Uint16 == nil {
			x.FptrMapUint64Uint16 = new(map[uint64]uint16)
		}

		if false {
		} else {
			h.decMapuint64uint16((*map[uint64]uint16)(x.FptrMapUint64Uint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Uint32 = nil
	} else {
		if false {
		} else {
			h.decMapuint64uint32((*map[uint64]uint32)(&x.FMapUint64Uint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint64Uint32 != nil {
			x.FptrMapUint64Uint32 = nil
		}
	} else {
		if x.FptrMapUint64Uint32 == nil {
			x.FptrMapUint64Uint32 = new(map[uint64]uint32)
		}

		if false {
		} else {
			h.decMapuint64uint32((*map[uint64]uint32)(x.FptrMapUint64Uint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Uint64 = nil
	} else {
		if false {
		} else {
			h.decMapuint64uint64((*map[uint64]uint64)(&x.FMapUint64Uint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint64Uint64 != nil {
			x.FptrMapUint64Uint64 = nil
		}
	} else {
		if x.FptrMapUint64Uint64 == nil {
			x.FptrMapUint64Uint64 = new(map[uint64]uint64)
		}

		if false {
		} else {
			h.decMapuint64uint64((*map[uint64]uint64)(x.FptrMapUint64Uint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Uintptr = nil
	} else {
		if false {
		} else {
			h.decMapuint64uintptr((*map[uint64]uintptr)(&x.FMapUint64Uintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint64Uintptr != nil {
			x.FptrMapUint64Uintptr = nil
		}
	} else {
		if x.FptrMapUint64Uintptr == nil {
			x.FptrMapUint64Uintptr = new(map[uint64]uintptr)
		}

		if false {
		} else {
			h.decMapuint64uintptr((*map[uint64]uintptr)(x.FptrMapUint64Uintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Int = nil
	} else {
		if false {
		} else {
			h.decMapuint64int((*map[uint64]int)(&x.FMapUint64Int), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint64Int != nil {
			x.FptrMapUint64Int = nil
		}
	} else {
		if x.FptrMapUint64Int == nil {
			x.FptrMapUint64Int = new(map[uint64]int)
		}

		if false {
		} else {
			h.decMapuint64int((*map[uint64]int)(x.FptrMapUint64Int), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Int8 = nil
	} else {
		if false {
		} else {
			h.decMapuint64int8((*map[uint64]int8)(&x.FMapUint64Int8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint64Int8 != nil {
			x.FptrMapUint64Int8 = nil
		}
	} else {
		if x.FptrMapUint64Int8 == nil {
			x.FptrMapUint64Int8 = new(map[uint64]int8)
		}

		if false {
		} else {
			h.decMapuint64int8((*map[uint64]int8)(x.FptrMapUint64Int8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Int16 = nil
	} else {
		if false {
		} else {
			h.decMapuint64int16((*map[uint64]int16)(&x.FMapUint64Int16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint64Int16 != nil {
			x.FptrMapUint64Int16 = nil
		}
	} else {
		if x.FptrMapUint64Int16 == nil {
			x.FptrMapUint64Int16 = new(map[uint64]int16)
		}

		if false {
		} else {
			h.decMapuint64int16((*map[uint64]int16)(x.FptrMapUint64Int16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Int32 = nil
	} else {
		if false {
		} else {
			h.decMapuint64int32((*map[uint64]int32)(&x.FMapUint64Int32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint64Int32 != nil {
			x.FptrMapUint64Int32 = nil
		}
	} else {
		if x.FptrMapUint64Int32 == nil {
			x.FptrMapUint64Int32 = new(map[uint64]int32)
		}

		if false {
		} else {
			h.decMapuint64int32((*map[uint64]int32)(x.FptrMapUint64Int32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Int64 = nil
	} else {
		if false {
		} else {
			h.decMapuint64int64((*map[uint64]int64)(&x.FMapUint64Int64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint64Int64 != nil {
			x.FptrMapUint64Int64 = nil
		}
	} else {
		if x.FptrMapUint64Int64 == nil {
			x.FptrMapUint64Int64 = new(map[uint64]int64)
		}

		if false {
		} else {
			h.decMapuint64int64((*map[uint64]int64)(x.FptrMapUint64Int64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Float32 = nil
	} else {
		if false {
		} else {
			h.decMapuint64float32((*map[uint64]float32)(&x.FMapUint64Float32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint64Float32 != nil {
			x.FptrMapUint64Float32 = nil
		}
	} else {
		if x.FptrMapUint64Float32 == nil {
			x.FptrMapUint64Float32 = new(map[uint64]float32)
		}

		if false {
		} else {
			h.decMapuint64float32((*map[uint64]float32)(x.FptrMapUint64Float32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Float64 = nil
	} else {
		if false {
		} else {
			h.decMapuint64float64((*map[uint64]float64)(&x.FMapUint64Float64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint64Float64 != nil {
			x.FptrMapUint64Float64 = nil
		}
	} else {
		if x.FptrMapUint64Float64 == nil {
			x.FptrMapUint64Float64 = new(map[uint64]float64)
		}

		if false {
		} else {
			h.decMapuint64float64((*map[uint64]float64)(x.FptrMapUint64Float64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUint64Bool = nil
	} else {
		if false {
		} else {
			h.decMapuint64bool((*map[uint64]bool)(&x.FMapUint64Bool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUint64Bool != nil {
			x.FptrMapUint64Bool = nil
		}
	} else {
		if x.FptrMapUint64Bool == nil {
			x.FptrMapUint64Bool = new(map[uint64]bool)
		}

		if false {
		} else {
			h.decMapuint64bool((*map[uint64]bool)(x.FptrMapUint64Bool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintptrIntf = nil
	} else {
		if false {
		} else {
			h.decMapuintptrInterface((*map[uintptr]interface{})(&x.FMapUintptrIntf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintptrIntf != nil {
			x.FptrMapUintptrIntf = nil
		}
	} else {
		if x.FptrMapUintptrIntf == nil {
			x.FptrMapUintptrIntf = new(map[uintptr]interface{})
		}

		if false {
		} else {
			h.decMapuintptrInterface((*map[uintptr]interface{})(x.FptrMapUintptrIntf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintptrString = nil
	} else {
		if false {
		} else {
			h.decMapuintptrstring((*map[uintptr]string)(&x.FMapUintptrString), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintptrString != nil {
			x.FptrMapUintptrString = nil
		}
	} else {
		if x.FptrMapUintptrString == nil {
			x.FptrMapUintptrString = new(map[uintptr]string)
		}

		if false {
		} else {
			h.decMapuintptrstring((*map[uintptr]string)(x.FptrMapUintptrString), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintptrUint = nil
	} else {
		if false {
		} else {
			h.decMapuintptruint((*map[uintptr]uint)(&x.FMapUintptrUint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintptrUint != nil {
			x.FptrMapUintptrUint = nil
		}
	} else {
		if x.FptrMapUintptrUint == nil {
			x.FptrMapUintptrUint = new(map[uintptr]uint)
		}

		if false {
		} else {
			h.decMapuintptruint((*map[uintptr]uint)(x.FptrMapUintptrUint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintptrUint8 = nil
	} else {
		if false {
		} else {
			h.decMapuintptruint8((*map[uintptr]uint8)(&x.FMapUintptrUint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintptrUint8 != nil {
			x.FptrMapUintptrUint8 = nil
		}
	} else {
		if x.FptrMapUintptrUint8 == nil {
			x.FptrMapUintptrUint8 = new(map[uintptr]uint8)
		}

		if false {
		} else {
			h.decMapuintptruint8((*map[uintptr]uint8)(x.FptrMapUintptrUint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintptrUint16 = nil
	} else {
		if false {
		} else {
			h.decMapuintptruint16((*map[uintptr]uint16)(&x.FMapUintptrUint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintptrUint16 != nil {
			x.FptrMapUintptrUint16 = nil
		}
	} else {
		if x.FptrMapUintptrUint16 == nil {
			x.FptrMapUintptrUint16 = new(map[uintptr]uint16)
		}

		if false {
		} else {
			h.decMapuintptruint16((*map[uintptr]uint16)(x.FptrMapUintptrUint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintptrUint32 = nil
	} else {
		if false {
		} else {
			h.decMapuintptruint32((*map[uintptr]uint32)(&x.FMapUintptrUint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintptrUint32 != nil {
			x.FptrMapUintptrUint32 = nil
		}
	} else {
		if x.FptrMapUintptrUint32 == nil {
			x.FptrMapUintptrUint32 = new(map[uintptr]uint32)
		}

		if false {
		} else {
			h.decMapuintptruint32((*map[uintptr]uint32)(x.FptrMapUintptrUint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintptrUint64 = nil
	} else {
		if false {
		} else {
			h.decMapuintptruint64((*map[uintptr]uint64)(&x.FMapUintptrUint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintptrUint64 != nil {
			x.FptrMapUintptrUint64 = nil
		}
	} else {
		if x.FptrMapUintptrUint64 == nil {
			x.FptrMapUintptrUint64 = new(map[uintptr]uint64)
		}

		if false {
		} else {
			h.decMapuintptruint64((*map[uintptr]uint64)(x.FptrMapUintptrUint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintptrUintptr = nil
	} else {
		if false {
		} else {
			h.decMapuintptruintptr((*map[uintptr]uintptr)(&x.FMapUintptrUintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintptrUintptr != nil {
			x.FptrMapUintptrUintptr = nil
		}
	} else {
		if x.FptrMapUintptrUintptr == nil {
			x.FptrMapUintptrUintptr = new(map[uintptr]uintptr)
		}

		if false {
		} else {
			h.decMapuintptruintptr((*map[uintptr]uintptr)(x.FptrMapUintptrUintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintptrInt = nil
	} else {
		if false {
		} else {
			h.decMapuintptrint((*map[uintptr]int)(&x.FMapUintptrInt), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintptrInt != nil {
			x.FptrMapUintptrInt = nil
		}
	} else {
		if x.FptrMapUintptrInt == nil {
			x.FptrMapUintptrInt = new(map[uintptr]int)
		}

		if false {
		} else {
			h.decMapuintptrint((*map[uintptr]int)(x.FptrMapUintptrInt), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintptrInt8 = nil
	} else {
		if false {
		} else {
			h.decMapuintptrint8((*map[uintptr]int8)(&x.FMapUintptrInt8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintptrInt8 != nil {
			x.FptrMapUintptrInt8 = nil
		}
	} else {
		if x.FptrMapUintptrInt8 == nil {
			x.FptrMapUintptrInt8 = new(map[uintptr]int8)
		}

		if false {
		} else {
			h.decMapuintptrint8((*map[uintptr]int8)(x.FptrMapUintptrInt8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintptrInt16 = nil
	} else {
		if false {
		} else {
			h.decMapuintptrint16((*map[uintptr]int16)(&x.FMapUintptrInt16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintptrInt16 != nil {
			x.FptrMapUintptrInt16 = nil
		}
	} else {
		if x.FptrMapUintptrInt16 == nil {
			x.FptrMapUintptrInt16 = new(map[uintptr]int16)
		}

		if false {
		} else {
			h.decMapuintptrint16((*map[uintptr]int16)(x.FptrMapUintptrInt16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintptrInt32 = nil
	} else {
		if false {
		} else {
			h.decMapuintptrint32((*map[uintptr]int32)(&x.FMapUintptrInt32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintptrInt32 != nil {
			x.FptrMapUintptrInt32 = nil
		}
	} else {
		if x.FptrMapUintptrInt32 == nil {
			x.FptrMapUintptrInt32 = new(map[uintptr]int32)
		}

		if false {
		} else {
			h.decMapuintptrint32((*map[uintptr]int32)(x.FptrMapUintptrInt32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintptrInt64 = nil
	} else {
		if false {
		} else {
			h.decMapuintptrint64((*map[uintptr]int64)(&x.FMapUintptrInt64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintptrInt64 != nil {
			x.FptrMapUintptrInt64 = nil
		}
	} else {
		if x.FptrMapUintptrInt64 == nil {
			x.FptrMapUintptrInt64 = new(map[uintptr]int64)
		}

		if false {
		} else {
			h.decMapuintptrint64((*map[uintptr]int64)(x.FptrMapUintptrInt64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintptrFloat32 = nil
	} else {
		if false {
		} else {
			h.decMapuintptrfloat32((*map[uintptr]float32)(&x.FMapUintptrFloat32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintptrFloat32 != nil {
			x.FptrMapUintptrFloat32 = nil
		}
	} else {
		if x.FptrMapUintptrFloat32 == nil {
			x.FptrMapUintptrFloat32 = new(map[uintptr]float32)
		}

		if false {
		} else {
			h.decMapuintptrfloat32((*map[uintptr]float32)(x.FptrMapUintptrFloat32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintptrFloat64 = nil
	} else {
		if false {
		} else {
			h.decMapuintptrfloat64((*map[uintptr]float64)(&x.FMapUintptrFloat64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintptrFloat64 != nil {
			x.FptrMapUintptrFloat64 = nil
		}
	} else {
		if x.FptrMapUintptrFloat64 == nil {
			x.FptrMapUintptrFloat64 = new(map[uintptr]float64)
		}

		if false {
		} else {
			h.decMapuintptrfloat64((*map[uintptr]float64)(x.FptrMapUintptrFloat64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapUintptrBool = nil
	} else {
		if false {
		} else {
			h.decMapuintptrbool((*map[uintptr]bool)(&x.FMapUintptrBool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapUintptrBool != nil {
			x.FptrMapUintptrBool = nil
		}
	} else {
		if x.FptrMapUintptrBool == nil {
			x.FptrMapUintptrBool = new(map[uintptr]bool)
		}

		if false {
		} else {
			h.decMapuintptrbool((*map[uintptr]bool)(x.FptrMapUintptrBool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntIntf = nil
	} else {
		if false {
		} else {
			h.decMapintInterface((*map[int]interface{})(&x.FMapIntIntf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntIntf != nil {
			x.FptrMapIntIntf = nil
		}
	} else {
		if x.FptrMapIntIntf == nil {
			x.FptrMapIntIntf = new(map[int]interface{})
		}

		if false {
		} else {
			h.decMapintInterface((*map[int]interface{})(x.FptrMapIntIntf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntString = nil
	} else {
		if false {
		} else {
			h.decMapintstring((*map[int]string)(&x.FMapIntString), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntString != nil {
			x.FptrMapIntString = nil
		}
	} else {
		if x.FptrMapIntString == nil {
			x.FptrMapIntString = new(map[int]string)
		}

		if false {
		} else {
			h.decMapintstring((*map[int]string)(x.FptrMapIntString), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntUint = nil
	} else {
		if false {
		} else {
			h.decMapintuint((*map[int]uint)(&x.FMapIntUint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntUint != nil {
			x.FptrMapIntUint = nil
		}
	} else {
		if x.FptrMapIntUint == nil {
			x.FptrMapIntUint = new(map[int]uint)
		}

		if false {
		} else {
			h.decMapintuint((*map[int]uint)(x.FptrMapIntUint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntUint8 = nil
	} else {
		if false {
		} else {
			h.decMapintuint8((*map[int]uint8)(&x.FMapIntUint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntUint8 != nil {
			x.FptrMapIntUint8 = nil
		}
	} else {
		if x.FptrMapIntUint8 == nil {
			x.FptrMapIntUint8 = new(map[int]uint8)
		}

		if false {
		} else {
			h.decMapintuint8((*map[int]uint8)(x.FptrMapIntUint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntUint16 = nil
	} else {
		if false {
		} else {
			h.decMapintuint16((*map[int]uint16)(&x.FMapIntUint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntUint16 != nil {
			x.FptrMapIntUint16 = nil
		}
	} else {
		if x.FptrMapIntUint16 == nil {
			x.FptrMapIntUint16 = new(map[int]uint16)
		}

		if false {
		} else {
			h.decMapintuint16((*map[int]uint16)(x.FptrMapIntUint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntUint32 = nil
	} else {
		if false {
		} else {
			h.decMapintuint32((*map[int]uint32)(&x.FMapIntUint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntUint32 != nil {
			x.FptrMapIntUint32 = nil
		}
	} else {
		if x.FptrMapIntUint32 == nil {
			x.FptrMapIntUint32 = new(map[int]uint32)
		}

		if false {
		} else {
			h.decMapintuint32((*map[int]uint32)(x.FptrMapIntUint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntUint64 = nil
	} else {
		if false {
		} else {
			h.decMapintuint64((*map[int]uint64)(&x.FMapIntUint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntUint64 != nil {
			x.FptrMapIntUint64 = nil
		}
	} else {
		if x.FptrMapIntUint64 == nil {
			x.FptrMapIntUint64 = new(map[int]uint64)
		}

		if false {
		} else {
			h.decMapintuint64((*map[int]uint64)(x.FptrMapIntUint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntUintptr = nil
	} else {
		if false {
		} else {
			h.decMapintuintptr((*map[int]uintptr)(&x.FMapIntUintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntUintptr != nil {
			x.FptrMapIntUintptr = nil
		}
	} else {
		if x.FptrMapIntUintptr == nil {
			x.FptrMapIntUintptr = new(map[int]uintptr)
		}

		if false {
		} else {
			h.decMapintuintptr((*map[int]uintptr)(x.FptrMapIntUintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntInt = nil
	} else {
		if false {
		} else {
			h.decMapintint((*map[int]int)(&x.FMapIntInt), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntInt != nil {
			x.FptrMapIntInt = nil
		}
	} else {
		if x.FptrMapIntInt == nil {
			x.FptrMapIntInt = new(map[int]int)
		}

		if false {
		} else {
			h.decMapintint((*map[int]int)(x.FptrMapIntInt), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntInt8 = nil
	} else {
		if false {
		} else {
			h.decMapintint8((*map[int]int8)(&x.FMapIntInt8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntInt8 != nil {
			x.FptrMapIntInt8 = nil
		}
	} else {
		if x.FptrMapIntInt8 == nil {
			x.FptrMapIntInt8 = new(map[int]int8)
		}

		if false {
		} else {
			h.decMapintint8((*map[int]int8)(x.FptrMapIntInt8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntInt16 = nil
	} else {
		if false {
		} else {
			h.decMapintint16((*map[int]int16)(&x.FMapIntInt16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntInt16 != nil {
			x.FptrMapIntInt16 = nil
		}
	} else {
		if x.FptrMapIntInt16 == nil {
			x.FptrMapIntInt16 = new(map[int]int16)
		}

		if false {
		} else {
			h.decMapintint16((*map[int]int16)(x.FptrMapIntInt16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntInt32 = nil
	} else {
		if false {
		} else {
			h.decMapintint32((*map[int]int32)(&x.FMapIntInt32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntInt32 != nil {
			x.FptrMapIntInt32 = nil
		}
	} else {
		if x.FptrMapIntInt32 == nil {
			x.FptrMapIntInt32 = new(map[int]int32)
		}

		if false {
		} else {
			h.decMapintint32((*map[int]int32)(x.FptrMapIntInt32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntInt64 = nil
	} else {
		if false {
		} else {
			h.decMapintint64((*map[int]int64)(&x.FMapIntInt64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntInt64 != nil {
			x.FptrMapIntInt64 = nil
		}
	} else {
		if x.FptrMapIntInt64 == nil {
			x.FptrMapIntInt64 = new(map[int]int64)
		}

		if false {
		} else {
			h.decMapintint64((*map[int]int64)(x.FptrMapIntInt64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntFloat32 = nil
	} else {
		if false {
		} else {
			h.decMapintfloat32((*map[int]float32)(&x.FMapIntFloat32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntFloat32 != nil {
			x.FptrMapIntFloat32 = nil
		}
	} else {
		if x.FptrMapIntFloat32 == nil {
			x.FptrMapIntFloat32 = new(map[int]float32)
		}

		if false {
		} else {
			h.decMapintfloat32((*map[int]float32)(x.FptrMapIntFloat32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntFloat64 = nil
	} else {
		if false {
		} else {
			h.decMapintfloat64((*map[int]float64)(&x.FMapIntFloat64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntFloat64 != nil {
			x.FptrMapIntFloat64 = nil
		}
	} else {
		if x.FptrMapIntFloat64 == nil {
			x.FptrMapIntFloat64 = new(map[int]float64)
		}

		if false {
		} else {
			h.decMapintfloat64((*map[int]float64)(x.FptrMapIntFloat64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapIntBool = nil
	} else {
		if false {
		} else {
			h.decMapintbool((*map[int]bool)(&x.FMapIntBool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapIntBool != nil {
			x.FptrMapIntBool = nil
		}
	} else {
		if x.FptrMapIntBool == nil {
			x.FptrMapIntBool = new(map[int]bool)
		}

		if false {
		} else {
			h.decMapintbool((*map[int]bool)(x.FptrMapIntBool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt8Intf = nil
	} else {
		if false {
		} else {
			h.decMapint8Interface((*map[int8]interface{})(&x.FMapInt8Intf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt8Intf != nil {
			x.FptrMapInt8Intf = nil
		}
	} else {
		if x.FptrMapInt8Intf == nil {
			x.FptrMapInt8Intf = new(map[int8]interface{})
		}

		if false {
		} else {
			h.decMapint8Interface((*map[int8]interface{})(x.FptrMapInt8Intf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt8String = nil
	} else {
		if false {
		} else {
			h.decMapint8string((*map[int8]string)(&x.FMapInt8String), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt8String != nil {
			x.FptrMapInt8String = nil
		}
	} else {
		if x.FptrMapInt8String == nil {
			x.FptrMapInt8String = new(map[int8]string)
		}

		if false {
		} else {
			h.decMapint8string((*map[int8]string)(x.FptrMapInt8String), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt8Uint = nil
	} else {
		if false {
		} else {
			h.decMapint8uint((*map[int8]uint)(&x.FMapInt8Uint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt8Uint != nil {
			x.FptrMapInt8Uint = nil
		}
	} else {
		if x.FptrMapInt8Uint == nil {
			x.FptrMapInt8Uint = new(map[int8]uint)
		}

		if false {
		} else {
			h.decMapint8uint((*map[int8]uint)(x.FptrMapInt8Uint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt8Uint8 = nil
	} else {
		if false {
		} else {
			h.decMapint8uint8((*map[int8]uint8)(&x.FMapInt8Uint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt8Uint8 != nil {
			x.FptrMapInt8Uint8 = nil
		}
	} else {
		if x.FptrMapInt8Uint8 == nil {
			x.FptrMapInt8Uint8 = new(map[int8]uint8)
		}

		if false {
		} else {
			h.decMapint8uint8((*map[int8]uint8)(x.FptrMapInt8Uint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt8Uint16 = nil
	} else {
		if false {
		} else {
			h.decMapint8uint16((*map[int8]uint16)(&x.FMapInt8Uint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt8Uint16 != nil {
			x.FptrMapInt8Uint16 = nil
		}
	} else {
		if x.FptrMapInt8Uint16 == nil {
			x.FptrMapInt8Uint16 = new(map[int8]uint16)
		}

		if false {
		} else {
			h.decMapint8uint16((*map[int8]uint16)(x.FptrMapInt8Uint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt8Uint32 = nil
	} else {
		if false {
		} else {
			h.decMapint8uint32((*map[int8]uint32)(&x.FMapInt8Uint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt8Uint32 != nil {
			x.FptrMapInt8Uint32 = nil
		}
	} else {
		if x.FptrMapInt8Uint32 == nil {
			x.FptrMapInt8Uint32 = new(map[int8]uint32)
		}

		if false {
		} else {
			h.decMapint8uint32((*map[int8]uint32)(x.FptrMapInt8Uint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt8Uint64 = nil
	} else {
		if false {
		} else {
			h.decMapint8uint64((*map[int8]uint64)(&x.FMapInt8Uint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt8Uint64 != nil {
			x.FptrMapInt8Uint64 = nil
		}
	} else {
		if x.FptrMapInt8Uint64 == nil {
			x.FptrMapInt8Uint64 = new(map[int8]uint64)
		}

		if false {
		} else {
			h.decMapint8uint64((*map[int8]uint64)(x.FptrMapInt8Uint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt8Uintptr = nil
	} else {
		if false {
		} else {
			h.decMapint8uintptr((*map[int8]uintptr)(&x.FMapInt8Uintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt8Uintptr != nil {
			x.FptrMapInt8Uintptr = nil
		}
	} else {
		if x.FptrMapInt8Uintptr == nil {
			x.FptrMapInt8Uintptr = new(map[int8]uintptr)
		}

		if false {
		} else {
			h.decMapint8uintptr((*map[int8]uintptr)(x.FptrMapInt8Uintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt8Int = nil
	} else {
		if false {
		} else {
			h.decMapint8int((*map[int8]int)(&x.FMapInt8Int), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt8Int != nil {
			x.FptrMapInt8Int = nil
		}
	} else {
		if x.FptrMapInt8Int == nil {
			x.FptrMapInt8Int = new(map[int8]int)
		}

		if false {
		} else {
			h.decMapint8int((*map[int8]int)(x.FptrMapInt8Int), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt8Int8 = nil
	} else {
		if false {
		} else {
			h.decMapint8int8((*map[int8]int8)(&x.FMapInt8Int8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt8Int8 != nil {
			x.FptrMapInt8Int8 = nil
		}
	} else {
		if x.FptrMapInt8Int8 == nil {
			x.FptrMapInt8Int8 = new(map[int8]int8)
		}

		if false {
		} else {
			h.decMapint8int8((*map[int8]int8)(x.FptrMapInt8Int8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt8Int16 = nil
	} else {
		if false {
		} else {
			h.decMapint8int16((*map[int8]int16)(&x.FMapInt8Int16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt8Int16 != nil {
			x.FptrMapInt8Int16 = nil
		}
	} else {
		if x.FptrMapInt8Int16 == nil {
			x.FptrMapInt8Int16 = new(map[int8]int16)
		}

		if false {
		} else {
			h.decMapint8int16((*map[int8]int16)(x.FptrMapInt8Int16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt8Int32 = nil
	} else {
		if false {
		} else {
			h.decMapint8int32((*map[int8]int32)(&x.FMapInt8Int32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt8Int32 != nil {
			x.FptrMapInt8Int32 = nil
		}
	} else {
		if x.FptrMapInt8Int32 == nil {
			x.FptrMapInt8Int32 = new(map[int8]int32)
		}

		if false {
		} else {
			h.decMapint8int32((*map[int8]int32)(x.FptrMapInt8Int32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt8Int64 = nil
	} else {
		if false {
		} else {
			h.decMapint8int64((*map[int8]int64)(&x.FMapInt8Int64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt8Int64 != nil {
			x.FptrMapInt8Int64 = nil
		}
	} else {
		if x.FptrMapInt8Int64 == nil {
			x.FptrMapInt8Int64 = new(map[int8]int64)
		}

		if false {
		} else {
			h.decMapint8int64((*map[int8]int64)(x.FptrMapInt8Int64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt8Float32 = nil
	} else {
		if false {
		} else {
			h.decMapint8float32((*map[int8]float32)(&x.FMapInt8Float32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt8Float32 != nil {
			x.FptrMapInt8Float32 = nil
		}
	} else {
		if x.FptrMapInt8Float32 == nil {
			x.FptrMapInt8Float32 = new(map[int8]float32)
		}

		if false {
		} else {
			h.decMapint8float32((*map[int8]float32)(x.FptrMapInt8Float32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt8Float64 = nil
	} else {
		if false {
		} else {
			h.decMapint8float64((*map[int8]float64)(&x.FMapInt8Float64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt8Float64 != nil {
			x.FptrMapInt8Float64 = nil
		}
	} else {
		if x.FptrMapInt8Float64 == nil {
			x.FptrMapInt8Float64 = new(map[int8]float64)
		}

		if false {
		} else {
			h.decMapint8float64((*map[int8]float64)(x.FptrMapInt8Float64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt8Bool = nil
	} else {
		if false {
		} else {
			h.decMapint8bool((*map[int8]bool)(&x.FMapInt8Bool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt8Bool != nil {
			x.FptrMapInt8Bool = nil
		}
	} else {
		if x.FptrMapInt8Bool == nil {
			x.FptrMapInt8Bool = new(map[int8]bool)
		}

		if false {
		} else {
			h.decMapint8bool((*map[int8]bool)(x.FptrMapInt8Bool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt16Intf = nil
	} else {
		if false {
		} else {
			h.decMapint16Interface((*map[int16]interface{})(&x.FMapInt16Intf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt16Intf != nil {
			x.FptrMapInt16Intf = nil
		}
	} else {
		if x.FptrMapInt16Intf == nil {
			x.FptrMapInt16Intf = new(map[int16]interface{})
		}

		if false {
		} else {
			h.decMapint16Interface((*map[int16]interface{})(x.FptrMapInt16Intf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt16String = nil
	} else {
		if false {
		} else {
			h.decMapint16string((*map[int16]string)(&x.FMapInt16String), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt16String != nil {
			x.FptrMapInt16String = nil
		}
	} else {
		if x.FptrMapInt16String == nil {
			x.FptrMapInt16String = new(map[int16]string)
		}

		if false {
		} else {
			h.decMapint16string((*map[int16]string)(x.FptrMapInt16String), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt16Uint = nil
	} else {
		if false {
		} else {
			h.decMapint16uint((*map[int16]uint)(&x.FMapInt16Uint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt16Uint != nil {
			x.FptrMapInt16Uint = nil
		}
	} else {
		if x.FptrMapInt16Uint == nil {
			x.FptrMapInt16Uint = new(map[int16]uint)
		}

		if false {
		} else {
			h.decMapint16uint((*map[int16]uint)(x.FptrMapInt16Uint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt16Uint8 = nil
	} else {
		if false {
		} else {
			h.decMapint16uint8((*map[int16]uint8)(&x.FMapInt16Uint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt16Uint8 != nil {
			x.FptrMapInt16Uint8 = nil
		}
	} else {
		if x.FptrMapInt16Uint8 == nil {
			x.FptrMapInt16Uint8 = new(map[int16]uint8)
		}

		if false {
		} else {
			h.decMapint16uint8((*map[int16]uint8)(x.FptrMapInt16Uint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt16Uint16 = nil
	} else {
		if false {
		} else {
			h.decMapint16uint16((*map[int16]uint16)(&x.FMapInt16Uint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt16Uint16 != nil {
			x.FptrMapInt16Uint16 = nil
		}
	} else {
		if x.FptrMapInt16Uint16 == nil {
			x.FptrMapInt16Uint16 = new(map[int16]uint16)
		}

		if false {
		} else {
			h.decMapint16uint16((*map[int16]uint16)(x.FptrMapInt16Uint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt16Uint32 = nil
	} else {
		if false {
		} else {
			h.decMapint16uint32((*map[int16]uint32)(&x.FMapInt16Uint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt16Uint32 != nil {
			x.FptrMapInt16Uint32 = nil
		}
	} else {
		if x.FptrMapInt16Uint32 == nil {
			x.FptrMapInt16Uint32 = new(map[int16]uint32)
		}

		if false {
		} else {
			h.decMapint16uint32((*map[int16]uint32)(x.FptrMapInt16Uint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt16Uint64 = nil
	} else {
		if false {
		} else {
			h.decMapint16uint64((*map[int16]uint64)(&x.FMapInt16Uint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt16Uint64 != nil {
			x.FptrMapInt16Uint64 = nil
		}
	} else {
		if x.FptrMapInt16Uint64 == nil {
			x.FptrMapInt16Uint64 = new(map[int16]uint64)
		}

		if false {
		} else {
			h.decMapint16uint64((*map[int16]uint64)(x.FptrMapInt16Uint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt16Uintptr = nil
	} else {
		if false {
		} else {
			h.decMapint16uintptr((*map[int16]uintptr)(&x.FMapInt16Uintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt16Uintptr != nil {
			x.FptrMapInt16Uintptr = nil
		}
	} else {
		if x.FptrMapInt16Uintptr == nil {
			x.FptrMapInt16Uintptr = new(map[int16]uintptr)
		}

		if false {
		} else {
			h.decMapint16uintptr((*map[int16]uintptr)(x.FptrMapInt16Uintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt16Int = nil
	} else {
		if false {
		} else {
			h.decMapint16int((*map[int16]int)(&x.FMapInt16Int), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt16Int != nil {
			x.FptrMapInt16Int = nil
		}
	} else {
		if x.FptrMapInt16Int == nil {
			x.FptrMapInt16Int = new(map[int16]int)
		}

		if false {
		} else {
			h.decMapint16int((*map[int16]int)(x.FptrMapInt16Int), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt16Int8 = nil
	} else {
		if false {
		} else {
			h.decMapint16int8((*map[int16]int8)(&x.FMapInt16Int8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt16Int8 != nil {
			x.FptrMapInt16Int8 = nil
		}
	} else {
		if x.FptrMapInt16Int8 == nil {
			x.FptrMapInt16Int8 = new(map[int16]int8)
		}

		if false {
		} else {
			h.decMapint16int8((*map[int16]int8)(x.FptrMapInt16Int8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt16Int16 = nil
	} else {
		if false {
		} else {
			h.decMapint16int16((*map[int16]int16)(&x.FMapInt16Int16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt16Int16 != nil {
			x.FptrMapInt16Int16 = nil
		}
	} else {
		if x.FptrMapInt16Int16 == nil {
			x.FptrMapInt16Int16 = new(map[int16]int16)
		}

		if false {
		} else {
			h.decMapint16int16((*map[int16]int16)(x.FptrMapInt16Int16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt16Int32 = nil
	} else {
		if false {
		} else {
			h.decMapint16int32((*map[int16]int32)(&x.FMapInt16Int32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt16Int32 != nil {
			x.FptrMapInt16Int32 = nil
		}
	} else {
		if x.FptrMapInt16Int32 == nil {
			x.FptrMapInt16Int32 = new(map[int16]int32)
		}

		if false {
		} else {
			h.decMapint16int32((*map[int16]int32)(x.FptrMapInt16Int32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt16Int64 = nil
	} else {
		if false {
		} else {
			h.decMapint16int64((*map[int16]int64)(&x.FMapInt16Int64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt16Int64 != nil {
			x.FptrMapInt16Int64 = nil
		}
	} else {
		if x.FptrMapInt16Int64 == nil {
			x.FptrMapInt16Int64 = new(map[int16]int64)
		}

		if false {
		} else {
			h.decMapint16int64((*map[int16]int64)(x.FptrMapInt16Int64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt16Float32 = nil
	} else {
		if false {
		} else {
			h.decMapint16float32((*map[int16]float32)(&x.FMapInt16Float32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt16Float32 != nil {
			x.FptrMapInt16Float32 = nil
		}
	} else {
		if x.FptrMapInt16Float32 == nil {
			x.FptrMapInt16Float32 = new(map[int16]float32)
		}

		if false {
		} else {
			h.decMapint16float32((*map[int16]float32)(x.FptrMapInt16Float32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt16Float64 = nil
	} else {
		if false {
		} else {
			h.decMapint16float64((*map[int16]float64)(&x.FMapInt16Float64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt16Float64 != nil {
			x.FptrMapInt16Float64 = nil
		}
	} else {
		if x.FptrMapInt16Float64 == nil {
			x.FptrMapInt16Float64 = new(map[int16]float64)
		}

		if false {
		} else {
			h.decMapint16float64((*map[int16]float64)(x.FptrMapInt16Float64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt16Bool = nil
	} else {
		if false {
		} else {
			h.decMapint16bool((*map[int16]bool)(&x.FMapInt16Bool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt16Bool != nil {
			x.FptrMapInt16Bool = nil
		}
	} else {
		if x.FptrMapInt16Bool == nil {
			x.FptrMapInt16Bool = new(map[int16]bool)
		}

		if false {
		} else {
			h.decMapint16bool((*map[int16]bool)(x.FptrMapInt16Bool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt32Intf = nil
	} else {
		if false {
		} else {
			h.decMapint32Interface((*map[int32]interface{})(&x.FMapInt32Intf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt32Intf != nil {
			x.FptrMapInt32Intf = nil
		}
	} else {
		if x.FptrMapInt32Intf == nil {
			x.FptrMapInt32Intf = new(map[int32]interface{})
		}

		if false {
		} else {
			h.decMapint32Interface((*map[int32]interface{})(x.FptrMapInt32Intf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt32String = nil
	} else {
		if false {
		} else {
			h.decMapint32string((*map[int32]string)(&x.FMapInt32String), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt32String != nil {
			x.FptrMapInt32String = nil
		}
	} else {
		if x.FptrMapInt32String == nil {
			x.FptrMapInt32String = new(map[int32]string)
		}

		if false {
		} else {
			h.decMapint32string((*map[int32]string)(x.FptrMapInt32String), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt32Uint = nil
	} else {
		if false {
		} else {
			h.decMapint32uint((*map[int32]uint)(&x.FMapInt32Uint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt32Uint != nil {
			x.FptrMapInt32Uint = nil
		}
	} else {
		if x.FptrMapInt32Uint == nil {
			x.FptrMapInt32Uint = new(map[int32]uint)
		}

		if false {
		} else {
			h.decMapint32uint((*map[int32]uint)(x.FptrMapInt32Uint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt32Uint8 = nil
	} else {
		if false {
		} else {
			h.decMapint32uint8((*map[int32]uint8)(&x.FMapInt32Uint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt32Uint8 != nil {
			x.FptrMapInt32Uint8 = nil
		}
	} else {
		if x.FptrMapInt32Uint8 == nil {
			x.FptrMapInt32Uint8 = new(map[int32]uint8)
		}

		if false {
		} else {
			h.decMapint32uint8((*map[int32]uint8)(x.FptrMapInt32Uint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt32Uint16 = nil
	} else {
		if false {
		} else {
			h.decMapint32uint16((*map[int32]uint16)(&x.FMapInt32Uint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt32Uint16 != nil {
			x.FptrMapInt32Uint16 = nil
		}
	} else {
		if x.FptrMapInt32Uint16 == nil {
			x.FptrMapInt32Uint16 = new(map[int32]uint16)
		}

		if false {
		} else {
			h.decMapint32uint16((*map[int32]uint16)(x.FptrMapInt32Uint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt32Uint32 = nil
	} else {
		if false {
		} else {
			h.decMapint32uint32((*map[int32]uint32)(&x.FMapInt32Uint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt32Uint32 != nil {
			x.FptrMapInt32Uint32 = nil
		}
	} else {
		if x.FptrMapInt32Uint32 == nil {
			x.FptrMapInt32Uint32 = new(map[int32]uint32)
		}

		if false {
		} else {
			h.decMapint32uint32((*map[int32]uint32)(x.FptrMapInt32Uint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt32Uint64 = nil
	} else {
		if false {
		} else {
			h.decMapint32uint64((*map[int32]uint64)(&x.FMapInt32Uint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt32Uint64 != nil {
			x.FptrMapInt32Uint64 = nil
		}
	} else {
		if x.FptrMapInt32Uint64 == nil {
			x.FptrMapInt32Uint64 = new(map[int32]uint64)
		}

		if false {
		} else {
			h.decMapint32uint64((*map[int32]uint64)(x.FptrMapInt32Uint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt32Uintptr = nil
	} else {
		if false {
		} else {
			h.decMapint32uintptr((*map[int32]uintptr)(&x.FMapInt32Uintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt32Uintptr != nil {
			x.FptrMapInt32Uintptr = nil
		}
	} else {
		if x.FptrMapInt32Uintptr == nil {
			x.FptrMapInt32Uintptr = new(map[int32]uintptr)
		}

		if false {
		} else {
			h.decMapint32uintptr((*map[int32]uintptr)(x.FptrMapInt32Uintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt32Int = nil
	} else {
		if false {
		} else {
			h.decMapint32int((*map[int32]int)(&x.FMapInt32Int), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt32Int != nil {
			x.FptrMapInt32Int = nil
		}
	} else {
		if x.FptrMapInt32Int == nil {
			x.FptrMapInt32Int = new(map[int32]int)
		}

		if false {
		} else {
			h.decMapint32int((*map[int32]int)(x.FptrMapInt32Int), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt32Int8 = nil
	} else {
		if false {
		} else {
			h.decMapint32int8((*map[int32]int8)(&x.FMapInt32Int8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt32Int8 != nil {
			x.FptrMapInt32Int8 = nil
		}
	} else {
		if x.FptrMapInt32Int8 == nil {
			x.FptrMapInt32Int8 = new(map[int32]int8)
		}

		if false {
		} else {
			h.decMapint32int8((*map[int32]int8)(x.FptrMapInt32Int8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt32Int16 = nil
	} else {
		if false {
		} else {
			h.decMapint32int16((*map[int32]int16)(&x.FMapInt32Int16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt32Int16 != nil {
			x.FptrMapInt32Int16 = nil
		}
	} else {
		if x.FptrMapInt32Int16 == nil {
			x.FptrMapInt32Int16 = new(map[int32]int16)
		}

		if false {
		} else {
			h.decMapint32int16((*map[int32]int16)(x.FptrMapInt32Int16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt32Int32 = nil
	} else {
		if false {
		} else {
			h.decMapint32int32((*map[int32]int32)(&x.FMapInt32Int32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt32Int32 != nil {
			x.FptrMapInt32Int32 = nil
		}
	} else {
		if x.FptrMapInt32Int32 == nil {
			x.FptrMapInt32Int32 = new(map[int32]int32)
		}

		if false {
		} else {
			h.decMapint32int32((*map[int32]int32)(x.FptrMapInt32Int32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt32Int64 = nil
	} else {
		if false {
		} else {
			h.decMapint32int64((*map[int32]int64)(&x.FMapInt32Int64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt32Int64 != nil {
			x.FptrMapInt32Int64 = nil
		}
	} else {
		if x.FptrMapInt32Int64 == nil {
			x.FptrMapInt32Int64 = new(map[int32]int64)
		}

		if false {
		} else {
			h.decMapint32int64((*map[int32]int64)(x.FptrMapInt32Int64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt32Float32 = nil
	} else {
		if false {
		} else {
			h.decMapint32float32((*map[int32]float32)(&x.FMapInt32Float32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt32Float32 != nil {
			x.FptrMapInt32Float32 = nil
		}
	} else {
		if x.FptrMapInt32Float32 == nil {
			x.FptrMapInt32Float32 = new(map[int32]float32)
		}

		if false {
		} else {
			h.decMapint32float32((*map[int32]float32)(x.FptrMapInt32Float32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt32Float64 = nil
	} else {
		if false {
		} else {
			h.decMapint32float64((*map[int32]float64)(&x.FMapInt32Float64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt32Float64 != nil {
			x.FptrMapInt32Float64 = nil
		}
	} else {
		if x.FptrMapInt32Float64 == nil {
			x.FptrMapInt32Float64 = new(map[int32]float64)
		}

		if false {
		} else {
			h.decMapint32float64((*map[int32]float64)(x.FptrMapInt32Float64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt32Bool = nil
	} else {
		if false {
		} else {
			h.decMapint32bool((*map[int32]bool)(&x.FMapInt32Bool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt32Bool != nil {
			x.FptrMapInt32Bool = nil
		}
	} else {
		if x.FptrMapInt32Bool == nil {
			x.FptrMapInt32Bool = new(map[int32]bool)
		}

		if false {
		} else {
			h.decMapint32bool((*map[int32]bool)(x.FptrMapInt32Bool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Intf = nil
	} else {
		if false {
		} else {
			h.decMapint64Interface((*map[int64]interface{})(&x.FMapInt64Intf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt64Intf != nil {
			x.FptrMapInt64Intf = nil
		}
	} else {
		if x.FptrMapInt64Intf == nil {
			x.FptrMapInt64Intf = new(map[int64]interface{})
		}

		if false {
		} else {
			h.decMapint64Interface((*map[int64]interface{})(x.FptrMapInt64Intf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64String = nil
	} else {
		if false {
		} else {
			h.decMapint64string((*map[int64]string)(&x.FMapInt64String), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt64String != nil {
			x.FptrMapInt64String = nil
		}
	} else {
		if x.FptrMapInt64String == nil {
			x.FptrMapInt64String = new(map[int64]string)
		}

		if false {
		} else {
			h.decMapint64string((*map[int64]string)(x.FptrMapInt64String), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Uint = nil
	} else {
		if false {
		} else {
			h.decMapint64uint((*map[int64]uint)(&x.FMapInt64Uint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt64Uint != nil {
			x.FptrMapInt64Uint = nil
		}
	} else {
		if x.FptrMapInt64Uint == nil {
			x.FptrMapInt64Uint = new(map[int64]uint)
		}

		if false {
		} else {
			h.decMapint64uint((*map[int64]uint)(x.FptrMapInt64Uint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Uint8 = nil
	} else {
		if false {
		} else {
			h.decMapint64uint8((*map[int64]uint8)(&x.FMapInt64Uint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt64Uint8 != nil {
			x.FptrMapInt64Uint8 = nil
		}
	} else {
		if x.FptrMapInt64Uint8 == nil {
			x.FptrMapInt64Uint8 = new(map[int64]uint8)
		}

		if false {
		} else {
			h.decMapint64uint8((*map[int64]uint8)(x.FptrMapInt64Uint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Uint16 = nil
	} else {
		if false {
		} else {
			h.decMapint64uint16((*map[int64]uint16)(&x.FMapInt64Uint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt64Uint16 != nil {
			x.FptrMapInt64Uint16 = nil
		}
	} else {
		if x.FptrMapInt64Uint16 == nil {
			x.FptrMapInt64Uint16 = new(map[int64]uint16)
		}

		if false {
		} else {
			h.decMapint64uint16((*map[int64]uint16)(x.FptrMapInt64Uint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Uint32 = nil
	} else {
		if false {
		} else {
			h.decMapint64uint32((*map[int64]uint32)(&x.FMapInt64Uint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt64Uint32 != nil {
			x.FptrMapInt64Uint32 = nil
		}
	} else {
		if x.FptrMapInt64Uint32 == nil {
			x.FptrMapInt64Uint32 = new(map[int64]uint32)
		}

		if false {
		} else {
			h.decMapint64uint32((*map[int64]uint32)(x.FptrMapInt64Uint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Uint64 = nil
	} else {
		if false {
		} else {
			h.decMapint64uint64((*map[int64]uint64)(&x.FMapInt64Uint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt64Uint64 != nil {
			x.FptrMapInt64Uint64 = nil
		}
	} else {
		if x.FptrMapInt64Uint64 == nil {
			x.FptrMapInt64Uint64 = new(map[int64]uint64)
		}

		if false {
		} else {
			h.decMapint64uint64((*map[int64]uint64)(x.FptrMapInt64Uint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Uintptr = nil
	} else {
		if false {
		} else {
			h.decMapint64uintptr((*map[int64]uintptr)(&x.FMapInt64Uintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt64Uintptr != nil {
			x.FptrMapInt64Uintptr = nil
		}
	} else {
		if x.FptrMapInt64Uintptr == nil {
			x.FptrMapInt64Uintptr = new(map[int64]uintptr)
		}

		if false {
		} else {
			h.decMapint64uintptr((*map[int64]uintptr)(x.FptrMapInt64Uintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Int = nil
	} else {
		if false {
		} else {
			h.decMapint64int((*map[int64]int)(&x.FMapInt64Int), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt64Int != nil {
			x.FptrMapInt64Int = nil
		}
	} else {
		if x.FptrMapInt64Int == nil {
			x.FptrMapInt64Int = new(map[int64]int)
		}

		if false {
		} else {
			h.decMapint64int((*map[int64]int)(x.FptrMapInt64Int), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Int8 = nil
	} else {
		if false {
		} else {
			h.decMapint64int8((*map[int64]int8)(&x.FMapInt64Int8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt64Int8 != nil {
			x.FptrMapInt64Int8 = nil
		}
	} else {
		if x.FptrMapInt64Int8 == nil {
			x.FptrMapInt64Int8 = new(map[int64]int8)
		}

		if false {
		} else {
			h.decMapint64int8((*map[int64]int8)(x.FptrMapInt64Int8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Int16 = nil
	} else {
		if false {
		} else {
			h.decMapint64int16((*map[int64]int16)(&x.FMapInt64Int16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt64Int16 != nil {
			x.FptrMapInt64Int16 = nil
		}
	} else {
		if x.FptrMapInt64Int16 == nil {
			x.FptrMapInt64Int16 = new(map[int64]int16)
		}

		if false {
		} else {
			h.decMapint64int16((*map[int64]int16)(x.FptrMapInt64Int16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Int32 = nil
	} else {
		if false {
		} else {
			h.decMapint64int32((*map[int64]int32)(&x.FMapInt64Int32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt64Int32 != nil {
			x.FptrMapInt64Int32 = nil
		}
	} else {
		if x.FptrMapInt64Int32 == nil {
			x.FptrMapInt64Int32 = new(map[int64]int32)
		}

		if false {
		} else {
			h.decMapint64int32((*map[int64]int32)(x.FptrMapInt64Int32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Int64 = nil
	} else {
		if false {
		} else {
			h.decMapint64int64((*map[int64]int64)(&x.FMapInt64Int64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt64Int64 != nil {
			x.FptrMapInt64Int64 = nil
		}
	} else {
		if x.FptrMapInt64Int64 == nil {
			x.FptrMapInt64Int64 = new(map[int64]int64)
		}

		if false {
		} else {
			h.decMapint64int64((*map[int64]int64)(x.FptrMapInt64Int64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Float32 = nil
	} else {
		if false {
		} else {
			h.decMapint64float32((*map[int64]float32)(&x.FMapInt64Float32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt64Float32 != nil {
			x.FptrMapInt64Float32 = nil
		}
	} else {
		if x.FptrMapInt64Float32 == nil {
			x.FptrMapInt64Float32 = new(map[int64]float32)
		}

		if false {
		} else {
			h.decMapint64float32((*map[int64]float32)(x.FptrMapInt64Float32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Float64 = nil
	} else {
		if false {
		} else {
			h.decMapint64float64((*map[int64]float64)(&x.FMapInt64Float64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt64Float64 != nil {
			x.FptrMapInt64Float64 = nil
		}
	} else {
		if x.FptrMapInt64Float64 == nil {
			x.FptrMapInt64Float64 = new(map[int64]float64)
		}

		if false {
		} else {
			h.decMapint64float64((*map[int64]float64)(x.FptrMapInt64Float64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapInt64Bool = nil
	} else {
		if false {
		} else {
			h.decMapint64bool((*map[int64]bool)(&x.FMapInt64Bool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapInt64Bool != nil {
			x.FptrMapInt64Bool = nil
		}
	} else {
		if x.FptrMapInt64Bool == nil {
			x.FptrMapInt64Bool = new(map[int64]bool)
		}

		if false {
		} else {
			h.decMapint64bool((*map[int64]bool)(x.FptrMapInt64Bool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapBoolIntf = nil
	} else {
		if false {
		} else {
			h.decMapboolInterface((*map[bool]interface{})(&x.FMapBoolIntf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapBoolIntf != nil {
			x.FptrMapBoolIntf = nil
		}
	} else {
		if x.FptrMapBoolIntf == nil {
			x.FptrMapBoolIntf = new(map[bool]interface{})
		}

		if false {
		} else {
			h.decMapboolInterface((*map[bool]interface{})(x.FptrMapBoolIntf), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapBoolString = nil
	} else {
		if false {
		} else {
			h.decMapboolstring((*map[bool]string)(&x.FMapBoolString), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapBoolString != nil {
			x.FptrMapBoolString = nil
		}
	} else {
		if x.FptrMapBoolString == nil {
			x.FptrMapBoolString = new(map[bool]string)
		}

		if false {
		} else {
			h.decMapboolstring((*map[bool]string)(x.FptrMapBoolString), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapBoolUint = nil
	} else {
		if false {
		} else {
			h.decMapbooluint((*map[bool]uint)(&x.FMapBoolUint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapBoolUint != nil {
			x.FptrMapBoolUint = nil
		}
	} else {
		if x.FptrMapBoolUint == nil {
			x.FptrMapBoolUint = new(map[bool]uint)
		}

		if false {
		} else {
			h.decMapbooluint((*map[bool]uint)(x.FptrMapBoolUint), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapBoolUint8 = nil
	} else {
		if false {
		} else {
			h.decMapbooluint8((*map[bool]uint8)(&x.FMapBoolUint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapBoolUint8 != nil {
			x.FptrMapBoolUint8 = nil
		}
	} else {
		if x.FptrMapBoolUint8 == nil {
			x.FptrMapBoolUint8 = new(map[bool]uint8)
		}

		if false {
		} else {
			h.decMapbooluint8((*map[bool]uint8)(x.FptrMapBoolUint8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapBoolUint16 = nil
	} else {
		if false {
		} else {
			h.decMapbooluint16((*map[bool]uint16)(&x.FMapBoolUint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapBoolUint16 != nil {
			x.FptrMapBoolUint16 = nil
		}
	} else {
		if x.FptrMapBoolUint16 == nil {
			x.FptrMapBoolUint16 = new(map[bool]uint16)
		}

		if false {
		} else {
			h.decMapbooluint16((*map[bool]uint16)(x.FptrMapBoolUint16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapBoolUint32 = nil
	} else {
		if false {
		} else {
			h.decMapbooluint32((*map[bool]uint32)(&x.FMapBoolUint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapBoolUint32 != nil {
			x.FptrMapBoolUint32 = nil
		}
	} else {
		if x.FptrMapBoolUint32 == nil {
			x.FptrMapBoolUint32 = new(map[bool]uint32)
		}

		if false {
		} else {
			h.decMapbooluint32((*map[bool]uint32)(x.FptrMapBoolUint32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapBoolUint64 = nil
	} else {
		if false {
		} else {
			h.decMapbooluint64((*map[bool]uint64)(&x.FMapBoolUint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapBoolUint64 != nil {
			x.FptrMapBoolUint64 = nil
		}
	} else {
		if x.FptrMapBoolUint64 == nil {
			x.FptrMapBoolUint64 = new(map[bool]uint64)
		}

		if false {
		} else {
			h.decMapbooluint64((*map[bool]uint64)(x.FptrMapBoolUint64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapBoolUintptr = nil
	} else {
		if false {
		} else {
			h.decMapbooluintptr((*map[bool]uintptr)(&x.FMapBoolUintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapBoolUintptr != nil {
			x.FptrMapBoolUintptr = nil
		}
	} else {
		if x.FptrMapBoolUintptr == nil {
			x.FptrMapBoolUintptr = new(map[bool]uintptr)
		}

		if false {
		} else {
			h.decMapbooluintptr((*map[bool]uintptr)(x.FptrMapBoolUintptr), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapBoolInt = nil
	} else {
		if false {
		} else {
			h.decMapboolint((*map[bool]int)(&x.FMapBoolInt), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapBoolInt != nil {
			x.FptrMapBoolInt = nil
		}
	} else {
		if x.FptrMapBoolInt == nil {
			x.FptrMapBoolInt = new(map[bool]int)
		}

		if false {
		} else {
			h.decMapboolint((*map[bool]int)(x.FptrMapBoolInt), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapBoolInt8 = nil
	} else {
		if false {
		} else {
			h.decMapboolint8((*map[bool]int8)(&x.FMapBoolInt8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapBoolInt8 != nil {
			x.FptrMapBoolInt8 = nil
		}
	} else {
		if x.FptrMapBoolInt8 == nil {
			x.FptrMapBoolInt8 = new(map[bool]int8)
		}

		if false {
		} else {
			h.decMapboolint8((*map[bool]int8)(x.FptrMapBoolInt8), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapBoolInt16 = nil
	} else {
		if false {
		} else {
			h.decMapboolint16((*map[bool]int16)(&x.FMapBoolInt16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapBoolInt16 != nil {
			x.FptrMapBoolInt16 = nil
		}
	} else {
		if x.FptrMapBoolInt16 == nil {
			x.FptrMapBoolInt16 = new(map[bool]int16)
		}

		if false {
		} else {
			h.decMapboolint16((*map[bool]int16)(x.FptrMapBoolInt16), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapBoolInt32 = nil
	} else {
		if false {
		} else {
			h.decMapboolint32((*map[bool]int32)(&x.FMapBoolInt32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapBoolInt32 != nil {
			x.FptrMapBoolInt32 = nil
		}
	} else {
		if x.FptrMapBoolInt32 == nil {
			x.FptrMapBoolInt32 = new(map[bool]int32)
		}

		if false {
		} else {
			h.decMapboolint32((*map[bool]int32)(x.FptrMapBoolInt32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapBoolInt64 = nil
	} else {
		if false {
		} else {
			h.decMapboolint64((*map[bool]int64)(&x.FMapBoolInt64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapBoolInt64 != nil {
			x.FptrMapBoolInt64 = nil
		}
	} else {
		if x.FptrMapBoolInt64 == nil {
			x.FptrMapBoolInt64 = new(map[bool]int64)
		}

		if false {
		} else {
			h.decMapboolint64((*map[bool]int64)(x.FptrMapBoolInt64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapBoolFloat32 = nil
	} else {
		if false {
		} else {
			h.decMapboolfloat32((*map[bool]float32)(&x.FMapBoolFloat32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapBoolFloat32 != nil {
			x.FptrMapBoolFloat32 = nil
		}
	} else {
		if x.FptrMapBoolFloat32 == nil {
			x.FptrMapBoolFloat32 = new(map[bool]float32)
		}

		if false {
		} else {
			h.decMapboolfloat32((*map[bool]float32)(x.FptrMapBoolFloat32), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapBoolFloat64 = nil
	} else {
		if false {
		} else {
			h.decMapboolfloat64((*map[bool]float64)(&x.FMapBoolFloat64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapBoolFloat64 != nil {
			x.FptrMapBoolFloat64 = nil
		}
	} else {
		if x.FptrMapBoolFloat64 == nil {
			x.FptrMapBoolFloat64 = new(map[bool]float64)
		}

		if false {
		} else {
			h.decMapboolfloat64((*map[bool]float64)(x.FptrMapBoolFloat64), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FMapBoolBool = nil
	} else {
		if false {
		} else {
			h.decMapboolbool((*map[bool]bool)(&x.FMapBoolBool), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.FptrMapBoolBool != nil {
			x.FptrMapBoolBool = nil
		}
	} else {
		if x.FptrMapBoolBool == nil {
			x.FptrMapBoolBool = new(map[bool]bool)
		}

		if false {
		} else {
			h.decMapboolbool((*map[bool]bool)(x.FptrMapBoolBool), d)
		}
	}
	for {
		yyj1141++
		if yyhl1141 {
			yyb1141 = yyj1141 > l
		} else {
			yyb1141 = r.CheckBreak()
		}
		if yyb1141 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj1141-1, "")
	}
	r.ReadArrayEnd()
}

func (x testMammoth2Binary) CodecEncodeSelf(e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.EncExtension(x, yyxt1)
	} else if z.EncBinary() {
		z.EncBinaryMarshal(x)
	} else {
		r.EncodeUint(uint64(x))
	}
}

func (x *testMammoth2Binary) CodecDecodeSelf(d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else if z.DecBinary() {
		z.DecBinaryUnmarshal(x)
	} else {
		*x = (testMammoth2Binary)(r.DecodeUint64())
	}
}

func (x testMammoth2Text) CodecEncodeSelf(e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.EncExtension(x, yyxt1)
	} else if !z.EncBinary() {
		z.EncTextMarshal(x)
	} else {
		r.EncodeUint(uint64(x))
	}
}

func (x *testMammoth2Text) CodecDecodeSelf(d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else if !z.DecBinary() {
		z.DecTextUnmarshal(x)
	} else {
		*x = (testMammoth2Text)(r.DecodeUint64())
	}
}

func (x testMammoth2Json) CodecEncodeSelf(e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.EncExtension(x, yyxt1)
	} else if !z.EncBinary() && z.IsJSONHandle() {
		z.EncJSONMarshal(x)
	} else {
		r.EncodeUint(uint64(x))
	}
}

func (x *testMammoth2Json) CodecDecodeSelf(d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else if !z.DecBinary() && z.IsJSONHandle() {
		z.DecJSONUnmarshal(x)
	} else {
		*x = (testMammoth2Json)(r.DecodeUint64())
	}
}

func (x *testMammoth2Basic) CodecEncodeSelf(e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			h.enctestMammoth2Basic((*testMammoth2Basic)(x), e)
		}
	}
}

func (x *testMammoth2Basic) CodecDecodeSelf(d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		h.dectestMammoth2Basic((*testMammoth2Basic)(x), d)
	}
}

func (x *TestMammoth2Wrapper) CodecEncodeSelf(e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(8)
			} else {
				r.WriteMapStart(8)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.V
				yy4.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"V\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `V`)
				}
				r.WriteMapElemValue()
				yy6 := &x.V
				yy6.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				x.T.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"T\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `T`)
				}
				r.WriteMapElemValue()
				x.T.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				x.B.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"B\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `B`)
				}
				r.WriteMapElemValue()
				x.B.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				x.J.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"J\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `J`)
				}
				r.WriteMapElemValue()
				x.J.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy18 := &x.C
				yy18.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"C\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `C`)
				}
				r.WriteMapElemValue()
				yy20 := &x.C
				yy20.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.M == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMaptestMammoth2BasicTestMammoth2((map[testMammoth2Basic]TestMammoth2)(x.M), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"M\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `M`)
				}
				r.WriteMapElemValue()
				if x.M == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMaptestMammoth2BasicTestMammoth2((map[testMammoth2Basic]TestMammoth2)(x.M), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.L == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceTestMammoth2(([]TestMammoth2)(x.L), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"L\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `L`)
				}
				r.WriteMapElemValue()
				if x.L == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceTestMammoth2(([]TestMammoth2)(x.L), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy29 := &x.A
				if false {
				} else {
					h.encArray4int64((*[4]int64)(yy29), e)
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"A\"")
				} else {
					r.EncodeStringEnc(codecSelferCcUTF819781, `A`)
				}
				r.WriteMapElemValue()
				yy31 := &x.A
				if false {
				} else {
					h.encArray4int64((*[4]int64)(yy31), e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *TestMammoth2Wrapper) CodecDecodeSelf(d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap19781 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray19781 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct19781)
		}
	}
}

func (x *TestMammoth2Wrapper) codecDecodeSelfFromMap(l int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "V":
			if r.TryDecodeAsNil() {
				x.V = TestMammoth2{}
			} else {
				x.V.CodecDecodeSelf(d)
			}
		case "T":
			if r.TryDecodeAsNil() {
				x.T = 0
			} else {
				x.T.CodecDecodeSelf(d)
			}
		case "B":
			if r.TryDecodeAsNil() {
				x.B = 0
			} else {
				x.B.CodecDecodeSelf(d)
			}
		case "J":
			if r.TryDecodeAsNil() {
				x.J = 0
			} else {
				x.J.CodecDecodeSelf(d)
			}
		case "C":
			if r.TryDecodeAsNil() {
				x.C = testMammoth2Basic{}
			} else {
				x.C.CodecDecodeSelf(d)
			}
		case "M":
			if r.TryDecodeAsNil() {
				x.M = nil
			} else {
				if false {
				} else {
					h.decMaptestMammoth2BasicTestMammoth2((*map[testMammoth2Basic]TestMammoth2)(&x.M), d)
				}
			}
		case "L":
			if r.TryDecodeAsNil() {
				x.L = nil
			} else {
				if false {
				} else {
					h.decSliceTestMammoth2((*[]TestMammoth2)(&x.L), d)
				}
			}
		case "A":
			if r.TryDecodeAsNil() {
				x.A = [4]int64{}
			} else {
				if false {
				} else {
					h.decArray4int64((*[4]int64)(&x.A), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *TestMammoth2Wrapper) codecDecodeSelfFromArray(l int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj15 int
	var yyb15 bool
	var yyhl15 bool = l >= 0
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.V = TestMammoth2{}
	} else {
		x.V.CodecDecodeSelf(d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.T = 0
	} else {
		x.T.CodecDecodeSelf(d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.B = 0
	} else {
		x.B.CodecDecodeSelf(d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.J = 0
	} else {
		x.J.CodecDecodeSelf(d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.C = testMammoth2Basic{}
	} else {
		x.C.CodecDecodeSelf(d)
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.M = nil
	} else {
		if false {
		} else {
			h.decMaptestMammoth2BasicTestMammoth2((*map[testMammoth2Basic]TestMammoth2)(&x.M), d)
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.L = nil
	} else {
		if false {
		} else {
			h.decSliceTestMammoth2((*[]TestMammoth2)(&x.L), d)
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.A = [4]int64{}
	} else {
		if false {
		} else {
			h.decArray4int64((*[4]int64)(&x.A), d)
		}
	}
	for {
		yyj15++
		if yyhl15 {
			yyb15 = yyj15 > l
		} else {
			yyb15 = r.CheckBreak()
		}
		if yyb15 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj15-1, "")
	}
	r.ReadArrayEnd()
}

func (x codecSelfer19781) encSliceInterface(v []interface{}, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer19781) decSliceInterface(v *[]interface{}, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []interface{}{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]interface{}, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]interface{}, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if false {
					} else {
						z.DecFallback(&yyv1[yyj1], true)
					}
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]interface{}, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer19781) encSlicestring(v []string, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyv1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyv1))
			}
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer19781) decSlicestring(v *[]string, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []string{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]string, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]string, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, "")
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = ""
				} else {
					yyv1[yyj1] = (string)(r.DecodeString())
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]string, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer19781) encSlicefloat32(v []float32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if false {
		} else {
			r.EncodeFloat32(float32(yyv1))
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer19781) decSlicefloat32(v *[]float32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []float32{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 4)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]float32, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 4)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]float32, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, 0)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = 0
				} else {
					yyv1[yyj1] = (float32)(r.DecodeFloat32As64())
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]float32, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer19781) encSlicefloat64(v []float64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if false {
		} else {
			r.EncodeFloat64(float64(yyv1))
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer19781) decSlicefloat64(v *[]float64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []float64{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]float64, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]float64, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, 0)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = 0
				} else {
					yyv1[yyj1] = (float64)(r.DecodeFloat64())
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]float64, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer19781) encSliceuint(v []uint, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer19781) decSliceuint(v *[]uint, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []uint{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]uint, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]uint, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, 0)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = 0
				} else {
					yyv1[yyj1] = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]uint, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer19781) encSliceuint16(v []uint16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer19781) decSliceuint16(v *[]uint16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []uint16{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 2)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]uint16, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 2)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]uint16, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, 0)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = 0
				} else {
					yyv1[yyj1] = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]uint16, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer19781) encSliceuint32(v []uint32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer19781) decSliceuint32(v *[]uint32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []uint32{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 4)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]uint32, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 4)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]uint32, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, 0)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = 0
				} else {
					yyv1[yyj1] = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]uint32, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer19781) encSliceuint64(v []uint64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer19781) decSliceuint64(v *[]uint64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []uint64{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]uint64, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]uint64, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, 0)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = 0
				} else {
					yyv1[yyj1] = (uint64)(r.DecodeUint64())
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]uint64, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer19781) encSliceuintptr(v []uintptr, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer19781) decSliceuintptr(v *[]uintptr, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []uintptr{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]uintptr, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]uintptr, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, 0)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = 0
				} else {
					yyv1[yyj1] = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]uintptr, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer19781) encSliceint(v []int, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer19781) decSliceint(v *[]int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []int{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]int, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]int, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, 0)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = 0
				} else {
					yyv1[yyj1] = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]int, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer19781) encSliceint8(v []int8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer19781) decSliceint8(v *[]int8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []int8{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 1)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]int8, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 1)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]int8, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, 0)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = 0
				} else {
					yyv1[yyj1] = (int8)(z.C.IntV(r.DecodeInt64(), 8))
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]int8, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer19781) encSliceint16(v []int16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer19781) decSliceint16(v *[]int16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []int16{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 2)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]int16, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 2)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]int16, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, 0)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = 0
				} else {
					yyv1[yyj1] = (int16)(z.C.IntV(r.DecodeInt64(), 16))
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]int16, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer19781) encSliceint32(v []int32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer19781) decSliceint32(v *[]int32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []int32{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 4)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]int32, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 4)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]int32, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, 0)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = 0
				} else {
					yyv1[yyj1] = (int32)(z.C.IntV(r.DecodeInt64(), 32))
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]int32, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer19781) encSliceint64(v []int64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer19781) decSliceint64(v *[]int64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []int64{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]int64, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]int64, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, 0)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = 0
				} else {
					yyv1[yyj1] = (int64)(r.DecodeInt64())
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]int64, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer19781) encSlicebool(v []bool, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if false {
		} else {
			r.EncodeBool(bool(yyv1))
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer19781) decSlicebool(v *[]bool, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []bool{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 1)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]bool, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 1)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]bool, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, false)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = false
				} else {
					yyv1[yyj1] = (bool)(r.DecodeBool())
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]bool, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer19781) encMapInterfaceInterface(v map[interface{}]interface{}, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if yyk1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyk1)
			}
		}
		r.WriteMapElemValue()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapInterfaceInterface(v *map[interface{}]interface{}, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 32)
		yyv1 = make(map[interface{}]interface{}, yyrl1)
		*v = yyv1
	}
	var yymk1 interface{}
	var yymv1 interface{}
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		if !yybh1.InterfaceReset {
			yymg1 = true
		}
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = nil
			} else {
				if false {
				} else {
					z.DecFallback(&yymk1, true)
				}
			}

			if yybv1, yybok1 := yymk1.([]byte); yybok1 {
				yymk1 = string(yybv1)
			}
			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				if false {
				} else {
					z.DecFallback(&yymv1, true)
				}
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = nil
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapInterfacestring(v map[interface{}]string, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if yyk1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyk1)
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyv1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyv1))
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapInterfacestring(v *map[interface{}]string, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 32)
		yyv1 = make(map[interface{}]string, yyrl1)
		*v = yyv1
	}
	var yymk1 interface{}
	var yymv1 string
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = nil
			} else {
				if false {
				} else {
					z.DecFallback(&yymk1, true)
				}
			}

			if yybv1, yybok1 := yymk1.([]byte); yybok1 {
				yymk1 = string(yybv1)
			}
			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (string)(r.DecodeString())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = ""
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapInterfaceuint(v map[interface{}]uint, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if yyk1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyk1)
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapInterfaceuint(v *map[interface{}]uint, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[interface{}]uint, yyrl1)
		*v = yyv1
	}
	var yymk1 interface{}
	var yymv1 uint
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = nil
			} else {
				if false {
				} else {
					z.DecFallback(&yymk1, true)
				}
			}

			if yybv1, yybok1 := yymk1.([]byte); yybok1 {
				yymk1 = string(yybv1)
			}
			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapInterfaceuint8(v map[interface{}]uint8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if yyk1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyk1)
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapInterfaceuint8(v *map[interface{}]uint8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 17)
		yyv1 = make(map[interface{}]uint8, yyrl1)
		*v = yyv1
	}
	var yymk1 interface{}
	var yymv1 uint8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = nil
			} else {
				if false {
				} else {
					z.DecFallback(&yymk1, true)
				}
			}

			if yybv1, yybok1 := yymk1.([]byte); yybok1 {
				yymk1 = string(yybv1)
			}
			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapInterfaceuint16(v map[interface{}]uint16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if yyk1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyk1)
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapInterfaceuint16(v *map[interface{}]uint16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 18)
		yyv1 = make(map[interface{}]uint16, yyrl1)
		*v = yyv1
	}
	var yymk1 interface{}
	var yymv1 uint16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = nil
			} else {
				if false {
				} else {
					z.DecFallback(&yymk1, true)
				}
			}

			if yybv1, yybok1 := yymk1.([]byte); yybok1 {
				yymk1 = string(yybv1)
			}
			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapInterfaceuint32(v map[interface{}]uint32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if yyk1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyk1)
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapInterfaceuint32(v *map[interface{}]uint32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 20)
		yyv1 = make(map[interface{}]uint32, yyrl1)
		*v = yyv1
	}
	var yymk1 interface{}
	var yymv1 uint32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = nil
			} else {
				if false {
				} else {
					z.DecFallback(&yymk1, true)
				}
			}

			if yybv1, yybok1 := yymk1.([]byte); yybok1 {
				yymk1 = string(yybv1)
			}
			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapInterfaceuint64(v map[interface{}]uint64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if yyk1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyk1)
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapInterfaceuint64(v *map[interface{}]uint64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[interface{}]uint64, yyrl1)
		*v = yyv1
	}
	var yymk1 interface{}
	var yymv1 uint64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = nil
			} else {
				if false {
				} else {
					z.DecFallback(&yymk1, true)
				}
			}

			if yybv1, yybok1 := yymk1.([]byte); yybok1 {
				yymk1 = string(yybv1)
			}
			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint64)(r.DecodeUint64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapInterfaceuintptr(v map[interface{}]uintptr, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if yyk1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyk1)
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapInterfaceuintptr(v *map[interface{}]uintptr, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[interface{}]uintptr, yyrl1)
		*v = yyv1
	}
	var yymk1 interface{}
	var yymv1 uintptr
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = nil
			} else {
				if false {
				} else {
					z.DecFallback(&yymk1, true)
				}
			}

			if yybv1, yybok1 := yymk1.([]byte); yybok1 {
				yymk1 = string(yybv1)
			}
			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapInterfaceint(v map[interface{}]int, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if yyk1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyk1)
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapInterfaceint(v *map[interface{}]int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[interface{}]int, yyrl1)
		*v = yyv1
	}
	var yymk1 interface{}
	var yymv1 int
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = nil
			} else {
				if false {
				} else {
					z.DecFallback(&yymk1, true)
				}
			}

			if yybv1, yybok1 := yymk1.([]byte); yybok1 {
				yymk1 = string(yybv1)
			}
			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapInterfaceint8(v map[interface{}]int8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if yyk1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyk1)
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapInterfaceint8(v *map[interface{}]int8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 17)
		yyv1 = make(map[interface{}]int8, yyrl1)
		*v = yyv1
	}
	var yymk1 interface{}
	var yymv1 int8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = nil
			} else {
				if false {
				} else {
					z.DecFallback(&yymk1, true)
				}
			}

			if yybv1, yybok1 := yymk1.([]byte); yybok1 {
				yymk1 = string(yybv1)
			}
			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapInterfaceint16(v map[interface{}]int16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if yyk1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyk1)
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapInterfaceint16(v *map[interface{}]int16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 18)
		yyv1 = make(map[interface{}]int16, yyrl1)
		*v = yyv1
	}
	var yymk1 interface{}
	var yymv1 int16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = nil
			} else {
				if false {
				} else {
					z.DecFallback(&yymk1, true)
				}
			}

			if yybv1, yybok1 := yymk1.([]byte); yybok1 {
				yymk1 = string(yybv1)
			}
			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapInterfaceint32(v map[interface{}]int32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if yyk1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyk1)
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapInterfaceint32(v *map[interface{}]int32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 20)
		yyv1 = make(map[interface{}]int32, yyrl1)
		*v = yyv1
	}
	var yymk1 interface{}
	var yymv1 int32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = nil
			} else {
				if false {
				} else {
					z.DecFallback(&yymk1, true)
				}
			}

			if yybv1, yybok1 := yymk1.([]byte); yybok1 {
				yymk1 = string(yybv1)
			}
			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapInterfaceint64(v map[interface{}]int64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if yyk1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyk1)
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapInterfaceint64(v *map[interface{}]int64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[interface{}]int64, yyrl1)
		*v = yyv1
	}
	var yymk1 interface{}
	var yymv1 int64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = nil
			} else {
				if false {
				} else {
					z.DecFallback(&yymk1, true)
				}
			}

			if yybv1, yybok1 := yymk1.([]byte); yybok1 {
				yymk1 = string(yybv1)
			}
			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int64)(r.DecodeInt64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapInterfacefloat32(v map[interface{}]float32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if yyk1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyk1)
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat32(float32(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapInterfacefloat32(v *map[interface{}]float32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 20)
		yyv1 = make(map[interface{}]float32, yyrl1)
		*v = yyv1
	}
	var yymk1 interface{}
	var yymv1 float32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = nil
			} else {
				if false {
				} else {
					z.DecFallback(&yymk1, true)
				}
			}

			if yybv1, yybok1 := yymk1.([]byte); yybok1 {
				yymk1 = string(yybv1)
			}
			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float32)(r.DecodeFloat32As64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapInterfacefloat64(v map[interface{}]float64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if yyk1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyk1)
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat64(float64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapInterfacefloat64(v *map[interface{}]float64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[interface{}]float64, yyrl1)
		*v = yyv1
	}
	var yymk1 interface{}
	var yymv1 float64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = nil
			} else {
				if false {
				} else {
					z.DecFallback(&yymk1, true)
				}
			}

			if yybv1, yybok1 := yymk1.([]byte); yybok1 {
				yymk1 = string(yybv1)
			}
			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float64)(r.DecodeFloat64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapInterfacebool(v map[interface{}]bool, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if yyk1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyk1)
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeBool(bool(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapInterfacebool(v *map[interface{}]bool, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 17)
		yyv1 = make(map[interface{}]bool, yyrl1)
		*v = yyv1
	}
	var yymk1 interface{}
	var yymv1 bool
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = nil
			} else {
				if false {
				} else {
					z.DecFallback(&yymk1, true)
				}
			}

			if yybv1, yybok1 := yymk1.([]byte); yybok1 {
				yymk1 = string(yybv1)
			}
			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (bool)(r.DecodeBool())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = false
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapstringInterface(v map[string]interface{}, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyk1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyk1))
			}
		}
		r.WriteMapElemValue()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapstringInterface(v *map[string]interface{}, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 32)
		yyv1 = make(map[string]interface{}, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 interface{}
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		if !yybh1.InterfaceReset {
			yymg1 = true
		}
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yymk1 = (string)(r.DecodeString())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				if false {
				} else {
					z.DecFallback(&yymv1, true)
				}
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = nil
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapstringstring(v map[string]string, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyk1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyk1))
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyv1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyv1))
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapstringstring(v *map[string]string, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 32)
		yyv1 = make(map[string]string, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 string
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yymk1 = (string)(r.DecodeString())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (string)(r.DecodeString())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = ""
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapstringuint(v map[string]uint, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyk1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyk1))
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapstringuint(v *map[string]uint, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]uint, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 uint
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yymk1 = (string)(r.DecodeString())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapstringuint8(v map[string]uint8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyk1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyk1))
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapstringuint8(v *map[string]uint8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 17)
		yyv1 = make(map[string]uint8, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 uint8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yymk1 = (string)(r.DecodeString())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapstringuint16(v map[string]uint16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyk1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyk1))
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapstringuint16(v *map[string]uint16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 18)
		yyv1 = make(map[string]uint16, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 uint16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yymk1 = (string)(r.DecodeString())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapstringuint32(v map[string]uint32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyk1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyk1))
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapstringuint32(v *map[string]uint32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 20)
		yyv1 = make(map[string]uint32, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 uint32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yymk1 = (string)(r.DecodeString())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapstringuint64(v map[string]uint64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyk1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyk1))
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapstringuint64(v *map[string]uint64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]uint64, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 uint64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yymk1 = (string)(r.DecodeString())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint64)(r.DecodeUint64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapstringuintptr(v map[string]uintptr, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyk1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyk1))
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapstringuintptr(v *map[string]uintptr, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]uintptr, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 uintptr
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yymk1 = (string)(r.DecodeString())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapstringint(v map[string]int, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyk1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyk1))
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapstringint(v *map[string]int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]int, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 int
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yymk1 = (string)(r.DecodeString())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapstringint8(v map[string]int8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyk1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyk1))
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapstringint8(v *map[string]int8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 17)
		yyv1 = make(map[string]int8, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 int8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yymk1 = (string)(r.DecodeString())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapstringint16(v map[string]int16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyk1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyk1))
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapstringint16(v *map[string]int16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 18)
		yyv1 = make(map[string]int16, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 int16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yymk1 = (string)(r.DecodeString())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapstringint32(v map[string]int32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyk1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyk1))
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapstringint32(v *map[string]int32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 20)
		yyv1 = make(map[string]int32, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 int32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yymk1 = (string)(r.DecodeString())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapstringint64(v map[string]int64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyk1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyk1))
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapstringint64(v *map[string]int64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]int64, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 int64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yymk1 = (string)(r.DecodeString())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int64)(r.DecodeInt64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapstringfloat32(v map[string]float32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyk1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyk1))
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat32(float32(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapstringfloat32(v *map[string]float32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 20)
		yyv1 = make(map[string]float32, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 float32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yymk1 = (string)(r.DecodeString())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float32)(r.DecodeFloat32As64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapstringfloat64(v map[string]float64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyk1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyk1))
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat64(float64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapstringfloat64(v *map[string]float64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]float64, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 float64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yymk1 = (string)(r.DecodeString())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float64)(r.DecodeFloat64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapstringbool(v map[string]bool, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyk1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyk1))
			}
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeBool(bool(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapstringbool(v *map[string]bool, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 17)
		yyv1 = make(map[string]bool, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 bool
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yymk1 = (string)(r.DecodeString())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (bool)(r.DecodeBool())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = false
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat32Interface(v map[float32]interface{}, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat32(float32(yyk1))
		}
		r.WriteMapElemValue()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat32Interface(v *map[float32]interface{}, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 20)
		yyv1 = make(map[float32]interface{}, yyrl1)
		*v = yyv1
	}
	var yymk1 float32
	var yymv1 interface{}
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		if !yybh1.InterfaceReset {
			yymg1 = true
		}
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float32)(r.DecodeFloat32As64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				if false {
				} else {
					z.DecFallback(&yymv1, true)
				}
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = nil
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat32string(v map[float32]string, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat32(float32(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyv1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyv1))
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat32string(v *map[float32]string, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 20)
		yyv1 = make(map[float32]string, yyrl1)
		*v = yyv1
	}
	var yymk1 float32
	var yymv1 string
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float32)(r.DecodeFloat32As64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (string)(r.DecodeString())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = ""
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat32uint(v map[float32]uint, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat32(float32(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat32uint(v *map[float32]uint, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[float32]uint, yyrl1)
		*v = yyv1
	}
	var yymk1 float32
	var yymv1 uint
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float32)(r.DecodeFloat32As64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat32uint8(v map[float32]uint8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat32(float32(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat32uint8(v *map[float32]uint8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 5)
		yyv1 = make(map[float32]uint8, yyrl1)
		*v = yyv1
	}
	var yymk1 float32
	var yymv1 uint8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float32)(r.DecodeFloat32As64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat32uint16(v map[float32]uint16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat32(float32(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat32uint16(v *map[float32]uint16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 6)
		yyv1 = make(map[float32]uint16, yyrl1)
		*v = yyv1
	}
	var yymk1 float32
	var yymv1 uint16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float32)(r.DecodeFloat32As64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat32uint32(v map[float32]uint32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat32(float32(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat32uint32(v *map[float32]uint32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 8)
		yyv1 = make(map[float32]uint32, yyrl1)
		*v = yyv1
	}
	var yymk1 float32
	var yymv1 uint32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float32)(r.DecodeFloat32As64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat32uint64(v map[float32]uint64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat32(float32(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat32uint64(v *map[float32]uint64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[float32]uint64, yyrl1)
		*v = yyv1
	}
	var yymk1 float32
	var yymv1 uint64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float32)(r.DecodeFloat32As64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint64)(r.DecodeUint64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat32uintptr(v map[float32]uintptr, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat32(float32(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat32uintptr(v *map[float32]uintptr, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[float32]uintptr, yyrl1)
		*v = yyv1
	}
	var yymk1 float32
	var yymv1 uintptr
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float32)(r.DecodeFloat32As64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat32int(v map[float32]int, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat32(float32(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat32int(v *map[float32]int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[float32]int, yyrl1)
		*v = yyv1
	}
	var yymk1 float32
	var yymv1 int
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float32)(r.DecodeFloat32As64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat32int8(v map[float32]int8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat32(float32(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat32int8(v *map[float32]int8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 5)
		yyv1 = make(map[float32]int8, yyrl1)
		*v = yyv1
	}
	var yymk1 float32
	var yymv1 int8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float32)(r.DecodeFloat32As64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat32int16(v map[float32]int16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat32(float32(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat32int16(v *map[float32]int16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 6)
		yyv1 = make(map[float32]int16, yyrl1)
		*v = yyv1
	}
	var yymk1 float32
	var yymv1 int16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float32)(r.DecodeFloat32As64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat32int32(v map[float32]int32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat32(float32(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat32int32(v *map[float32]int32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 8)
		yyv1 = make(map[float32]int32, yyrl1)
		*v = yyv1
	}
	var yymk1 float32
	var yymv1 int32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float32)(r.DecodeFloat32As64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat32int64(v map[float32]int64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat32(float32(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat32int64(v *map[float32]int64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[float32]int64, yyrl1)
		*v = yyv1
	}
	var yymk1 float32
	var yymv1 int64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float32)(r.DecodeFloat32As64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int64)(r.DecodeInt64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat32float32(v map[float32]float32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat32(float32(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat32(float32(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat32float32(v *map[float32]float32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 8)
		yyv1 = make(map[float32]float32, yyrl1)
		*v = yyv1
	}
	var yymk1 float32
	var yymv1 float32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float32)(r.DecodeFloat32As64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float32)(r.DecodeFloat32As64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat32float64(v map[float32]float64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat32(float32(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat64(float64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat32float64(v *map[float32]float64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[float32]float64, yyrl1)
		*v = yyv1
	}
	var yymk1 float32
	var yymv1 float64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float32)(r.DecodeFloat32As64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float64)(r.DecodeFloat64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat32bool(v map[float32]bool, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat32(float32(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeBool(bool(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat32bool(v *map[float32]bool, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 5)
		yyv1 = make(map[float32]bool, yyrl1)
		*v = yyv1
	}
	var yymk1 float32
	var yymv1 bool
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float32)(r.DecodeFloat32As64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (bool)(r.DecodeBool())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = false
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat64Interface(v map[float64]interface{}, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat64(float64(yyk1))
		}
		r.WriteMapElemValue()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat64Interface(v *map[float64]interface{}, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[float64]interface{}, yyrl1)
		*v = yyv1
	}
	var yymk1 float64
	var yymv1 interface{}
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		if !yybh1.InterfaceReset {
			yymg1 = true
		}
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float64)(r.DecodeFloat64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				if false {
				} else {
					z.DecFallback(&yymv1, true)
				}
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = nil
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat64string(v map[float64]string, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat64(float64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyv1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyv1))
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat64string(v *map[float64]string, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[float64]string, yyrl1)
		*v = yyv1
	}
	var yymk1 float64
	var yymv1 string
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float64)(r.DecodeFloat64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (string)(r.DecodeString())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = ""
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat64uint(v map[float64]uint, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat64(float64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat64uint(v *map[float64]uint, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[float64]uint, yyrl1)
		*v = yyv1
	}
	var yymk1 float64
	var yymv1 uint
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float64)(r.DecodeFloat64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat64uint8(v map[float64]uint8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat64(float64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat64uint8(v *map[float64]uint8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[float64]uint8, yyrl1)
		*v = yyv1
	}
	var yymk1 float64
	var yymv1 uint8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float64)(r.DecodeFloat64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat64uint16(v map[float64]uint16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat64(float64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat64uint16(v *map[float64]uint16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[float64]uint16, yyrl1)
		*v = yyv1
	}
	var yymk1 float64
	var yymv1 uint16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float64)(r.DecodeFloat64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat64uint32(v map[float64]uint32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat64(float64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat64uint32(v *map[float64]uint32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[float64]uint32, yyrl1)
		*v = yyv1
	}
	var yymk1 float64
	var yymv1 uint32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float64)(r.DecodeFloat64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat64uint64(v map[float64]uint64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat64(float64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat64uint64(v *map[float64]uint64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[float64]uint64, yyrl1)
		*v = yyv1
	}
	var yymk1 float64
	var yymv1 uint64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float64)(r.DecodeFloat64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint64)(r.DecodeUint64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat64uintptr(v map[float64]uintptr, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat64(float64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat64uintptr(v *map[float64]uintptr, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[float64]uintptr, yyrl1)
		*v = yyv1
	}
	var yymk1 float64
	var yymv1 uintptr
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float64)(r.DecodeFloat64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat64int(v map[float64]int, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat64(float64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat64int(v *map[float64]int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[float64]int, yyrl1)
		*v = yyv1
	}
	var yymk1 float64
	var yymv1 int
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float64)(r.DecodeFloat64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat64int8(v map[float64]int8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat64(float64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat64int8(v *map[float64]int8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[float64]int8, yyrl1)
		*v = yyv1
	}
	var yymk1 float64
	var yymv1 int8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float64)(r.DecodeFloat64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat64int16(v map[float64]int16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat64(float64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat64int16(v *map[float64]int16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[float64]int16, yyrl1)
		*v = yyv1
	}
	var yymk1 float64
	var yymv1 int16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float64)(r.DecodeFloat64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat64int32(v map[float64]int32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat64(float64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat64int32(v *map[float64]int32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[float64]int32, yyrl1)
		*v = yyv1
	}
	var yymk1 float64
	var yymv1 int32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float64)(r.DecodeFloat64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat64int64(v map[float64]int64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat64(float64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat64int64(v *map[float64]int64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[float64]int64, yyrl1)
		*v = yyv1
	}
	var yymk1 float64
	var yymv1 int64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float64)(r.DecodeFloat64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int64)(r.DecodeInt64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat64float32(v map[float64]float32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat64(float64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat32(float32(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat64float32(v *map[float64]float32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[float64]float32, yyrl1)
		*v = yyv1
	}
	var yymk1 float64
	var yymv1 float32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float64)(r.DecodeFloat64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float32)(r.DecodeFloat32As64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat64float64(v map[float64]float64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat64(float64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat64(float64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat64float64(v *map[float64]float64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[float64]float64, yyrl1)
		*v = yyv1
	}
	var yymk1 float64
	var yymv1 float64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float64)(r.DecodeFloat64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float64)(r.DecodeFloat64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapfloat64bool(v map[float64]bool, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeFloat64(float64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeBool(bool(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapfloat64bool(v *map[float64]bool, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[float64]bool, yyrl1)
		*v = yyv1
	}
	var yymk1 float64
	var yymv1 bool
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (float64)(r.DecodeFloat64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (bool)(r.DecodeBool())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = false
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintInterface(v map[uint]interface{}, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintInterface(v *map[uint]interface{}, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[uint]interface{}, yyrl1)
		*v = yyv1
	}
	var yymk1 uint
	var yymv1 interface{}
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		if !yybh1.InterfaceReset {
			yymg1 = true
		}
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				if false {
				} else {
					z.DecFallback(&yymv1, true)
				}
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = nil
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintstring(v map[uint]string, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyv1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyv1))
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintstring(v *map[uint]string, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[uint]string, yyrl1)
		*v = yyv1
	}
	var yymk1 uint
	var yymv1 string
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (string)(r.DecodeString())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = ""
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintuint(v map[uint]uint, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintuint(v *map[uint]uint, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[uint]uint, yyrl1)
		*v = yyv1
	}
	var yymk1 uint
	var yymv1 uint
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintuint8(v map[uint]uint8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintuint8(v *map[uint]uint8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[uint]uint8, yyrl1)
		*v = yyv1
	}
	var yymk1 uint
	var yymv1 uint8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintuint16(v map[uint]uint16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintuint16(v *map[uint]uint16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[uint]uint16, yyrl1)
		*v = yyv1
	}
	var yymk1 uint
	var yymv1 uint16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintuint32(v map[uint]uint32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintuint32(v *map[uint]uint32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[uint]uint32, yyrl1)
		*v = yyv1
	}
	var yymk1 uint
	var yymv1 uint32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintuint64(v map[uint]uint64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintuint64(v *map[uint]uint64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[uint]uint64, yyrl1)
		*v = yyv1
	}
	var yymk1 uint
	var yymv1 uint64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint64)(r.DecodeUint64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintuintptr(v map[uint]uintptr, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintuintptr(v *map[uint]uintptr, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[uint]uintptr, yyrl1)
		*v = yyv1
	}
	var yymk1 uint
	var yymv1 uintptr
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintint(v map[uint]int, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintint(v *map[uint]int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[uint]int, yyrl1)
		*v = yyv1
	}
	var yymk1 uint
	var yymv1 int
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintint8(v map[uint]int8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintint8(v *map[uint]int8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[uint]int8, yyrl1)
		*v = yyv1
	}
	var yymk1 uint
	var yymv1 int8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintint16(v map[uint]int16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintint16(v *map[uint]int16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[uint]int16, yyrl1)
		*v = yyv1
	}
	var yymk1 uint
	var yymv1 int16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintint32(v map[uint]int32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintint32(v *map[uint]int32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[uint]int32, yyrl1)
		*v = yyv1
	}
	var yymk1 uint
	var yymv1 int32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintint64(v map[uint]int64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintint64(v *map[uint]int64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[uint]int64, yyrl1)
		*v = yyv1
	}
	var yymk1 uint
	var yymv1 int64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int64)(r.DecodeInt64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintfloat32(v map[uint]float32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat32(float32(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintfloat32(v *map[uint]float32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[uint]float32, yyrl1)
		*v = yyv1
	}
	var yymk1 uint
	var yymv1 float32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float32)(r.DecodeFloat32As64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintfloat64(v map[uint]float64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat64(float64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintfloat64(v *map[uint]float64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[uint]float64, yyrl1)
		*v = yyv1
	}
	var yymk1 uint
	var yymv1 float64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float64)(r.DecodeFloat64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintbool(v map[uint]bool, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeBool(bool(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintbool(v *map[uint]bool, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[uint]bool, yyrl1)
		*v = yyv1
	}
	var yymk1 uint
	var yymv1 bool
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (bool)(r.DecodeBool())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = false
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint8Interface(v map[uint8]interface{}, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint8Interface(v *map[uint8]interface{}, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 17)
		yyv1 = make(map[uint8]interface{}, yyrl1)
		*v = yyv1
	}
	var yymk1 uint8
	var yymv1 interface{}
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		if !yybh1.InterfaceReset {
			yymg1 = true
		}
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				if false {
				} else {
					z.DecFallback(&yymv1, true)
				}
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = nil
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint8string(v map[uint8]string, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyv1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyv1))
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint8string(v *map[uint8]string, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 17)
		yyv1 = make(map[uint8]string, yyrl1)
		*v = yyv1
	}
	var yymk1 uint8
	var yymv1 string
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (string)(r.DecodeString())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = ""
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint8uint(v map[uint8]uint, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint8uint(v *map[uint8]uint, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[uint8]uint, yyrl1)
		*v = yyv1
	}
	var yymk1 uint8
	var yymv1 uint
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint8uint8(v map[uint8]uint8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint8uint8(v *map[uint8]uint8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 2)
		yyv1 = make(map[uint8]uint8, yyrl1)
		*v = yyv1
	}
	var yymk1 uint8
	var yymv1 uint8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint8uint16(v map[uint8]uint16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint8uint16(v *map[uint8]uint16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 3)
		yyv1 = make(map[uint8]uint16, yyrl1)
		*v = yyv1
	}
	var yymk1 uint8
	var yymv1 uint16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint8uint32(v map[uint8]uint32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint8uint32(v *map[uint8]uint32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 5)
		yyv1 = make(map[uint8]uint32, yyrl1)
		*v = yyv1
	}
	var yymk1 uint8
	var yymv1 uint32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint8uint64(v map[uint8]uint64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint8uint64(v *map[uint8]uint64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[uint8]uint64, yyrl1)
		*v = yyv1
	}
	var yymk1 uint8
	var yymv1 uint64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint64)(r.DecodeUint64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint8uintptr(v map[uint8]uintptr, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint8uintptr(v *map[uint8]uintptr, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[uint8]uintptr, yyrl1)
		*v = yyv1
	}
	var yymk1 uint8
	var yymv1 uintptr
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint8int(v map[uint8]int, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint8int(v *map[uint8]int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[uint8]int, yyrl1)
		*v = yyv1
	}
	var yymk1 uint8
	var yymv1 int
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint8int8(v map[uint8]int8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint8int8(v *map[uint8]int8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 2)
		yyv1 = make(map[uint8]int8, yyrl1)
		*v = yyv1
	}
	var yymk1 uint8
	var yymv1 int8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint8int16(v map[uint8]int16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint8int16(v *map[uint8]int16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 3)
		yyv1 = make(map[uint8]int16, yyrl1)
		*v = yyv1
	}
	var yymk1 uint8
	var yymv1 int16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint8int32(v map[uint8]int32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint8int32(v *map[uint8]int32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 5)
		yyv1 = make(map[uint8]int32, yyrl1)
		*v = yyv1
	}
	var yymk1 uint8
	var yymv1 int32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint8int64(v map[uint8]int64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint8int64(v *map[uint8]int64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[uint8]int64, yyrl1)
		*v = yyv1
	}
	var yymk1 uint8
	var yymv1 int64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int64)(r.DecodeInt64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint8float32(v map[uint8]float32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat32(float32(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint8float32(v *map[uint8]float32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 5)
		yyv1 = make(map[uint8]float32, yyrl1)
		*v = yyv1
	}
	var yymk1 uint8
	var yymv1 float32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float32)(r.DecodeFloat32As64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint8float64(v map[uint8]float64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat64(float64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint8float64(v *map[uint8]float64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[uint8]float64, yyrl1)
		*v = yyv1
	}
	var yymk1 uint8
	var yymv1 float64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float64)(r.DecodeFloat64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint8bool(v map[uint8]bool, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeBool(bool(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint8bool(v *map[uint8]bool, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 2)
		yyv1 = make(map[uint8]bool, yyrl1)
		*v = yyv1
	}
	var yymk1 uint8
	var yymv1 bool
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (bool)(r.DecodeBool())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = false
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint16Interface(v map[uint16]interface{}, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint16Interface(v *map[uint16]interface{}, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 18)
		yyv1 = make(map[uint16]interface{}, yyrl1)
		*v = yyv1
	}
	var yymk1 uint16
	var yymv1 interface{}
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		if !yybh1.InterfaceReset {
			yymg1 = true
		}
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				if false {
				} else {
					z.DecFallback(&yymv1, true)
				}
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = nil
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint16string(v map[uint16]string, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyv1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyv1))
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint16string(v *map[uint16]string, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 18)
		yyv1 = make(map[uint16]string, yyrl1)
		*v = yyv1
	}
	var yymk1 uint16
	var yymv1 string
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (string)(r.DecodeString())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = ""
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint16uint(v map[uint16]uint, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint16uint(v *map[uint16]uint, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[uint16]uint, yyrl1)
		*v = yyv1
	}
	var yymk1 uint16
	var yymv1 uint
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint16uint8(v map[uint16]uint8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint16uint8(v *map[uint16]uint8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 3)
		yyv1 = make(map[uint16]uint8, yyrl1)
		*v = yyv1
	}
	var yymk1 uint16
	var yymv1 uint8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint16uint16(v map[uint16]uint16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint16uint16(v *map[uint16]uint16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 4)
		yyv1 = make(map[uint16]uint16, yyrl1)
		*v = yyv1
	}
	var yymk1 uint16
	var yymv1 uint16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint16uint32(v map[uint16]uint32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint16uint32(v *map[uint16]uint32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 6)
		yyv1 = make(map[uint16]uint32, yyrl1)
		*v = yyv1
	}
	var yymk1 uint16
	var yymv1 uint32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint16uint64(v map[uint16]uint64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint16uint64(v *map[uint16]uint64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[uint16]uint64, yyrl1)
		*v = yyv1
	}
	var yymk1 uint16
	var yymv1 uint64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint64)(r.DecodeUint64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint16uintptr(v map[uint16]uintptr, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint16uintptr(v *map[uint16]uintptr, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[uint16]uintptr, yyrl1)
		*v = yyv1
	}
	var yymk1 uint16
	var yymv1 uintptr
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint16int(v map[uint16]int, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint16int(v *map[uint16]int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[uint16]int, yyrl1)
		*v = yyv1
	}
	var yymk1 uint16
	var yymv1 int
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint16int8(v map[uint16]int8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint16int8(v *map[uint16]int8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 3)
		yyv1 = make(map[uint16]int8, yyrl1)
		*v = yyv1
	}
	var yymk1 uint16
	var yymv1 int8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint16int16(v map[uint16]int16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint16int16(v *map[uint16]int16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 4)
		yyv1 = make(map[uint16]int16, yyrl1)
		*v = yyv1
	}
	var yymk1 uint16
	var yymv1 int16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint16int32(v map[uint16]int32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint16int32(v *map[uint16]int32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 6)
		yyv1 = make(map[uint16]int32, yyrl1)
		*v = yyv1
	}
	var yymk1 uint16
	var yymv1 int32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint16int64(v map[uint16]int64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint16int64(v *map[uint16]int64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[uint16]int64, yyrl1)
		*v = yyv1
	}
	var yymk1 uint16
	var yymv1 int64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int64)(r.DecodeInt64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint16float32(v map[uint16]float32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat32(float32(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint16float32(v *map[uint16]float32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 6)
		yyv1 = make(map[uint16]float32, yyrl1)
		*v = yyv1
	}
	var yymk1 uint16
	var yymv1 float32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float32)(r.DecodeFloat32As64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint16float64(v map[uint16]float64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat64(float64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint16float64(v *map[uint16]float64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[uint16]float64, yyrl1)
		*v = yyv1
	}
	var yymk1 uint16
	var yymv1 float64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float64)(r.DecodeFloat64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint16bool(v map[uint16]bool, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeBool(bool(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint16bool(v *map[uint16]bool, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 3)
		yyv1 = make(map[uint16]bool, yyrl1)
		*v = yyv1
	}
	var yymk1 uint16
	var yymv1 bool
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (bool)(r.DecodeBool())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = false
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint32Interface(v map[uint32]interface{}, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint32Interface(v *map[uint32]interface{}, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 20)
		yyv1 = make(map[uint32]interface{}, yyrl1)
		*v = yyv1
	}
	var yymk1 uint32
	var yymv1 interface{}
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		if !yybh1.InterfaceReset {
			yymg1 = true
		}
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				if false {
				} else {
					z.DecFallback(&yymv1, true)
				}
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = nil
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint32string(v map[uint32]string, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyv1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyv1))
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint32string(v *map[uint32]string, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 20)
		yyv1 = make(map[uint32]string, yyrl1)
		*v = yyv1
	}
	var yymk1 uint32
	var yymv1 string
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (string)(r.DecodeString())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = ""
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint32uint(v map[uint32]uint, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint32uint(v *map[uint32]uint, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[uint32]uint, yyrl1)
		*v = yyv1
	}
	var yymk1 uint32
	var yymv1 uint
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint32uint8(v map[uint32]uint8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint32uint8(v *map[uint32]uint8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 5)
		yyv1 = make(map[uint32]uint8, yyrl1)
		*v = yyv1
	}
	var yymk1 uint32
	var yymv1 uint8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint32uint16(v map[uint32]uint16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint32uint16(v *map[uint32]uint16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 6)
		yyv1 = make(map[uint32]uint16, yyrl1)
		*v = yyv1
	}
	var yymk1 uint32
	var yymv1 uint16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint32uint32(v map[uint32]uint32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint32uint32(v *map[uint32]uint32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 8)
		yyv1 = make(map[uint32]uint32, yyrl1)
		*v = yyv1
	}
	var yymk1 uint32
	var yymv1 uint32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint32uint64(v map[uint32]uint64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint32uint64(v *map[uint32]uint64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[uint32]uint64, yyrl1)
		*v = yyv1
	}
	var yymk1 uint32
	var yymv1 uint64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint64)(r.DecodeUint64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint32uintptr(v map[uint32]uintptr, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint32uintptr(v *map[uint32]uintptr, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[uint32]uintptr, yyrl1)
		*v = yyv1
	}
	var yymk1 uint32
	var yymv1 uintptr
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint32int(v map[uint32]int, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint32int(v *map[uint32]int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[uint32]int, yyrl1)
		*v = yyv1
	}
	var yymk1 uint32
	var yymv1 int
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint32int8(v map[uint32]int8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint32int8(v *map[uint32]int8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 5)
		yyv1 = make(map[uint32]int8, yyrl1)
		*v = yyv1
	}
	var yymk1 uint32
	var yymv1 int8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint32int16(v map[uint32]int16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint32int16(v *map[uint32]int16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 6)
		yyv1 = make(map[uint32]int16, yyrl1)
		*v = yyv1
	}
	var yymk1 uint32
	var yymv1 int16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint32int32(v map[uint32]int32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint32int32(v *map[uint32]int32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 8)
		yyv1 = make(map[uint32]int32, yyrl1)
		*v = yyv1
	}
	var yymk1 uint32
	var yymv1 int32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint32int64(v map[uint32]int64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint32int64(v *map[uint32]int64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[uint32]int64, yyrl1)
		*v = yyv1
	}
	var yymk1 uint32
	var yymv1 int64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int64)(r.DecodeInt64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint32float32(v map[uint32]float32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat32(float32(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint32float32(v *map[uint32]float32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 8)
		yyv1 = make(map[uint32]float32, yyrl1)
		*v = yyv1
	}
	var yymk1 uint32
	var yymv1 float32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float32)(r.DecodeFloat32As64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint32float64(v map[uint32]float64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat64(float64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint32float64(v *map[uint32]float64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[uint32]float64, yyrl1)
		*v = yyv1
	}
	var yymk1 uint32
	var yymv1 float64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float64)(r.DecodeFloat64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint32bool(v map[uint32]bool, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeBool(bool(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint32bool(v *map[uint32]bool, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 5)
		yyv1 = make(map[uint32]bool, yyrl1)
		*v = yyv1
	}
	var yymk1 uint32
	var yymv1 bool
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (bool)(r.DecodeBool())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = false
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint64Interface(v map[uint64]interface{}, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint64Interface(v *map[uint64]interface{}, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[uint64]interface{}, yyrl1)
		*v = yyv1
	}
	var yymk1 uint64
	var yymv1 interface{}
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		if !yybh1.InterfaceReset {
			yymg1 = true
		}
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint64)(r.DecodeUint64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				if false {
				} else {
					z.DecFallback(&yymv1, true)
				}
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = nil
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint64string(v map[uint64]string, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyv1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyv1))
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint64string(v *map[uint64]string, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[uint64]string, yyrl1)
		*v = yyv1
	}
	var yymk1 uint64
	var yymv1 string
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint64)(r.DecodeUint64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (string)(r.DecodeString())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = ""
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint64uint(v map[uint64]uint, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint64uint(v *map[uint64]uint, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[uint64]uint, yyrl1)
		*v = yyv1
	}
	var yymk1 uint64
	var yymv1 uint
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint64)(r.DecodeUint64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint64uint8(v map[uint64]uint8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint64uint8(v *map[uint64]uint8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[uint64]uint8, yyrl1)
		*v = yyv1
	}
	var yymk1 uint64
	var yymv1 uint8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint64)(r.DecodeUint64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint64uint16(v map[uint64]uint16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint64uint16(v *map[uint64]uint16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[uint64]uint16, yyrl1)
		*v = yyv1
	}
	var yymk1 uint64
	var yymv1 uint16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint64)(r.DecodeUint64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint64uint32(v map[uint64]uint32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint64uint32(v *map[uint64]uint32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[uint64]uint32, yyrl1)
		*v = yyv1
	}
	var yymk1 uint64
	var yymv1 uint32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint64)(r.DecodeUint64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint64uint64(v map[uint64]uint64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint64uint64(v *map[uint64]uint64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[uint64]uint64, yyrl1)
		*v = yyv1
	}
	var yymk1 uint64
	var yymv1 uint64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint64)(r.DecodeUint64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint64)(r.DecodeUint64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint64uintptr(v map[uint64]uintptr, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint64uintptr(v *map[uint64]uintptr, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[uint64]uintptr, yyrl1)
		*v = yyv1
	}
	var yymk1 uint64
	var yymv1 uintptr
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint64)(r.DecodeUint64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint64int(v map[uint64]int, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint64int(v *map[uint64]int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[uint64]int, yyrl1)
		*v = yyv1
	}
	var yymk1 uint64
	var yymv1 int
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint64)(r.DecodeUint64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint64int8(v map[uint64]int8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint64int8(v *map[uint64]int8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[uint64]int8, yyrl1)
		*v = yyv1
	}
	var yymk1 uint64
	var yymv1 int8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint64)(r.DecodeUint64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint64int16(v map[uint64]int16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint64int16(v *map[uint64]int16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[uint64]int16, yyrl1)
		*v = yyv1
	}
	var yymk1 uint64
	var yymv1 int16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint64)(r.DecodeUint64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint64int32(v map[uint64]int32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint64int32(v *map[uint64]int32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[uint64]int32, yyrl1)
		*v = yyv1
	}
	var yymk1 uint64
	var yymv1 int32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint64)(r.DecodeUint64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint64int64(v map[uint64]int64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint64int64(v *map[uint64]int64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[uint64]int64, yyrl1)
		*v = yyv1
	}
	var yymk1 uint64
	var yymv1 int64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint64)(r.DecodeUint64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int64)(r.DecodeInt64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint64float32(v map[uint64]float32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat32(float32(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint64float32(v *map[uint64]float32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[uint64]float32, yyrl1)
		*v = yyv1
	}
	var yymk1 uint64
	var yymv1 float32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint64)(r.DecodeUint64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float32)(r.DecodeFloat32As64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint64float64(v map[uint64]float64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat64(float64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint64float64(v *map[uint64]float64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[uint64]float64, yyrl1)
		*v = yyv1
	}
	var yymk1 uint64
	var yymv1 float64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint64)(r.DecodeUint64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float64)(r.DecodeFloat64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuint64bool(v map[uint64]bool, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeBool(bool(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuint64bool(v *map[uint64]bool, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[uint64]bool, yyrl1)
		*v = yyv1
	}
	var yymk1 uint64
	var yymv1 bool
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uint64)(r.DecodeUint64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (bool)(r.DecodeBool())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = false
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintptrInterface(v map[uintptr]interface{}, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintptrInterface(v *map[uintptr]interface{}, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[uintptr]interface{}, yyrl1)
		*v = yyv1
	}
	var yymk1 uintptr
	var yymv1 interface{}
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		if !yybh1.InterfaceReset {
			yymg1 = true
		}
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				if false {
				} else {
					z.DecFallback(&yymv1, true)
				}
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = nil
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintptrstring(v map[uintptr]string, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyv1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyv1))
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintptrstring(v *map[uintptr]string, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[uintptr]string, yyrl1)
		*v = yyv1
	}
	var yymk1 uintptr
	var yymv1 string
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (string)(r.DecodeString())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = ""
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintptruint(v map[uintptr]uint, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintptruint(v *map[uintptr]uint, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[uintptr]uint, yyrl1)
		*v = yyv1
	}
	var yymk1 uintptr
	var yymv1 uint
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintptruint8(v map[uintptr]uint8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintptruint8(v *map[uintptr]uint8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[uintptr]uint8, yyrl1)
		*v = yyv1
	}
	var yymk1 uintptr
	var yymv1 uint8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintptruint16(v map[uintptr]uint16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintptruint16(v *map[uintptr]uint16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[uintptr]uint16, yyrl1)
		*v = yyv1
	}
	var yymk1 uintptr
	var yymv1 uint16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintptruint32(v map[uintptr]uint32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintptruint32(v *map[uintptr]uint32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[uintptr]uint32, yyrl1)
		*v = yyv1
	}
	var yymk1 uintptr
	var yymv1 uint32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintptruint64(v map[uintptr]uint64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintptruint64(v *map[uintptr]uint64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[uintptr]uint64, yyrl1)
		*v = yyv1
	}
	var yymk1 uintptr
	var yymv1 uint64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint64)(r.DecodeUint64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintptruintptr(v map[uintptr]uintptr, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintptruintptr(v *map[uintptr]uintptr, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[uintptr]uintptr, yyrl1)
		*v = yyv1
	}
	var yymk1 uintptr
	var yymv1 uintptr
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintptrint(v map[uintptr]int, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintptrint(v *map[uintptr]int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[uintptr]int, yyrl1)
		*v = yyv1
	}
	var yymk1 uintptr
	var yymv1 int
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintptrint8(v map[uintptr]int8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintptrint8(v *map[uintptr]int8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[uintptr]int8, yyrl1)
		*v = yyv1
	}
	var yymk1 uintptr
	var yymv1 int8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintptrint16(v map[uintptr]int16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintptrint16(v *map[uintptr]int16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[uintptr]int16, yyrl1)
		*v = yyv1
	}
	var yymk1 uintptr
	var yymv1 int16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintptrint32(v map[uintptr]int32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintptrint32(v *map[uintptr]int32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[uintptr]int32, yyrl1)
		*v = yyv1
	}
	var yymk1 uintptr
	var yymv1 int32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintptrint64(v map[uintptr]int64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintptrint64(v *map[uintptr]int64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[uintptr]int64, yyrl1)
		*v = yyv1
	}
	var yymk1 uintptr
	var yymv1 int64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int64)(r.DecodeInt64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintptrfloat32(v map[uintptr]float32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat32(float32(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintptrfloat32(v *map[uintptr]float32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[uintptr]float32, yyrl1)
		*v = yyv1
	}
	var yymk1 uintptr
	var yymv1 float32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float32)(r.DecodeFloat32As64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintptrfloat64(v map[uintptr]float64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat64(float64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintptrfloat64(v *map[uintptr]float64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[uintptr]float64, yyrl1)
		*v = yyv1
	}
	var yymk1 uintptr
	var yymv1 float64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float64)(r.DecodeFloat64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapuintptrbool(v map[uintptr]bool, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeUint(uint64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeBool(bool(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapuintptrbool(v *map[uintptr]bool, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[uintptr]bool, yyrl1)
		*v = yyv1
	}
	var yymk1 uintptr
	var yymv1 bool
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (bool)(r.DecodeBool())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = false
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapintInterface(v map[int]interface{}, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapintInterface(v *map[int]interface{}, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[int]interface{}, yyrl1)
		*v = yyv1
	}
	var yymk1 int
	var yymv1 interface{}
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		if !yybh1.InterfaceReset {
			yymg1 = true
		}
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				if false {
				} else {
					z.DecFallback(&yymv1, true)
				}
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = nil
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapintstring(v map[int]string, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyv1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyv1))
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapintstring(v *map[int]string, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[int]string, yyrl1)
		*v = yyv1
	}
	var yymk1 int
	var yymv1 string
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (string)(r.DecodeString())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = ""
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapintuint(v map[int]uint, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapintuint(v *map[int]uint, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[int]uint, yyrl1)
		*v = yyv1
	}
	var yymk1 int
	var yymv1 uint
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapintuint8(v map[int]uint8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapintuint8(v *map[int]uint8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[int]uint8, yyrl1)
		*v = yyv1
	}
	var yymk1 int
	var yymv1 uint8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapintuint16(v map[int]uint16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapintuint16(v *map[int]uint16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[int]uint16, yyrl1)
		*v = yyv1
	}
	var yymk1 int
	var yymv1 uint16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapintuint32(v map[int]uint32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapintuint32(v *map[int]uint32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[int]uint32, yyrl1)
		*v = yyv1
	}
	var yymk1 int
	var yymv1 uint32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapintuint64(v map[int]uint64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapintuint64(v *map[int]uint64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[int]uint64, yyrl1)
		*v = yyv1
	}
	var yymk1 int
	var yymv1 uint64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint64)(r.DecodeUint64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapintuintptr(v map[int]uintptr, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapintuintptr(v *map[int]uintptr, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[int]uintptr, yyrl1)
		*v = yyv1
	}
	var yymk1 int
	var yymv1 uintptr
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapintint(v map[int]int, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapintint(v *map[int]int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[int]int, yyrl1)
		*v = yyv1
	}
	var yymk1 int
	var yymv1 int
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapintint8(v map[int]int8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapintint8(v *map[int]int8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[int]int8, yyrl1)
		*v = yyv1
	}
	var yymk1 int
	var yymv1 int8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapintint16(v map[int]int16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapintint16(v *map[int]int16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[int]int16, yyrl1)
		*v = yyv1
	}
	var yymk1 int
	var yymv1 int16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapintint32(v map[int]int32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapintint32(v *map[int]int32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[int]int32, yyrl1)
		*v = yyv1
	}
	var yymk1 int
	var yymv1 int32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapintint64(v map[int]int64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapintint64(v *map[int]int64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[int]int64, yyrl1)
		*v = yyv1
	}
	var yymk1 int
	var yymv1 int64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int64)(r.DecodeInt64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapintfloat32(v map[int]float32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat32(float32(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapintfloat32(v *map[int]float32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[int]float32, yyrl1)
		*v = yyv1
	}
	var yymk1 int
	var yymv1 float32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float32)(r.DecodeFloat32As64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapintfloat64(v map[int]float64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat64(float64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapintfloat64(v *map[int]float64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[int]float64, yyrl1)
		*v = yyv1
	}
	var yymk1 int
	var yymv1 float64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float64)(r.DecodeFloat64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapintbool(v map[int]bool, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeBool(bool(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapintbool(v *map[int]bool, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[int]bool, yyrl1)
		*v = yyv1
	}
	var yymk1 int
	var yymv1 bool
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (bool)(r.DecodeBool())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = false
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint8Interface(v map[int8]interface{}, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint8Interface(v *map[int8]interface{}, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 17)
		yyv1 = make(map[int8]interface{}, yyrl1)
		*v = yyv1
	}
	var yymk1 int8
	var yymv1 interface{}
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		if !yybh1.InterfaceReset {
			yymg1 = true
		}
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				if false {
				} else {
					z.DecFallback(&yymv1, true)
				}
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = nil
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint8string(v map[int8]string, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyv1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyv1))
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint8string(v *map[int8]string, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 17)
		yyv1 = make(map[int8]string, yyrl1)
		*v = yyv1
	}
	var yymk1 int8
	var yymv1 string
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (string)(r.DecodeString())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = ""
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint8uint(v map[int8]uint, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint8uint(v *map[int8]uint, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[int8]uint, yyrl1)
		*v = yyv1
	}
	var yymk1 int8
	var yymv1 uint
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint8uint8(v map[int8]uint8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint8uint8(v *map[int8]uint8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 2)
		yyv1 = make(map[int8]uint8, yyrl1)
		*v = yyv1
	}
	var yymk1 int8
	var yymv1 uint8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint8uint16(v map[int8]uint16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint8uint16(v *map[int8]uint16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 3)
		yyv1 = make(map[int8]uint16, yyrl1)
		*v = yyv1
	}
	var yymk1 int8
	var yymv1 uint16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint8uint32(v map[int8]uint32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint8uint32(v *map[int8]uint32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 5)
		yyv1 = make(map[int8]uint32, yyrl1)
		*v = yyv1
	}
	var yymk1 int8
	var yymv1 uint32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint8uint64(v map[int8]uint64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint8uint64(v *map[int8]uint64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[int8]uint64, yyrl1)
		*v = yyv1
	}
	var yymk1 int8
	var yymv1 uint64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint64)(r.DecodeUint64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint8uintptr(v map[int8]uintptr, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint8uintptr(v *map[int8]uintptr, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[int8]uintptr, yyrl1)
		*v = yyv1
	}
	var yymk1 int8
	var yymv1 uintptr
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint8int(v map[int8]int, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint8int(v *map[int8]int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[int8]int, yyrl1)
		*v = yyv1
	}
	var yymk1 int8
	var yymv1 int
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint8int8(v map[int8]int8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint8int8(v *map[int8]int8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 2)
		yyv1 = make(map[int8]int8, yyrl1)
		*v = yyv1
	}
	var yymk1 int8
	var yymv1 int8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint8int16(v map[int8]int16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint8int16(v *map[int8]int16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 3)
		yyv1 = make(map[int8]int16, yyrl1)
		*v = yyv1
	}
	var yymk1 int8
	var yymv1 int16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint8int32(v map[int8]int32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint8int32(v *map[int8]int32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 5)
		yyv1 = make(map[int8]int32, yyrl1)
		*v = yyv1
	}
	var yymk1 int8
	var yymv1 int32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint8int64(v map[int8]int64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint8int64(v *map[int8]int64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[int8]int64, yyrl1)
		*v = yyv1
	}
	var yymk1 int8
	var yymv1 int64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int64)(r.DecodeInt64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint8float32(v map[int8]float32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat32(float32(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint8float32(v *map[int8]float32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 5)
		yyv1 = make(map[int8]float32, yyrl1)
		*v = yyv1
	}
	var yymk1 int8
	var yymv1 float32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float32)(r.DecodeFloat32As64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint8float64(v map[int8]float64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat64(float64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint8float64(v *map[int8]float64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[int8]float64, yyrl1)
		*v = yyv1
	}
	var yymk1 int8
	var yymv1 float64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float64)(r.DecodeFloat64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint8bool(v map[int8]bool, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeBool(bool(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint8bool(v *map[int8]bool, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 2)
		yyv1 = make(map[int8]bool, yyrl1)
		*v = yyv1
	}
	var yymk1 int8
	var yymv1 bool
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (bool)(r.DecodeBool())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = false
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint16Interface(v map[int16]interface{}, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint16Interface(v *map[int16]interface{}, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 18)
		yyv1 = make(map[int16]interface{}, yyrl1)
		*v = yyv1
	}
	var yymk1 int16
	var yymv1 interface{}
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		if !yybh1.InterfaceReset {
			yymg1 = true
		}
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				if false {
				} else {
					z.DecFallback(&yymv1, true)
				}
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = nil
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint16string(v map[int16]string, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyv1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyv1))
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint16string(v *map[int16]string, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 18)
		yyv1 = make(map[int16]string, yyrl1)
		*v = yyv1
	}
	var yymk1 int16
	var yymv1 string
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (string)(r.DecodeString())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = ""
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint16uint(v map[int16]uint, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint16uint(v *map[int16]uint, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[int16]uint, yyrl1)
		*v = yyv1
	}
	var yymk1 int16
	var yymv1 uint
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint16uint8(v map[int16]uint8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint16uint8(v *map[int16]uint8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 3)
		yyv1 = make(map[int16]uint8, yyrl1)
		*v = yyv1
	}
	var yymk1 int16
	var yymv1 uint8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint16uint16(v map[int16]uint16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint16uint16(v *map[int16]uint16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 4)
		yyv1 = make(map[int16]uint16, yyrl1)
		*v = yyv1
	}
	var yymk1 int16
	var yymv1 uint16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint16uint32(v map[int16]uint32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint16uint32(v *map[int16]uint32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 6)
		yyv1 = make(map[int16]uint32, yyrl1)
		*v = yyv1
	}
	var yymk1 int16
	var yymv1 uint32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint16uint64(v map[int16]uint64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint16uint64(v *map[int16]uint64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[int16]uint64, yyrl1)
		*v = yyv1
	}
	var yymk1 int16
	var yymv1 uint64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint64)(r.DecodeUint64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint16uintptr(v map[int16]uintptr, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint16uintptr(v *map[int16]uintptr, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[int16]uintptr, yyrl1)
		*v = yyv1
	}
	var yymk1 int16
	var yymv1 uintptr
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint16int(v map[int16]int, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint16int(v *map[int16]int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[int16]int, yyrl1)
		*v = yyv1
	}
	var yymk1 int16
	var yymv1 int
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint16int8(v map[int16]int8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint16int8(v *map[int16]int8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 3)
		yyv1 = make(map[int16]int8, yyrl1)
		*v = yyv1
	}
	var yymk1 int16
	var yymv1 int8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint16int16(v map[int16]int16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint16int16(v *map[int16]int16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 4)
		yyv1 = make(map[int16]int16, yyrl1)
		*v = yyv1
	}
	var yymk1 int16
	var yymv1 int16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint16int32(v map[int16]int32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint16int32(v *map[int16]int32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 6)
		yyv1 = make(map[int16]int32, yyrl1)
		*v = yyv1
	}
	var yymk1 int16
	var yymv1 int32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint16int64(v map[int16]int64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint16int64(v *map[int16]int64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[int16]int64, yyrl1)
		*v = yyv1
	}
	var yymk1 int16
	var yymv1 int64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int64)(r.DecodeInt64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint16float32(v map[int16]float32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat32(float32(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint16float32(v *map[int16]float32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 6)
		yyv1 = make(map[int16]float32, yyrl1)
		*v = yyv1
	}
	var yymk1 int16
	var yymv1 float32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float32)(r.DecodeFloat32As64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint16float64(v map[int16]float64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat64(float64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint16float64(v *map[int16]float64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[int16]float64, yyrl1)
		*v = yyv1
	}
	var yymk1 int16
	var yymv1 float64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float64)(r.DecodeFloat64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint16bool(v map[int16]bool, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeBool(bool(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint16bool(v *map[int16]bool, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 3)
		yyv1 = make(map[int16]bool, yyrl1)
		*v = yyv1
	}
	var yymk1 int16
	var yymv1 bool
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (bool)(r.DecodeBool())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = false
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint32Interface(v map[int32]interface{}, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint32Interface(v *map[int32]interface{}, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 20)
		yyv1 = make(map[int32]interface{}, yyrl1)
		*v = yyv1
	}
	var yymk1 int32
	var yymv1 interface{}
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		if !yybh1.InterfaceReset {
			yymg1 = true
		}
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				if false {
				} else {
					z.DecFallback(&yymv1, true)
				}
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = nil
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint32string(v map[int32]string, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyv1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyv1))
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint32string(v *map[int32]string, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 20)
		yyv1 = make(map[int32]string, yyrl1)
		*v = yyv1
	}
	var yymk1 int32
	var yymv1 string
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (string)(r.DecodeString())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = ""
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint32uint(v map[int32]uint, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint32uint(v *map[int32]uint, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[int32]uint, yyrl1)
		*v = yyv1
	}
	var yymk1 int32
	var yymv1 uint
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint32uint8(v map[int32]uint8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint32uint8(v *map[int32]uint8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 5)
		yyv1 = make(map[int32]uint8, yyrl1)
		*v = yyv1
	}
	var yymk1 int32
	var yymv1 uint8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint32uint16(v map[int32]uint16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint32uint16(v *map[int32]uint16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 6)
		yyv1 = make(map[int32]uint16, yyrl1)
		*v = yyv1
	}
	var yymk1 int32
	var yymv1 uint16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint32uint32(v map[int32]uint32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint32uint32(v *map[int32]uint32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 8)
		yyv1 = make(map[int32]uint32, yyrl1)
		*v = yyv1
	}
	var yymk1 int32
	var yymv1 uint32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint32uint64(v map[int32]uint64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint32uint64(v *map[int32]uint64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[int32]uint64, yyrl1)
		*v = yyv1
	}
	var yymk1 int32
	var yymv1 uint64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint64)(r.DecodeUint64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint32uintptr(v map[int32]uintptr, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint32uintptr(v *map[int32]uintptr, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[int32]uintptr, yyrl1)
		*v = yyv1
	}
	var yymk1 int32
	var yymv1 uintptr
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint32int(v map[int32]int, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint32int(v *map[int32]int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[int32]int, yyrl1)
		*v = yyv1
	}
	var yymk1 int32
	var yymv1 int
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint32int8(v map[int32]int8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint32int8(v *map[int32]int8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 5)
		yyv1 = make(map[int32]int8, yyrl1)
		*v = yyv1
	}
	var yymk1 int32
	var yymv1 int8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint32int16(v map[int32]int16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint32int16(v *map[int32]int16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 6)
		yyv1 = make(map[int32]int16, yyrl1)
		*v = yyv1
	}
	var yymk1 int32
	var yymv1 int16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint32int32(v map[int32]int32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint32int32(v *map[int32]int32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 8)
		yyv1 = make(map[int32]int32, yyrl1)
		*v = yyv1
	}
	var yymk1 int32
	var yymv1 int32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint32int64(v map[int32]int64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint32int64(v *map[int32]int64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[int32]int64, yyrl1)
		*v = yyv1
	}
	var yymk1 int32
	var yymv1 int64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int64)(r.DecodeInt64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint32float32(v map[int32]float32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat32(float32(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint32float32(v *map[int32]float32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 8)
		yyv1 = make(map[int32]float32, yyrl1)
		*v = yyv1
	}
	var yymk1 int32
	var yymv1 float32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float32)(r.DecodeFloat32As64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint32float64(v map[int32]float64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat64(float64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint32float64(v *map[int32]float64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[int32]float64, yyrl1)
		*v = yyv1
	}
	var yymk1 int32
	var yymv1 float64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float64)(r.DecodeFloat64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint32bool(v map[int32]bool, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeBool(bool(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint32bool(v *map[int32]bool, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 5)
		yyv1 = make(map[int32]bool, yyrl1)
		*v = yyv1
	}
	var yymk1 int32
	var yymv1 bool
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (bool)(r.DecodeBool())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = false
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint64Interface(v map[int64]interface{}, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint64Interface(v *map[int64]interface{}, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[int64]interface{}, yyrl1)
		*v = yyv1
	}
	var yymk1 int64
	var yymv1 interface{}
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		if !yybh1.InterfaceReset {
			yymg1 = true
		}
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int64)(r.DecodeInt64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				if false {
				} else {
					z.DecFallback(&yymv1, true)
				}
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = nil
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint64string(v map[int64]string, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyv1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyv1))
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint64string(v *map[int64]string, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[int64]string, yyrl1)
		*v = yyv1
	}
	var yymk1 int64
	var yymv1 string
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int64)(r.DecodeInt64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (string)(r.DecodeString())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = ""
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint64uint(v map[int64]uint, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint64uint(v *map[int64]uint, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[int64]uint, yyrl1)
		*v = yyv1
	}
	var yymk1 int64
	var yymv1 uint
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int64)(r.DecodeInt64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint64uint8(v map[int64]uint8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint64uint8(v *map[int64]uint8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[int64]uint8, yyrl1)
		*v = yyv1
	}
	var yymk1 int64
	var yymv1 uint8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int64)(r.DecodeInt64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint64uint16(v map[int64]uint16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint64uint16(v *map[int64]uint16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[int64]uint16, yyrl1)
		*v = yyv1
	}
	var yymk1 int64
	var yymv1 uint16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int64)(r.DecodeInt64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint64uint32(v map[int64]uint32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint64uint32(v *map[int64]uint32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[int64]uint32, yyrl1)
		*v = yyv1
	}
	var yymk1 int64
	var yymv1 uint32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int64)(r.DecodeInt64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint64uint64(v map[int64]uint64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint64uint64(v *map[int64]uint64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[int64]uint64, yyrl1)
		*v = yyv1
	}
	var yymk1 int64
	var yymv1 uint64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int64)(r.DecodeInt64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint64)(r.DecodeUint64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint64uintptr(v map[int64]uintptr, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint64uintptr(v *map[int64]uintptr, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[int64]uintptr, yyrl1)
		*v = yyv1
	}
	var yymk1 int64
	var yymv1 uintptr
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int64)(r.DecodeInt64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint64int(v map[int64]int, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint64int(v *map[int64]int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[int64]int, yyrl1)
		*v = yyv1
	}
	var yymk1 int64
	var yymv1 int
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int64)(r.DecodeInt64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint64int8(v map[int64]int8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint64int8(v *map[int64]int8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[int64]int8, yyrl1)
		*v = yyv1
	}
	var yymk1 int64
	var yymv1 int8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int64)(r.DecodeInt64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint64int16(v map[int64]int16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint64int16(v *map[int64]int16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 10)
		yyv1 = make(map[int64]int16, yyrl1)
		*v = yyv1
	}
	var yymk1 int64
	var yymv1 int16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int64)(r.DecodeInt64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint64int32(v map[int64]int32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint64int32(v *map[int64]int32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[int64]int32, yyrl1)
		*v = yyv1
	}
	var yymk1 int64
	var yymv1 int32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int64)(r.DecodeInt64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint64int64(v map[int64]int64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint64int64(v *map[int64]int64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[int64]int64, yyrl1)
		*v = yyv1
	}
	var yymk1 int64
	var yymv1 int64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int64)(r.DecodeInt64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int64)(r.DecodeInt64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint64float32(v map[int64]float32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat32(float32(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint64float32(v *map[int64]float32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 12)
		yyv1 = make(map[int64]float32, yyrl1)
		*v = yyv1
	}
	var yymk1 int64
	var yymv1 float32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int64)(r.DecodeInt64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float32)(r.DecodeFloat32As64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint64float64(v map[int64]float64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat64(float64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint64float64(v *map[int64]float64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 16)
		yyv1 = make(map[int64]float64, yyrl1)
		*v = yyv1
	}
	var yymk1 int64
	var yymv1 float64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int64)(r.DecodeInt64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float64)(r.DecodeFloat64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapint64bool(v map[int64]bool, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeInt(int64(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeBool(bool(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapint64bool(v *map[int64]bool, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[int64]bool, yyrl1)
		*v = yyv1
	}
	var yymk1 int64
	var yymv1 bool
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = 0
			} else {
				yymk1 = (int64)(r.DecodeInt64())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (bool)(r.DecodeBool())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = false
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapboolInterface(v map[bool]interface{}, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeBool(bool(yyk1))
		}
		r.WriteMapElemValue()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			if false {
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapboolInterface(v *map[bool]interface{}, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 17)
		yyv1 = make(map[bool]interface{}, yyrl1)
		*v = yyv1
	}
	var yymk1 bool
	var yymv1 interface{}
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		if !yybh1.InterfaceReset {
			yymg1 = true
		}
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = false
			} else {
				yymk1 = (bool)(r.DecodeBool())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				if false {
				} else {
					z.DecFallback(&yymv1, true)
				}
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = nil
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapboolstring(v map[bool]string, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeBool(bool(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			if z.EncBasicHandle().StringToRaw {
				r.EncodeStringBytesRaw(z.BytesView(string(yyv1)))
			} else {
				r.EncodeStringEnc(codecSelferCcUTF819781, string(yyv1))
			}
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapboolstring(v *map[bool]string, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 17)
		yyv1 = make(map[bool]string, yyrl1)
		*v = yyv1
	}
	var yymk1 bool
	var yymv1 string
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = false
			} else {
				yymk1 = (bool)(r.DecodeBool())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (string)(r.DecodeString())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = ""
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapbooluint(v map[bool]uint, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeBool(bool(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapbooluint(v *map[bool]uint, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[bool]uint, yyrl1)
		*v = yyv1
	}
	var yymk1 bool
	var yymv1 uint
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = false
			} else {
				yymk1 = (bool)(r.DecodeBool())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapbooluint8(v map[bool]uint8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeBool(bool(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapbooluint8(v *map[bool]uint8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 2)
		yyv1 = make(map[bool]uint8, yyrl1)
		*v = yyv1
	}
	var yymk1 bool
	var yymv1 uint8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = false
			} else {
				yymk1 = (bool)(r.DecodeBool())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint8)(z.C.UintV(r.DecodeUint64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapbooluint16(v map[bool]uint16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeBool(bool(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapbooluint16(v *map[bool]uint16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 3)
		yyv1 = make(map[bool]uint16, yyrl1)
		*v = yyv1
	}
	var yymk1 bool
	var yymv1 uint16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = false
			} else {
				yymk1 = (bool)(r.DecodeBool())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint16)(z.C.UintV(r.DecodeUint64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapbooluint32(v map[bool]uint32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeBool(bool(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapbooluint32(v *map[bool]uint32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 5)
		yyv1 = make(map[bool]uint32, yyrl1)
		*v = yyv1
	}
	var yymk1 bool
	var yymv1 uint32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = false
			} else {
				yymk1 = (bool)(r.DecodeBool())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint32)(z.C.UintV(r.DecodeUint64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapbooluint64(v map[bool]uint64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeBool(bool(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapbooluint64(v *map[bool]uint64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[bool]uint64, yyrl1)
		*v = yyv1
	}
	var yymk1 bool
	var yymv1 uint64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = false
			} else {
				yymk1 = (bool)(r.DecodeBool())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uint64)(r.DecodeUint64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapbooluintptr(v map[bool]uintptr, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeBool(bool(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapbooluintptr(v *map[bool]uintptr, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[bool]uintptr, yyrl1)
		*v = yyv1
	}
	var yymk1 bool
	var yymv1 uintptr
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = false
			} else {
				yymk1 = (bool)(r.DecodeBool())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (uintptr)(z.C.UintV(r.DecodeUint64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapboolint(v map[bool]int, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeBool(bool(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapboolint(v *map[bool]int, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[bool]int, yyrl1)
		*v = yyv1
	}
	var yymk1 bool
	var yymv1 int
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = false
			} else {
				yymk1 = (bool)(r.DecodeBool())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize19781))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapboolint8(v map[bool]int8, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeBool(bool(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapboolint8(v *map[bool]int8, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 2)
		yyv1 = make(map[bool]int8, yyrl1)
		*v = yyv1
	}
	var yymk1 bool
	var yymv1 int8
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = false
			} else {
				yymk1 = (bool)(r.DecodeBool())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int8)(z.C.IntV(r.DecodeInt64(), 8))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapboolint16(v map[bool]int16, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeBool(bool(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapboolint16(v *map[bool]int16, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 3)
		yyv1 = make(map[bool]int16, yyrl1)
		*v = yyv1
	}
	var yymk1 bool
	var yymv1 int16
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = false
			} else {
				yymk1 = (bool)(r.DecodeBool())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int16)(z.C.IntV(r.DecodeInt64(), 16))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapboolint32(v map[bool]int32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeBool(bool(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapboolint32(v *map[bool]int32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 5)
		yyv1 = make(map[bool]int32, yyrl1)
		*v = yyv1
	}
	var yymk1 bool
	var yymv1 int32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = false
			} else {
				yymk1 = (bool)(r.DecodeBool())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int32)(z.C.IntV(r.DecodeInt64(), 32))
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapboolint64(v map[bool]int64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeBool(bool(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapboolint64(v *map[bool]int64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[bool]int64, yyrl1)
		*v = yyv1
	}
	var yymk1 bool
	var yymv1 int64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = false
			} else {
				yymk1 = (bool)(r.DecodeBool())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (int64)(r.DecodeInt64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapboolfloat32(v map[bool]float32, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeBool(bool(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat32(float32(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapboolfloat32(v *map[bool]float32, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 5)
		yyv1 = make(map[bool]float32, yyrl1)
		*v = yyv1
	}
	var yymk1 bool
	var yymv1 float32
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = false
			} else {
				yymk1 = (bool)(r.DecodeBool())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float32)(r.DecodeFloat32As64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapboolfloat64(v map[bool]float64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeBool(bool(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeFloat64(float64(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapboolfloat64(v *map[bool]float64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 9)
		yyv1 = make(map[bool]float64, yyrl1)
		*v = yyv1
	}
	var yymk1 bool
	var yymv1 float64
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = false
			} else {
				yymk1 = (bool)(r.DecodeBool())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (float64)(r.DecodeFloat64())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = 0
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encMapboolbool(v map[bool]bool, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeBool(bool(yyk1))
		}
		r.WriteMapElemValue()
		if false {
		} else {
			r.EncodeBool(bool(yyv1))
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMapboolbool(v *map[bool]bool, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 2)
		yyv1 = make(map[bool]bool, yyrl1)
		*v = yyv1
	}
	var yymk1 bool
	var yymv1 bool
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = false
			} else {
				yymk1 = (bool)(r.DecodeBool())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1 = (bool)(r.DecodeBool())
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = false
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) enctestMammoth2Basic(v *testMammoth2Basic, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if false {
		} else {
			r.EncodeUint(uint64(yyv1))
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer19781) dectestMammoth2Basic(v *testMammoth2Basic, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := v
	yyh1, yyl1 := z.DecSliceHelperStart()
	if yyl1 == 0 {

	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1

		var yyj1 int
		// var yydn1 bool
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination

			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				z.DecArrayCannotExpand(len(v), yyj1+1)
				yydb1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = 0
				} else {
					yyv1[yyj1] = (uint64)(r.DecodeUint64())
				}

			}

		}

	}
	yyh1.End()

}

func (x codecSelfer19781) encMaptestMammoth2BasicTestMammoth2(v map[testMammoth2Basic]TestMammoth2, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		yy2 := &yyk1
		yy2.CodecEncodeSelf(e)
		r.WriteMapElemValue()
		yy4 := &yyv1
		yy4.CodecEncodeSelf(e)
	}
	r.WriteMapEnd()
}

func (x codecSelfer19781) decMaptestMammoth2BasicTestMammoth2(v *map[testMammoth2Basic]TestMammoth2, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 4912)
		yyv1 = make(map[testMammoth2Basic]TestMammoth2, yyrl1)
		*v = yyv1
	}
	var yymk1 testMammoth2Basic
	var yymv1 TestMammoth2
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = testMammoth2Basic{}
			} else {
				yymk1.CodecDecodeSelf(d)
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = TestMammoth2{}
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1.CodecDecodeSelf(d)
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = TestMammoth2{}
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer19781) encSliceTestMammoth2(v []TestMammoth2, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer19781) decSliceTestMammoth2(v *[]TestMammoth2, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []TestMammoth2{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 4880)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]TestMammoth2, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 4880)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]TestMammoth2, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, TestMammoth2{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = TestMammoth2{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]TestMammoth2, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer19781) encArray4int64(v *[4]int64, e *Encoder) {
	var h codecSelfer19781
	z, r := GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if false {
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer19781) decArray4int64(v *[4]int64, d *Decoder) {
	var h codecSelfer19781
	z, r := GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := v
	yyh1, yyl1 := z.DecSliceHelperStart()
	if yyl1 == 0 {

	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1

		var yyj1 int
		// var yydn1 bool
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ { // bounds-check-elimination

			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				z.DecArrayCannotExpand(len(v), yyj1+1)
				yydb1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = 0
				} else {
					yyv1[yyj1] = (int64)(r.DecodeInt64())
				}

			}

		}

	}
	yyh1.End()

}
